{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2022-12-18T00:59:51.416043+00:00",
  "repo": "oauth-wg/oauth-selective-disclosure-jwt",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    },
    {
      "name": "ready-to-close",
      "description": "",
      "color": "1BF2AF"
    },
    {
      "name": "has-PR",
      "description": "",
      "color": "33131E"
    },
    {
      "name": "discuss-first",
      "description": "",
      "color": "D527F2"
    },
    {
      "name": "editorial",
      "description": "",
      "color": "255D61"
    },
    {
      "name": "post-wg-adoption",
      "description": "",
      "color": "4A60C8"
    },
    {
      "name": "needs-PR",
      "description": "",
      "color": "AA169E"
    },
    {
      "name": "pending-close",
      "description": "",
      "color": "6C5669"
    }
  ],
  "issues": [
    {
      "number": 2,
      "id": "I_kwDOHTmVzM5J_zvb",
      "title": "Add example: JWT-VC as in W3C VC data model",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/2",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "",
      "createdAt": "2022-05-19T09:03:01Z",
      "updatedAt": "2022-06-14T16:14:23Z",
      "closedAt": "2022-06-14T16:14:23Z",
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "NONE",
          "body": "Can you please also add an example of a W3C compatible JWT Verifiable Presentation?",
          "createdAt": "2022-06-08T13:29:26Z",
          "updatedAt": "2022-06-08T13:29:42Z"
        }
      ]
    },
    {
      "number": 3,
      "id": "I_kwDOHTmVzM5KAiF1",
      "title": "Salting claim names and claims [discussion point]",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/3",
      "state": "CLOSED",
      "author": "alenhorvat",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Some use cases may require hiding both claim names and claims.\r\n\r\nSome schemas are country/jurisdiction-specific and revealing all claims might reveal some additional information.\r\n\r\nOpen questions/remarks\r\n- since the issuer is known, information about the schema can be guessed\r\n- hiding the claim names does not hide the structure\r\n- do use cases really require hiding the claim name?",
      "createdAt": "2022-05-19T11:49:43Z",
      "updatedAt": "2022-05-31T11:10:37Z",
      "closedAt": "2022-05-31T10:32:36Z",
      "comments": [
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There have been some discussions about it on the signal group. \r\n\r\nJust recording them for the transparency purposes\r\n\r\n- hide claim values only\r\n- hide claim names and claim values\r\n\r\nRationale:\r\nSome schemas are country/jurisdiction specific and revealing all claims might reveal some additional information. (Something the use-cases still need to clarify is the fact that the issuer is known. Still waiting for some additional feedback.)\r\n\r\n--\r\nThat's what I thought. Another question would be: For structured claim objects (cf. eKYC & IDA Spec), do we need to hide the structure? The structure itself might be revealing some information.\r\n--\r\nI can imagine the cases where an issuer would be issuing only one type of credentials with fixed structure and claimset. That means, if you know the issuer, you can pretty much find out the structure and claim names in it. So, hiding the structure and claim names would not add much.\r\n--\r\nI would assume that is the default.\r\n--\r\nI agree\r\n--\r\nIn ekyc, the structure alone can reveal the type of evidence used, which might leak info about e.g. nationality. \r\n\r\nBut these cases might be rare and I'd also like to keep it simple for now.\r\n--\r\nRight. At the same time, you typically want to know the nationality in the case of EKYC in financial institutions :-) \r\n\r\nSpeaking of that, I was assuming that in a lot of cases, the receiver may need to know the type of credential especially when the issuer was issuing multiple types of credentials at different assurance levels. Is this assumption bogus?\r\n--\r\nThat's a valid assumption. Verifier needs to know the level of assurance of the VC and in most cases (I guess) it will need to know under what policies the holder keys are created/stored/... (or if it can trust the wallet where the Verifiable Presentation was created and is shared from)\r\n--\r\n",
          "createdAt": "2022-05-27T01:46:29Z",
          "updatedAt": "2022-05-27T01:46:29Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "@sakimura are you arguing to have both options - to hide and not to hide claim names?",
          "createdAt": "2022-05-31T10:10:23Z",
          "updatedAt": "2022-05-31T10:10:23Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "We are discussing whether there's really a case where we need to hide the names.\r\nIn most cases, you'll need to reveal info about the issuer and the schema.",
          "createdAt": "2022-05-31T10:15:27Z",
          "updatedAt": "2022-05-31T10:15:27Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yup. And once you reveal info about the issuer and the schema, there is no\npoint in hiding the claim names in most cases. So, I am arguing that we do\nnot need to hide them.\n\nOn Tue, May 31, 2022 at 7:15 PM Alen Horvat ***@***.***>\nwrote:\n\n> We are discussing whether there's really a case where we need to hide the\n> names.\n> In most cases, you'll need to reveal info about the issuer and the schema.\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/3#issuecomment-1141944310>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABFEN4EQWSPKPNHUYHBHU3VMXRETANCNFSM5WL6KVWQ>\n> .\n> You are receiving this because you were mentioned.Message ID:\n> ***@***.***>\n>\n\n\n-- \nNat Sakimura (=nat)\nChairman, OpenID Foundation\nhttp://nat.sakimura.org/\n@_nat_en\n",
          "createdAt": "2022-05-31T10:25:56Z",
          "updatedAt": "2022-05-31T10:25:56Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "I agree. \r\nWe can close this issue.\r\n\r\nThank you!",
          "createdAt": "2022-05-31T10:32:36Z",
          "updatedAt": "2022-05-31T10:32:36Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we should add the rationale why we are not hiding claim names. leaving a note for self to do a PR on this.",
          "createdAt": "2022-05-31T11:10:36Z",
          "updatedAt": "2022-05-31T11:10:36Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "I_kwDOHTmVzM5KfTUT",
      "title": "Rename sd_claims to _sd_claims",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/4",
      "state": "CLOSED",
      "author": "selfissued",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In OpenID Connect, we use the convention that meta claim names (claims about sets of claims) are prefixed by an underscore.  For example, see the `_claim_names` and `_claim_sources` claims defined at https://openid.net/specs/openid-connect-core-1_0.html#AggregatedDistributedClaims.  I think we should do the same.\r\n\r\nPlease rename `sd_claims` to `_sd_claims`.",
      "createdAt": "2022-05-26T15:28:08Z",
      "updatedAt": "2022-05-30T15:49:00Z",
      "closedAt": "2022-05-30T15:48:59Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Thanks, I renamed `sd_claims` to just `_sd`.",
          "createdAt": "2022-05-30T15:48:59Z",
          "updatedAt": "2022-05-30T15:48:59Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "I_kwDOHTmVzM5KfVJ_",
      "title": "Cite JWT as RFC 7519 and JWS as RFC 7515",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/5",
      "state": "CLOSED",
      "author": "selfissued",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The spec currently does not contain a reference for RFC 7519 (JWT), which it clearly needs to.  It also uses RFC 7515 (JWS) as the citation for JWT in several place, which is incorrect.\r\n\r\nPlease add a RFC 7519 (JWT) reference and cite it the first time that the term JSON Web Token (JWT) is used in the body of the spec (but not in the abstract).  And look at the current uses of RFC 7515 and correct those that should be RFC 7519.",
      "createdAt": "2022-05-26T15:34:10Z",
      "updatedAt": "2022-05-30T14:52:03Z",
      "closedAt": "2022-05-30T14:52:03Z",
      "comments": []
    },
    {
      "number": 8,
      "id": "I_kwDOHTmVzM5KhO-9",
      "title": "There are two \"terminologies\" in 1.1 and 2",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/8",
      "state": "CLOSED",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Currently, it has\r\n\r\n1.1. Conventions and Terminology\r\n2. Terminology\r\n\r\nHaving two \"Terminology\" as consecutive headings is not good. \r\nI propose to change 2 as follows: \r\n\r\n2. Terms and Definitions\r\n",
      "createdAt": "2022-05-27T00:55:58Z",
      "updatedAt": "2022-06-01T12:33:16Z",
      "closedAt": "2022-06-01T12:33:16Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "closing with PR #16 ",
          "createdAt": "2022-06-01T12:33:16Z",
          "updatedAt": "2022-06-01T12:33:16Z"
        }
      ]
    },
    {
      "number": 9,
      "id": "I_kwDOHTmVzM5KhQ-o",
      "title": "Term \"holder\" has a mismatch with legal notions in EU Data Act etc. ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/9",
      "state": "OPEN",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "post-wg-adoption"
      ],
      "body": "\"holder\" is not a good term to use in this context as it overlaps with a legal term that maps to claims sources. (cf. EU Data Act, Australian Consumer Data Regulation, etc. )\r\n\r\nPerhaps we can just use \"wallet\" for this purpose. ",
      "createdAt": "2022-05-27T01:12:41Z",
      "updatedAt": "2022-06-29T01:30:21Z",
      "closedAt": null,
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I'm open to using something other than holder, but I don't think we should use wallet. That term implies a lot about the use case, but this mechanism might have many other use cases.",
          "createdAt": "2022-05-30T15:00:40Z",
          "updatedAt": "2022-05-30T15:00:40Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Some candidates: \r\n* Container\r\n* keeper\r\n",
          "createdAt": "2022-05-31T08:00:51Z",
          "updatedAt": "2022-05-31T08:00:51Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "- \"owner\" (probably easy to confuse with legal terms, but would be similar to resource owner)\r\n- \"controller\"",
          "createdAt": "2022-05-31T14:05:51Z",
          "updatedAt": "2022-05-31T14:05:51Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "my personal preference would be \"resource owner binding\"",
          "createdAt": "2022-06-01T11:22:32Z",
          "updatedAt": "2022-06-01T11:22:32Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "Which term is used in the other JWT-related specs?",
          "createdAt": "2022-06-01T18:15:44Z",
          "updatedAt": "2022-06-01T18:15:44Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So, from the definition, it looks like it is software. \r\nThus, it cannot be a controller etc. nor a data subject. \r\nIf it is to be a data subject, then we need to modify the definition text. ",
          "createdAt": "2022-06-02T08:55:01Z",
          "updatedAt": "2022-06-02T08:55:01Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "Like it or not, the term \"holder\" is pervasively used for this role - in part, because of its use at https://www.w3.org/TR/vc-data-model/#dfn-holders.  I think we would make our specification less clear by changing terms.\r\n\r\nI believe this issue should be closed with no action on that basis.",
          "createdAt": "2022-06-07T18:50:49Z",
          "updatedAt": "2022-06-07T18:50:49Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "W3C is a very small community compared to the addressable market we are envisioning. It is not about liking or not. If legislations use the term for something else in the model we are talking about, it will cause more confusion down the road than we do now for the current technical community. Imagine using \"Data Controller\" to refer to individuals as we believe individuals should have control over the data. That would cause awful confusion. We are talking about something similar to that. ",
          "createdAt": "2022-06-13T02:43:09Z",
          "updatedAt": "2022-06-13T02:43:09Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "At least for the short term, the tactical audiences for this spec are the IETF decision makers we'll be trying to convince to adopt this spec and people from the W3C Verifiable Credentials community who we'll be trying to work with to create a SD-JWT profile of VCs.  In both those cases, us inventing non-standard terminology for one of the core roles would be an impediment to clear conversations.  We should not do that now.\r\n\r\nOnce it's an IETF working group spec, I think that's the time and venue to have the terminology discussion.  Let's not attempt to change terminology before then.",
          "createdAt": "2022-06-13T12:02:51Z",
          "updatedAt": "2022-06-13T12:02:51Z"
        },
        {
          "author": "Macke",
          "authorAssociation": "NONE",
          "body": "FWIW when I reviewed this draft I was concered (before I spotted this Issue) about the use of holder, especially in the context of issuer and verifier as it could be easily mis-understood as holder in a VC sense only.  I think it would be better to use a different name and then reference some possible implementation patterns such as the holder role in VC.  Perhaps taking inspiration from the definition in the current holder section something like 'receiver' or 'sd-receiver' might be suitable.",
          "createdAt": "2022-06-18T10:21:16Z",
          "updatedAt": "2022-06-18T10:21:16Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Maybe something like `holder-of-key`? Inspired by https://datatracker.ietf.org/doc/html/rfc7800",
          "createdAt": "2022-06-27T04:42:55Z",
          "updatedAt": "2022-06-27T04:42:55Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Holder-of-key has a very specific meaning and would not suit our case\nunless you want to make holder binding mandatory.\n\nAnd here is the link to Australian Consumer data right\nhttps://www.accc.gov.au/focus-areas/consumer-data-right-cdr-0/compliance-guidance-for-data-holders.\nHere, \"data holder\" is the issuer in our case and often abbreviated as\n\"holder\".\n\nThe same applies to EU Data Act.\n\nOn Mon, Jun 27, 2022 at 1:43 PM Kristina ***@***.***> wrote:\n\n> Maybe something like holder-of-key? Inspired by\n> https://datatracker.ietf.org/doc/html/rfc7800\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/9#issuecomment-1166838987>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABFEN6LM52WOBSGOC7GPRLVREWNVANCNFSM5XCZPXTA>\n> .\n> You are receiving this because you authored the thread.Message ID:\n> ***@***.***>\n>\n\n\n-- \nNat Sakimura (=nat)\nChairman, OpenID Foundation\nhttp://nat.sakimura.org/\n@_nat_en\n",
          "createdAt": "2022-06-27T16:19:41Z",
          "updatedAt": "2022-06-27T16:19:41Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "but in ISO mDL world, we are moving forward with the term \"holder\". no one from EU/Australia seemed to be concerned. Apparently, document Holder is also typical term from the document business.",
          "createdAt": "2022-06-29T01:30:14Z",
          "updatedAt": "2022-06-29T01:30:21Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "I_kwDOHTmVzM5KhSrZ",
      "title": "Terms: \"release\"",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/10",
      "state": "CLOSED",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Using a single word \"release\" as a defined term is not a good practice. We will lose the capability to use \"release\" in the dictionary sense. You may say that it would be fine as we can capitalize it but it should be noted that the notion of capitalization does not exist in many languages and it will cause issues when translating. \r\n\r\nAs the abbreviation indicates, perhaps it would be better to call it SD-JWT Release. ",
      "createdAt": "2022-05-27T01:28:44Z",
      "updatedAt": "2022-06-01T12:33:25Z",
      "closedAt": "2022-06-01T12:33:24Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed. SD-JWT-R or SD-JWT-Release would be better.",
          "createdAt": "2022-05-30T08:18:59Z",
          "updatedAt": "2022-05-30T08:18:59Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I would be fine with that.",
          "createdAt": "2022-05-30T14:59:43Z",
          "updatedAt": "2022-05-30T14:59:43Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "closing with PR #16 ",
          "createdAt": "2022-06-01T12:33:24Z",
          "updatedAt": "2022-06-01T12:33:24Z"
        }
      ]
    },
    {
      "number": 11,
      "id": "I_kwDOHTmVzM5KhTb4",
      "title": "2. Terminology -- the way it is written does not look like Terms and definitions",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/11",
      "state": "CLOSED",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "* The way it is written now does not look like terms and definitions. \r\n* It would also be a good practice to make it possible to the definition to replace the terms that appear in the main text. \r\n* With this respect, verbose explanations especially the mechanisms should be done in the \"Concepts\" section in the main text. In fact, much of the text in the current \"terminology\" mostly duplicates what is being explained in 3. Concept\r\n* Also, examples etc. should be added as a note to the definition and not as part of the definition text. \r\n\r\nProposes the following as amended text\r\n\r\n**2. Terms and definitions**\r\n\r\n**2.1 SD-JWT** \r\nsigned JWT [[RFC7515](https://oauthstuff.github.io/draft-selective-disclosure-jwt/draft-fett-selective-disclosure-jwt-00.html#RFC7515)], that supports selective disclosure as defined in this document\r\n\r\nNote to entry: Signed JWT is JWS. \r\n\r\n**2.2 release (SD-JWT-R)**\r\ndocument that contains a subset of the claim values of an SD-JWT in a verifiable way\r\n\r\nNote to entry: Holder binding is also possible. \r\n\r\n**2.3 issuer**\r\nentity that create SD-JWTs (2.1)\r\n\r\n**2.4 holder**\r\nentity that has control over SD-JWTs (2.1) \r\n\r\nNote to entry: If holder binding is desired, the holder also has the signing key for the verification key contained in the SD-JWT.\r\n\r\n**2.5 verifier** \r\nentity that checks and extracts the claims from SSD-JWT-R (2.2) \r\n",
      "createdAt": "2022-05-27T01:36:31Z",
      "updatedAt": "2022-06-01T12:33:33Z",
      "closedAt": "2022-06-01T12:33:33Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "closing with PR #16 ",
          "createdAt": "2022-06-01T12:33:33Z",
          "updatedAt": "2022-06-01T12:33:33Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "I_kwDOHTmVzM5KpkfM",
      "title": "should we allow signing formats other than JWS, ie LD-Proofs, JAdES and group signatures?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/12",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "ready-to-close"
      ],
      "body": "Do we want to allow signing formats other than JWS, ie LD-Proofs, JAdES and group signatures?\r\n\r\nI am not an expert on JAdES, but from my understanding, I think it is close enough to JWS, it should be included. \r\nI do not see the benefit of including LD-Proofs and group signatures, since the whole point of this work was to enable selective disclosure without using those signature formats...\r\n\r\nBased on the @alenhorvat 's comment to my PR: https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/1#discussion_r877144122",
      "createdAt": "2022-05-30T08:53:51Z",
      "updatedAt": "2022-06-14T17:01:15Z",
      "closedAt": "2022-06-14T17:01:14Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Also, we need to keep things simple. JAdES can make sense. ",
          "createdAt": "2022-05-30T14:58:40Z",
          "updatedAt": "2022-05-30T14:58:40Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "You're right. I missed one element:\r\n- JWS, JAdES sign JSON as is\r\n- LD-proofs, group signatures usually require additional transformation (and we're avoiding this).\r\nKeeping JWS is sufficient. (JAdES results either with compact serialised or JSON serialised JWS, so we're covered).\r\n\r\nLet's keep only JWS and we can close this issue.",
          "createdAt": "2022-05-30T15:13:43Z",
          "updatedAt": "2022-05-30T15:13:43Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree that we should support only JWS signatures as JWTs do, since our spec is explicitly a JWT profile.\r\n\r\nI think that we should close this issue with no action on that basis.",
          "createdAt": "2022-06-07T18:52:41Z",
          "updatedAt": "2022-06-07T18:52:41Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "To clarify, do we agree that since signing as JWS allows for both JWS compact serialization and JWS JSON serialization, this specification supports JaDES?",
          "createdAt": "2022-06-10T18:23:10Z",
          "updatedAt": "2022-06-10T18:23:10Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "In the name of keeping simple things simple, I would advocate supporting exactly one signing format - the JWS Compact Serialization - making the same choice as JWTs.  That will result in the greatest interoperability.\r\n\r\nIf separately, we want to create a derived spec or specs saying how to use SD-JWTs, but with other signature types, we could do that.  But that should occur in separate specification(s) - not in the SD-JWT spec itself.\r\n\r\nAlso, note that many JWS implementations only support the Compact Serialization, because that's all you need for JWTs.  The JSON Serialization is more complicated in several aspects and is much more rarely implemented.  We should not take a dependence upon it.",
          "createdAt": "2022-06-13T12:07:59Z",
          "updatedAt": "2022-06-13T12:07:59Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed to support only JWS Compact Serialization in SD-JWT and define a separate profile for JWS JSON serialization if needed.\r\n\r\n@alenhorvat agrees.",
          "createdAt": "2022-06-14T17:01:14Z",
          "updatedAt": "2022-06-14T17:01:14Z"
        }
      ]
    },
    {
      "number": 13,
      "id": "I_kwDOHTmVzM5KplJb",
      "title": "information about the hash function",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/13",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "information about the hash function should probably be included inside SD-JWT.\r\n\r\nBased on @AlenHorvat 's comment to the PR https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/1#discussion_r877151757",
      "createdAt": "2022-05-30T08:56:18Z",
      "updatedAt": "2022-06-16T09:20:34Z",
      "closedAt": "2022-06-16T09:20:34Z",
      "comments": [
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, needed indeed. This and more details about hash formatting (how to transform inputs into byte arrays to be passed to the hash function).",
          "createdAt": "2022-06-01T18:10:07Z",
          "updatedAt": "2022-06-01T18:10:07Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "The alternative is to use the same hash function as was used for the signature.  This is done in OpenID Connect Core at https://openid.net/specs/openid-connect-core-1_0.html#ImplicitTokenValidation in the `at_hash` definition (as well as in the `c_hash` definition.  The language is:\r\n> Hash the octets of the ASCII representation of the `access_token` with the hash algorithm specified in [JWA](https://openid.net/specs/openid-connect-core-1_0.html#JWA) [JWA] for the `alg` Header Parameter of the ID Token's JOSE Header. For instance, if the `alg` is `RS256`, the hash algorithm used is SHA-256.",
          "createdAt": "2022-06-07T18:59:55Z",
          "updatedAt": "2022-06-07T18:59:55Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "You might want to use a different hash function to reduce the SD-JWT size (e.g., SHA-256 truncated to 128 bit), or decide on a stronger hash function with iteration to reduce the size of the salt (again, to minimize the size of the artefact). Bottom line, choosing the hash function independently might be useful.",
          "createdAt": "2022-06-07T21:35:29Z",
          "updatedAt": "2022-06-07T21:35:29Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "As discussed in the call, if we allow different hashes to be used, we may want to make a recommendation that for simplicity an implementor may want to use the same hash algorithm to minimise implementation errors.",
          "createdAt": "2022-06-13T15:14:12Z",
          "updatedAt": "2022-06-13T15:14:12Z"
        }
      ]
    },
    {
      "number": 14,
      "id": "I_kwDOHTmVzM5KpmFm",
      "title": "No need for the wallet-generated hashes",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/14",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "ready-to-close"
      ],
      "body": "In the security considerations section, add a recommendation to use uuidv4 or something that's standardised to generate salt\r\n\r\nBased on @AlenHorvat 's comment on the PR https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/1#discussion_r877161631",
      "createdAt": "2022-05-30T08:59:48Z",
      "updatedAt": "2022-06-16T09:22:00Z",
      "closedAt": "2022-06-16T09:22:00Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "What is the advantage of using a UUID? Using a UUID wastes space by making the representation much longer. \r\n\r\nPKCE for example did not choose to use a UUID.",
          "createdAt": "2022-05-30T14:57:38Z",
          "updatedAt": "2022-05-30T14:57:38Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "Idea is to suggest something standardised for the salt generation to avoid misusing random number generators (const. seeds, timestamp as a seed, ...). I don't have a particular preference on what approach is recommended.",
          "createdAt": "2022-05-30T15:08:38Z",
          "updatedAt": "2022-05-30T15:08:38Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Makes sense, but I don't think a UUID is a good fit here. ",
          "createdAt": "2022-05-30T15:11:35Z",
          "updatedAt": "2022-05-30T15:11:35Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "RFC7636 (PKCE) says this in the security considerations:\r\n\r\n> [7.1](https://datatracker.ietf.org/doc/html/rfc7636#section-7.1).  Entropy of the code_verifier\r\n>\r\n>   The security model relies on the fact that the code verifier is not\r\n>   learned or guessed by the attacker.  It is vitally important to\r\n>   adhere to this principle.  As such, the code verifier has to be\r\n>   created in such a manner that it is cryptographically random and has\r\n>   high entropy that it is not practical for the attacker to guess.\r\n",
          "createdAt": "2022-05-30T15:14:03Z",
          "updatedAt": "2022-05-30T15:14:03Z"
        },
        {
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "body": "> Makes sense, but I don't think a UUID is a good fit here.\r\n\r\nI agree.\r\nShould we make a recommendation or we just re-use the security consideration from PKCE without suggesting anything? \r\nFrom a standardisation point of view security consideration as above is sufficient (devs usually ask for a recommendation)\r\nIf this is the case, we can close the issue.",
          "createdAt": "2022-05-30T15:22:37Z",
          "updatedAt": "2022-05-30T15:22:37Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I think we should be fine with the security recommendation.",
          "createdAt": "2022-05-30T15:26:47Z",
          "updatedAt": "2022-05-30T15:26:47Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "We should stay away from uuid for the salt, IMO. Many UID library do not generate cryptographically random values, as it is needed here.",
          "createdAt": "2022-06-01T18:09:11Z",
          "updatedAt": "2022-06-01T18:09:11Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree that the current Security Considerations are sufficient.  I also agree that UUIDs have multiple problems.\r\n\r\nI recommend that we close this issue with no further actions on this basis.",
          "createdAt": "2022-06-07T19:04:06Z",
          "updatedAt": "2022-06-07T19:04:06Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "agree with the discussion. I did a PR #38 because I did not think the current security considerations reflected this conversation sufficiently well-enough.",
          "createdAt": "2022-06-12T18:49:22Z",
          "updatedAt": "2022-06-12T18:49:22Z"
        }
      ]
    },
    {
      "number": 17,
      "id": "I_kwDOHTmVzM5K29dx",
      "title": "Replace remaining occurence of Release with SD-JWT Release",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/17",
      "state": "CLOSED",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We have fixed the term and definitions but a few still appear in the main text. \r\nWe need to fix them as well, hopefully before the first individual draft is uploaded. \r\n\r\nSo, \r\n\r\ns/signatures called releases/signatures called SD-JWT Releases/\r\ns/SD-JWTs and releases/SD-JWTs and SD-JWT Releases/\r\ns/Verifying a Release/Verifying a SD-JWT Release/\r\n",
      "createdAt": "2022-06-01T12:51:31Z",
      "updatedAt": "2022-06-01T14:30:49Z",
      "closedAt": "2022-06-01T14:30:49Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Fixed with PR #18 ",
          "createdAt": "2022-06-01T14:30:49Z",
          "updatedAt": "2022-06-01T14:30:49Z"
        }
      ]
    },
    {
      "number": 20,
      "id": "I_kwDOHTmVzM5K6vqp",
      "title": "Example 1 JWS contains 4 parts; should be 3 at this point",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/20",
      "state": "CLOSED",
      "author": "christianpaquin",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "The [flat SD example 1](https://github.com/oauthstuff/draft-selective-disclosure-jwt/blob/master/main.md#example-1---flat-sd-jwt) contains 4 period-separated parts. I assume the first 3 are the expected JWS ones, and the fourth one is the SVC. This is however only introduced in the [following section](https://github.com/oauthstuff/draft-selective-disclosure-jwt/blob/master/main.md#sd-jwt-and-svc-combined-format), so I think the last part should be deleted from the example.",
      "createdAt": "2022-06-01T20:01:33Z",
      "updatedAt": "2022-06-16T09:22:26Z",
      "closedAt": "2022-06-16T09:22:26Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #46 ",
          "createdAt": "2022-06-16T09:22:26Z",
          "updatedAt": "2022-06-16T09:22:26Z"
        }
      ]
    },
    {
      "number": 21,
      "id": "I_kwDOHTmVzM5K7X7Q",
      "title": "Clarify encoding of SD-JWT-R",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/21",
      "state": "CLOSED",
      "author": "christianpaquin",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "In the [SD-JWT-R section](https://github.com/oauthstuff/draft-selective-disclosure-jwt/blob/master/main.md#sd-jwt-r-format), it is said: \"the result (SD-JWT-R) is encoded as described in RFC7519\"; more guidance should be provided (section number in RFC7519, serialization description, ...).",
      "createdAt": "2022-06-01T21:26:16Z",
      "updatedAt": "2022-06-27T02:55:53Z",
      "closedAt": "2022-06-27T02:55:53Z",
      "comments": []
    },
    {
      "number": 23,
      "id": "I_kwDOHTmVzM5LKJHo",
      "title": "usage of sub_jwk",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/23",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "A comment from @b---c that I completely agree with.\r\n> sub_jwk has a pretty narrow definition and corresponding registration from OIDC https://openid.net/specs/openid-connect-core-1_0.html#SelfIssuedResponse which seems a little different than how sd-jwt is maybe using it. If sub_jwk continues to be used, there might need to be some more explanation and maybe an update to the registry. Maybe.\r\n",
      "createdAt": "2022-06-05T03:27:21Z",
      "updatedAt": "2022-06-29T01:13:36Z",
      "closedAt": "2022-06-29T01:13:36Z",
      "comments": [
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "Also note this text in-00:\r\n> Note: need to define how holder public key is included, right now examples are using sub_jwk I think.\r\nThere is currently no normative text in the spec saying how `sub_jwk` is used.\r\n\r\nI do think that continuing to use the `sub_jwk` claim is fine.",
          "createdAt": "2022-06-07T19:13:01Z",
          "updatedAt": "2022-06-07T19:13:01Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "per chat in Signal, I think it should be a URI (jwk-thumbprint-uri for sub_jwk, but can also be a DID). but as discussed in the chat, depends whether we think this is a layering violation and decide to not define holder binding in the spec... (issue #24 )",
          "createdAt": "2022-06-13T01:21:35Z",
          "updatedAt": "2022-06-13T01:22:02Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I see `sub_jwk` as part of an example here, not normative for the spec. See also my comment on issue #24.",
          "createdAt": "2022-06-13T09:20:30Z",
          "updatedAt": "2022-06-13T09:20:30Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "We do need to normatively say what claim we're using for the contained key.  Using `sub_jwk` seems like the obvious choice.",
          "createdAt": "2022-06-13T12:19:35Z",
          "updatedAt": "2022-06-13T12:19:35Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "specifying `sub_jwk` normatively is somewhat contradictory to your comments on layering violation in Issue #24... I think we should say `sub_jwk` can be used but it is up to the implementors to decide what to use.",
          "createdAt": "2022-06-17T04:57:23Z",
          "updatedAt": "2022-06-17T04:57:23Z"
        }
      ]
    },
    {
      "number": 24,
      "id": "I_kwDOHTmVzM5LKJKc",
      "title": "More work on holder binding",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/24",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "A comment from @b---c\r\n\r\n> I'm a bit uneasy about how much binding there actually is in the holder binding. The whole SD-JWT + signed SD-JWT-R just becomes a bearer token. Oh, I now see https://www.ietf.org/archive/id/draft-fett-oauth-selective-disclosure-jwt-00.html#section-5-3.5.2.1.2.2.1 about the SD-JWT-R being bound to the current transaction. Seems more work is needed in this area. Like the empty sec 6.1 https://www.ietf.org/archive/id/draft-fett-oauth-selective-disclosure-jwt-00.html#name-holder-binding-2 :)",
      "createdAt": "2022-06-05T03:28:43Z",
      "updatedAt": "2022-06-27T02:57:24Z",
      "closedAt": "2022-06-27T02:57:24Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, the holder binding as of now only achieves binding to the public key - the holder is only proving control over the same private key both during issuance and presentation. \r\n\r\nTo prove that the actual user, about whom the user claims are, is in front of a device both during issuance and presentation, more is needed.\r\n- one option would be to use a public key that is able to sign only after biometric matching is performed. But there are some limitations because mobile OS native mechanisms allow to register multiple biometrics for the same device.\r\n- another option would be to include a portrait image as a claim in SD-JWT, holder app would compare it against a live image of the user, but will not release an SD-JWT claim in SD-JWT-R.\r\n\r\nre transaction-binding, in the case of JWT-VCs, VP is bound to the transaction because it includes nonce and audience from the presentation request. How best this can be included in the draft, since req-res would be out of scope of SD-JWT draft?",
          "createdAt": "2022-06-05T03:37:15Z",
          "updatedAt": "2022-06-05T03:37:15Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "my question is should the holder binding being made entirely out of scope of this draft? If not, suggest we make signing of SD-JWT-R mandatory. \r\n\r\nOn one hand, as @christianpaquin has pointed out, when there is holder binding, what is the use-case where an SD-JWT-R is not signed? On another hand, even if SD-JWT-R is not signed (ie no holder binding), as long as the verifier performs verification, selective disclosure would work.",
          "createdAt": "2022-06-13T00:46:31Z",
          "updatedAt": "2022-06-13T00:46:31Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I think we should speak about the concept of holder binding in this spec including pointing to the tools we provide to achieve this:\r\n\r\n- Places where keys can potentially be communicated (in the SD-JWT!)\r\n- The signature of the SD-JWT-R\r\n\r\nWe should **not** define how keys are created or distributed, the syntax of how they are communicated, how they are verified, or what their meaning can be (bound to a device? biometrics? etc.). ",
          "createdAt": "2022-06-13T09:19:21Z",
          "updatedAt": "2022-06-13T09:19:21Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "This is too low level a spec to include anything about key distribution, etc.  That's a job for profiles.\r\n\r\nBy analogy, neither the JWS nor JWT specs said anything about where to get keys (by design!).  Whereas the ID Token definition in Connect, which is a profile, did exactly that.  Similar separation of responsibilities applies here.",
          "createdAt": "2022-06-13T12:23:42Z",
          "updatedAt": "2022-06-13T12:23:42Z"
        }
      ]
    },
    {
      "number": 25,
      "id": "I_kwDOHTmVzM5LKJc-",
      "title": "same key name `_sd` in SD-JWT and SVC",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/25",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "A comment from @b---c\r\n> I'd think the SVC should use a different key name than \"_sd\". I find it confusing that the same key name is used for the selectively disclosable claims and the salt value container. More explicitly naming the container for selectively disclosable claims might be good too.",
      "createdAt": "2022-06-05T03:39:03Z",
      "updatedAt": "2022-06-28T07:25:09Z",
      "closedAt": "2022-06-28T07:25:09Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree we should differentiate those and I suggest we use something like ` disclosable_claims` in SD-JWT and `salt_value_container` in SVC.\r\n\r\nreferencing Issuer #4. In OpenID4VP, we used `vp_token` in the request and `_vp_token` in a corresponding response. I won't be too hang up on the usage of `_` in aggregated/distributed claims.",
          "createdAt": "2022-06-06T18:32:23Z",
          "updatedAt": "2022-06-06T18:32:23Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree that using different claim names should be used when their purpose is different.",
          "createdAt": "2022-06-13T12:49:37Z",
          "updatedAt": "2022-06-13T12:49:37Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "@Sakurann isn't it be closed thanks to https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/42?",
          "createdAt": "2022-06-25T21:20:41Z",
          "updatedAt": "2022-06-25T21:20:41Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Fixed in #42 indeed.",
          "createdAt": "2022-06-28T07:25:09Z",
          "updatedAt": "2022-06-28T07:25:09Z"
        }
      ]
    },
    {
      "number": 26,
      "id": "I_kwDOHTmVzM5LPajM",
      "title": "Clearly how a term `payload` is used.",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/26",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "Comment from @b---c. Kristina to revise the text to make distinction between SD-JWT and SVC clearer\r\n\r\n> The SD-JWT payload (or similar) is referred to in several examples and sometimes seems to mean the actual payload with _sd and hashes of the SD-JWT but other times seems to point to the raw/clear values of the unhidden data would be. Some different wording would be helpful to distinguish things in this regard.  https://www.ietf.org/archive/id/draft-fett-oauth-selective-disclosure-jwt-00.html#section-4.1.2 is one example of this. It seems minor but I found it to be a mental burden when reading. Like, \"wait the payload of the SD-JWT has nothing but regular claims\" went though my mind while reading and that makes me second guess whether I'm understanding the whole document.",
      "createdAt": "2022-06-06T19:56:23Z",
      "updatedAt": "2022-06-16T11:00:35Z",
      "closedAt": "2022-06-16T11:00:35Z",
      "comments": []
    },
    {
      "number": 27,
      "id": "I_kwDOHTmVzM5LPayu",
      "title": "SVC with JSON string values containing escaped JSON ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/27",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "discuss-first"
      ],
      "body": "Comment from @b---c. \r\n\r\n> I understand (I think) why it's this way (per https://www.ietf.org/archive/id/draft-fett-oauth-selective-disclosure-jwt-00.html#section-4.1.1.1-3) but I really dislike the ascetics of the SVC with JSON string values containing escaped JSON https://www.ietf.org/archive/id/draft-fett-oauth-selective-disclosure-jwt-00.html#name-example-1-svc-for-a-flat-sd - at first glance I thought the examples had to be a mistake.",
      "createdAt": "2022-06-06T19:57:09Z",
      "updatedAt": "2022-07-15T16:15:03Z",
      "closedAt": "2022-07-15T16:15:03Z",
      "comments": [
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "I had a similar reaction.",
          "createdAt": "2022-06-07T21:36:34Z",
          "updatedAt": "2022-06-07T21:36:34Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Should it be\r\n```\r\n\"given_name\": {\r\n          \"salt\": \"6Ij7tM-a5iVPGboS5tmvVA\",\r\n          \"value\": \"John\"\r\n     }\r\n```\r\ninstead of?\r\n```\r\n\"given_name\": \"[\\\"6Ij7tM-a5iVPGboS5tmvVA\\\", \\\"John\\\"]\"\r\n```",
          "createdAt": "2022-06-13T01:05:03Z",
          "updatedAt": "2022-06-13T01:05:03Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree that we should not use escaped JSON.",
          "createdAt": "2022-06-13T12:28:37Z",
          "updatedAt": "2022-06-13T12:28:37Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "NONE",
          "body": "the use of escaped JSON  in the current approach avoids canonicalization tho ",
          "createdAt": "2022-06-13T14:13:16Z",
          "updatedAt": "2022-06-13T14:13:16Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "\r\n> Should it be\r\n> \r\n> ```\r\n> \"given_name\": {\r\n>           \"salt\": \"6Ij7tM-a5iVPGboS5tmvVA\",\r\n>           \"value\": \"John\"\r\n>      }\r\n> ```\r\n\r\nThat's what I suggested [here](https://github.com/christianpaquin/selective-disclosure), although I used smaller \"s\" and \"v\" property name trying to keep the payload small.",
          "createdAt": "2022-06-13T14:52:22Z",
          "updatedAt": "2022-06-13T14:52:22Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "> the use of escaped JSON in the current approach avoids canonicalization tho\r\n\r\nWhy do you need c18n here? This data isn't signed by the issuer, right?",
          "createdAt": "2022-06-13T14:53:29Z",
          "updatedAt": "2022-06-13T14:53:29Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "NONE",
          "body": "the input into the hash needs to be normalized ",
          "createdAt": "2022-06-13T16:22:40Z",
          "updatedAt": "2022-06-13T16:22:40Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> > Should it be\r\n> > ```\r\n> > \"given_name\": {\r\n> >           \"salt\": \"6Ij7tM-a5iVPGboS5tmvVA\",\r\n> >           \"value\": \"John\"\r\n> >      }\r\n> > ```\r\n> \r\n> That's what I suggested [here](https://github.com/christianpaquin/selective-disclosure), although I used smaller \"s\" and \"v\" property name trying to keep the payload small.\r\n\r\nThe proposed JSON encoding in the current draft avoids normalization issues, as already mentioned by others. Just sending the value as shown here does not always work, e.g. for values that are an array and therefore have an infinite number of different representations with different hashes. There's a metric ton of other issues, e.g. around numbers that we really don't want to get into. We need to send the representation that will be hashed, not the value.",
          "createdAt": "2022-06-16T14:34:38Z",
          "updatedAt": "2022-06-16T14:34:38Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "See [here](https://datatracker.ietf.org/doc/html/rfc8785#section-3.2) for more examples on why canonicalization is needed:\r\n\r\n>   Assume the following JSON object is parsed:\r\n> \r\n>      {\r\n>        \"numbers\": [333333333.33333329, 1E30, 4.50,\r\n>                    2e-3, 0.000000000000000000000000001],\r\n>        \"string\": \"\\u20ac$\\u000F\\u000aA'\\u0042\\u0022\\u005c\\\\\\\"\\/\",\r\n>        \"literals\": [null, true, false]\r\n>      }\r\n> \r\n>    If the parsed data is subsequently serialized using a serializer\r\n>    compliant with ECMAScript's \"JSON.stringify()\", the result would\r\n>    (with a line wrap added for display purposes only) be rather\r\n>    divergent with respect to the original data:\r\n> \r\n>      {\"numbers\":[333333333.3333333,1e+30,4.5,0.002,1e-27],\"string\":\r\n>      \"\u20ac$\\u000f\\nA'B\\\"\\\\\\\\\\\"/\",\"literals\":[null,true,false]}\r\n> \r\n>    The reason for the difference between the parsed data and its\r\n>    serialized counterpart is due to a wide tolerance on input data (as\r\n>    defined by JSON [[RFC8259](https://datatracker.ietf.org/doc/html/rfc8259)]), while output data (as defined by\r\n>    ECMAScript) has a fixed representation.  As can be seen in the\r\n>    example, numbers are subject to rounding as well.",
          "createdAt": "2022-06-17T07:39:42Z",
          "updatedAt": "2022-06-17T07:39:42Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "mhh ... in the JWT world any issuer can put strange bytes in a value and in \"this perfect world\" this should be escaped as well, we don't have c18n and it seems that everything is fine. I'd fill this gap usign a normative json-schema in the specs (annex?)\r\n\r\n\r\n\r\n",
          "createdAt": "2022-06-25T21:18:45Z",
          "updatedAt": "2022-06-25T21:18:45Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Also [this issue](https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/80) asks for \r\n\r\n1. remove JSON Object in the form escaped strings (no more JSON Objects)\r\n2. using pure JSON Objects with explicit attributes/properties",
          "createdAt": "2022-06-25T21:27:56Z",
          "updatedAt": "2022-06-25T21:28:07Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> mhh ... in the JWT world any issuer can put strange bytes in a value and in \"this perfect world\" this should be escaped as well, we don't have c18n and it seems that everything is fine. I'd fill this gap usign a normative json-schema in the specs (annex?)\r\n\r\nBut in the JWT world, you get the thing that is signed delivered. There's no need to reconstruct it, therefore no need for c18n. \r\n\r\nA JSON schema does not help, because this is about the serialization, not the contents of the JSON.\r\n\r\nHow would you solve the c18n problem described above, e.g., around floating point numbers, with plain JSON objects?",
          "createdAt": "2022-06-27T11:00:21Z",
          "updatedAt": "2022-06-27T11:00:21Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "a JSON Schema can define the content of the values of any attribute. \r\nIt can restrict a value to be an integer or a string with a maxmimum length, it can also define the property of a complex type, like a nested JSON Object\r\n\r\n",
          "createdAt": "2022-06-28T23:25:08Z",
          "updatedAt": "2022-06-28T23:25:08Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "But how can a JSON schema prevent that *the same string* is represented using different bytes? Any validation in JSON schema is defined over the string value, not the bytes representing the string.\r\n\r\nFor arrays, you'll have the same problem.\r\n\r\nThese two will hash to different digests, but always either both be accepted by a JSON schema, or both be rejected:\r\n\r\n```\r\n[\"a\", \"b\"]\r\n[\"a\",\"b\"]\r\n```\r\n",
          "createdAt": "2022-06-30T05:31:29Z",
          "updatedAt": "2022-06-30T05:31:29Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett json schema validates json objects and not serialization of them in different bytes\r\n\r\nonce the signature of a JWT has been validated, a json schema can validate the structure of the artifact and all the values contained in it\r\n\r\nso signature validation and content validation are different things",
          "createdAt": "2022-07-02T22:43:31Z",
          "updatedAt": "2022-07-02T22:43:31Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Exactly, that's why I don't see how a JSON schema would solve the c18n problem.",
          "createdAt": "2022-07-03T07:32:37Z",
          "updatedAt": "2022-07-03T07:32:37Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "It looks like we'll be keeping this awkward-looking but well-working JSON-in-JSON, I guess? @peppelinux Can we close this from your side? (We'll add more explanation as agreed in Issue #51).",
          "createdAt": "2022-07-15T09:10:39Z",
          "updatedAt": "2022-07-15T09:10:39Z"
        }
      ]
    },
    {
      "number": 28,
      "id": "I_kwDOHTmVzM5LPbGs",
      "title": "alg=none in SD-JWT-R",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/28",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "Sakurann"
      ],
      "labels": [
        "discuss-first"
      ],
      "body": "Comment from @b---c. \r\n> https://www.ietf.org/archive/id/draft-fett-oauth-selective-disclosure-jwt-00.html#section-5-3.2.1 -> \"Check that the presentation consists of six .-separated elements; if holder binding is not required, the last element can be empty.\" Seems to imply that alg=none would be used for an unsigned SD-JWT Release while other parts of the doc seem to have just encoded SVC.",
      "createdAt": "2022-06-06T19:58:11Z",
      "updatedAt": "2022-10-24T16:49:55Z",
      "closedAt": "2022-10-24T16:49:55Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "need to discuss if we want to allow unsigned SD-JWT-R - don't think alg=none would be a good idea.\r\n\r\n+ need clarify the six .-separated elements text",
          "createdAt": "2022-06-06T19:58:53Z",
          "updatedAt": "2022-06-06T19:58:53Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Why would alg=none not be a good idea?",
          "createdAt": "2022-06-13T07:20:00Z",
          "updatedAt": "2022-06-13T07:20:00Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with @danielfett that it's context-specific whether \"alg\"=\"none\" is appropriate - just like it's context-specific whether any other signing and/or encryption algorithms are appropriate.\r\n\r\nWe should not be making algorithm choices in the basic SD-JWT spec.  Profiles are free to do that.",
          "createdAt": "2022-06-13T12:31:07Z",
          "updatedAt": "2022-06-13T12:31:07Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett, @selfissued don't we have evidence that alg=none is a dangerous option and leads to security issues as a result of implementation errors?",
          "createdAt": "2022-06-13T14:09:23Z",
          "updatedAt": "2022-06-13T14:09:23Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "NONE",
          "body": "SD-JWT should disallow alg=none.\r\n\r\nAllowing the SVC (or whatever it becomes) to be unsigned is okay but can just be one chunk of base64url encoded JSON. \r\n",
          "createdAt": "2022-06-13T16:47:19Z",
          "updatedAt": "2022-06-13T16:47:19Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> SD-JWT should disallow alg=none. \r\n\r\nyes, we agreed SD-JWT must be signed.\r\n\r\nbut will SD-JWT-R allow alg=none..? or we say that when SD-JWT-R is unsigned it is not a JWT, but a JSON object?",
          "createdAt": "2022-06-16T10:58:58Z",
          "updatedAt": "2022-06-16T10:59:06Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "NONE",
          "body": "I think that when the R part of an SD-JWT-R is unsigned, it's just an encoded JSON object. ",
          "createdAt": "2022-06-16T13:59:27Z",
          "updatedAt": "2022-06-16T13:59:27Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "NONE",
          "body": "I'm not sure it is a good idea to go down the \"use an unsigned assertion instead of a plain object\" to solve that problem again. \r\n\r\nThe requirement at hand is to release a credential with selective disclosure in cases where there is no cryptographic holder binding. That might for example mean, the credential is bound to certain claims of the holder, e.g. name and dob. That is normal practise for a lot of credentials today in the real world (including diplomas) and it is the design used by the UE Covid Certificate. So I don't think it is an edge case. \r\n\r\nI suggest to come up with a technically sound solution that also does not give people a vector to attack our proposal.  A plain JSON object seems to be a reasonable solution. ",
          "createdAt": "2022-06-17T11:43:31Z",
          "updatedAt": "2022-06-17T11:43:31Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "If we ever want SD-JWT-R to be signed, then it should be a JWT.  If we also want it to be able to be unsigned, then the JWT should use alg:none when unsigned.  If we decide that SD-JWT-R should never be signed, then it should always be base64url-encoded JSON.  But again, if it's sometimes signed, that's exactly what alg:none is for, and why we included it the JWS spec.\r\n\r\nalg:none is not an attack vector in this use case, since the claims are protected by the hashes.",
          "createdAt": "2022-06-17T15:16:27Z",
          "updatedAt": "2022-06-17T15:16:27Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "NONE",
          "body": "I think, if we want unsigned releases, the release shall be a JSON object. If the release shall be signed, that same JSON Object could be the payload of a JWS aka a JWT. ",
          "createdAt": "2022-06-17T15:40:03Z",
          "updatedAt": "2022-06-17T15:40:03Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "If I'm understanding you correctly, Torsten then you're advocating having either base64url-encoded JSON (one segment) or a signed JWT with three segments (header, payload, signature).  It's that format inconsistency that alg:none is intended to prevent, since it would also be three segments.\r\n\r\nThat doesn't answer the question of whether there's ever a reason to sign the SD-JWT-R.  For simplicity purposes, I would assert that it should never be signed.  (Then the alg:none discussion would become moot.)",
          "createdAt": "2022-06-17T15:49:48Z",
          "updatedAt": "2022-06-17T15:49:48Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Signing the SD-JWT-R makes sense if we want to verify the holder binding or want to prevent impersonation or replay. These artefacts will be stolen, just like bearer tokens are being stolen and exfiltrated, so requiring signatures in at least some of the cases will stop that attack vector. ",
          "createdAt": "2022-06-17T16:43:31Z",
          "updatedAt": "2022-06-17T16:43:31Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm catching up on this thread, going back to my implementation. I've never used `alg=none` before, and in the bearer token case, I must say it feels weird to append an extra JWS header with `alg=none`, the SVC as payload, and an empty signature (i.e., currently proposed SD-JWT-R: `<iss header>.<SD-JWT-payload>.<iss sig>.<holder header (alg=none)>.<SVC>.<empty string>`) I feel that the spec should only define the SVC format as a JSON object, and say that if the SD-JWT is not key bound, then the SVC may be base64url encoded and attached to the SD-JWT as a 4th part.\r\n\r\nHow is the holder-binding for normal JWT accomplished, in the various industry profiles? Would you typically create a separate JWS using the holder key, and concatenate the issuer's and the holder's JWS? \r\n",
          "createdAt": "2022-06-24T20:32:08Z",
          "updatedAt": "2022-06-24T20:32:08Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "`If verifier is supposed to check the signature, do not accept alg=none`. When to check the signature is up to the Verifier's trust framework/policy, etc.)\r\n\r\nwith alg=none, attacker can remove the signature from a valid SD-JWT and replace it with alg=none, but one can make the same mistake even if JSON is used because attacker can remove both header and the signature.\r\nit adds more confusion because now we need to explain both JSON and JWT.",
          "createdAt": "2022-10-18T15:43:04Z",
          "updatedAt": "2022-10-18T15:43:04Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "See also https://datatracker.ietf.org/doc/html/rfc8725#section-3.2\r\n\r\n\r\n>    That said, if a JWT is cryptographically protected end-to-end by a\r\n>    transport layer, such as TLS using cryptographically current\r\n>    algorithms, there may be no need to apply another layer of\r\n>    cryptographic protections to the JWT.  In such cases, the use of the\r\n>    \"none\" algorithm can be perfectly acceptable.  The \"none\" algorithm\r\n>    should only be used when the JWT is cryptographically protected by\r\n>    other means.  JWTs using \"none\" are often used in application\r\n>    contexts in which the content is optionally signed; then, the URL-\r\n>    safe claims representation and processing can be the same in both the\r\n>    signed and unsigned cases. \r\n> ",
          "createdAt": "2022-10-18T15:54:41Z",
          "updatedAt": "2022-10-18T15:54:41Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #155 ",
          "createdAt": "2022-10-24T15:44:55Z",
          "updatedAt": "2022-10-24T15:44:55Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2022-10-24T16:49:55Z",
          "updatedAt": "2022-10-24T16:49:55Z"
        }
      ]
    },
    {
      "number": 29,
      "id": "I_kwDOHTmVzM5LPbf8",
      "title": "specify hash function",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/29",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "duplicate"
      ],
      "body": "Comment from @b---c\r\n> I don't think the actual hash function used is specified anywhere. That kind of thing is needed for interoperability :) But then questions about algorithm agility come up...\r\n",
      "createdAt": "2022-06-06T19:59:23Z",
      "updatedAt": "2022-06-12T18:51:45Z",
      "closedAt": "2022-06-08T17:36:04Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "hash function table from my original draft is omitted in the current draft - will add.",
          "createdAt": "2022-06-06T19:59:48Z",
          "updatedAt": "2022-06-06T19:59:48Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "See #13 ",
          "createdAt": "2022-06-07T21:35:42Z",
          "updatedAt": "2022-06-07T21:35:42Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "duplication. ",
          "createdAt": "2022-06-08T17:36:04Z",
          "updatedAt": "2022-06-08T17:36:04Z"
        }
      ]
    },
    {
      "number": 30,
      "id": "I_kwDOHTmVzM5LPb0s",
      "title": "encrypting values in SD-JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/30",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "discuss-first"
      ],
      "body": "Comment from @b---c\r\n> Have you considered or would you consider using encrypted values inside the SD-JWT payload and having the release container convey the key for each one to be released? I worry that the hash check https://www.ietf.org/archive/id/draft-fett-oauth-selective-disclosure-jwt-00.html#section-5-3.5.2.2.2.2.1 is the kind of protocol design thing that makes it easy for developer mistakes to arise (not exactly like alg=none but similar) that allow signature bypass. Encrypted values in the SD-JWT payload would make that particular mistake impossible. There are tradeoffs, of course. Size being one but maybe not too different overall. But the hash check feels like a potential \"foot gun\" that could be avoided.",
      "createdAt": "2022-06-06T20:00:26Z",
      "updatedAt": "2022-07-11T16:47:07Z",
      "closedAt": "2022-07-11T16:47:07Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "This is an interesting idea that I would love to discuss. I've heard thoughts to encrypt the whole SD-JWT as JWE, but not individual values. Could you please elaborate on the developer mistakes during hash calculation that you have in mind, @b--c?",
          "createdAt": "2022-06-06T20:03:04Z",
          "updatedAt": "2022-06-06T20:03:04Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "Ciphertexts take as much space as the claim values, but a hash digest has a determined size, which could beneficial when you want to cap the JWT size (e.g., to encode it in a QR code). ",
          "createdAt": "2022-06-07T21:33:02Z",
          "updatedAt": "2022-06-07T21:33:02Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "NONE",
          "body": "The main mistake I have in mind is the verifier/receiver completely forgetting to do the hash calculation and comparison. Because the claim values are in the SVC thing outside the SD-JWT, an attacker can put whatever values there they please and the receiver/verifier will accept them, if the hashes aren't checked. This might seem like an unlikely occurrence but mistakes get made all the time. Even mistakes that might seem silly or like they shouldn't happen. Think back to my JWT talk at OSW :) ",
          "createdAt": "2022-06-08T17:37:28Z",
          "updatedAt": "2022-06-08T17:37:28Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "I wonder if it makes sense to include an encrypted version of the SVC in the SD-JWT so there is only one artefact the engineers need to deal with (see https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/33 ). ",
          "createdAt": "2022-06-09T16:40:31Z",
          "updatedAt": "2022-06-09T16:40:31Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> I wonder if it makes sense to include an encrypted version of the SVC in the SD-JWT  \r\n\r\nWe can\u2019t do that because that way SD-JWT will be meant only for one verifier whose pubKey was used to encrypt SVC, which takes away the multitude property",
          "createdAt": "2022-06-10T04:41:18Z",
          "updatedAt": "2022-06-10T04:41:18Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> verifier/receiver completely forgetting to do the hash calculation and comparison. \r\n\r\nit is one of the most fundamental assumptions this draft makes that verifier will verify the hashes.. and yet I agree with the concern.\r\n\r\nencrypting claims in SD-JWT might impact adoption and simplicity, but the more I think about it the more sense it makes.",
          "createdAt": "2022-06-10T04:49:28Z",
          "updatedAt": "2022-06-10T04:53:16Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": ">  using encrypted values inside the SD-JWT payload and having the release container convey the key for each one to be released\r\n\r\nWould there be any implications of sending private keys in SD-JWT-R?",
          "createdAt": "2022-06-10T04:56:31Z",
          "updatedAt": "2022-06-10T04:56:31Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "> \r\n\r\nI had something a little different in mind. \r\n\r\nI was thinking that the SVC would be encrypted with the holders public key, so only the holder can decrypt it, but it can be included in the SD-JWT as part of the payload and prevent the risk of the SVC and the SD-JWT becoming disassociated. Since only the holder can decrypt it, it is safe to include in the SD-JWT from a privacy perspective (when it is presented to the verifier, the verifier can't read it, nor is there a risk of leakage due to SVC mishandling or exfiltration).  \r\n\r\nThe holder would still generate the SD-JWT-R for presentation as before, but now the SVC is retrieved from within the SD-JWT, decrypted by the holder, and the information that is selectively disclosed is included in the SD-JWT-R. The holder sends both the SD-JWT and SD-JWT-R to the verifier. The verifier can do the verification as before.\r\n\r\nThis way the holder does not need to keep track of both the SVC and SD-JWT, there is only a SD-JWT to manage, with the added advantage that the contents of the SVC structure (now included in the SD-JWT) is privacy protected by virtue of being encrypted, even at rest (or when it ends up in a log file).",
          "createdAt": "2022-06-10T12:05:46Z",
          "updatedAt": "2022-06-10T12:05:46Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not sure I understand this description, @PieterKas (how encrypting the full SVC can support selective disclosure?). The way I'd do encryption-based selective disclosure would be to keep the structure as is, but instead of hashing the claim values, the issuer encrypts them with random symmetric keys and IV (using, say, AES); the SD-JWT contains the ciphertexts (instead of digests), and the SVC contains IV and keys (instead of salt and claim values). I had prototyped that a while back, but as I said above, the optimized size of a digest was more important when the target token size is limited.",
          "createdAt": "2022-06-10T14:03:45Z",
          "updatedAt": "2022-06-10T14:03:45Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "@christianpaquin selective disclosure would work in the same way as the current proposal. I am not proposing an encryption based selective disclosure scheme, but rather that the SVC should be protected so that only the holder can access it.\r\n\r\nIn the current proposal, the SVC is handed to the holder in cleartext as a separate artefact along with the SD-JWT. The holder then calculates the SD-JWT-R and presents two artefacts to the verifier, namely the SD-JWT and the SD-JWT-R. \r\n\r\nFor what I have in mind, the holder would still follow the same steps as in the current proposal, with the extra step of decrypting the SVC information whenever they need to calculate the SD-JWT-R, but without the hassle of having to maintain two separate artefacts.\r\n\r\nWhen encrypting the SVC, it is done using the holder public key. This protects against accidental leakage if the SVC ends up in log files or get exfiltrated somehow (privacy preserving by default). Since the SVC is now private to the holder, it can be included in the SD-JWT as an attribute, so no need to send two artefacts, you can just send one. Whenever the holder wants to perform selective disclosure, they decrypt the SVC information (which is now included in the SD-JWT), calculate the SD-JWT-R, and then present the SD-JWT and SD-JWT-R to the verifier as before. Even though the SD-JWT includes the SVC information, the verifier cannot do anything with it since it is encrypted and only the holder can decrypt it. ",
          "createdAt": "2022-06-10T15:38:23Z",
          "updatedAt": "2022-06-10T15:38:44Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "I see. Ok, I thought you were describing a solution for the first comment of this issue. ",
          "createdAt": "2022-06-10T15:53:21Z",
          "updatedAt": "2022-06-10T15:53:21Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "@christianpaquin ah, yes, I can see how we got off-topic. Let's continue the discussion on encrypting the SVC and reducing the number of artefacts over in https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/33 ",
          "createdAt": "2022-06-10T16:10:29Z",
          "updatedAt": "2022-06-10T16:10:29Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "NONE",
          "body": "> Would there be any implications of sending private keys in SD-JWT-R?\r\n\r\nIt would be symmetric keys. One for each encrypted claim in the SD-JWT. The key is the disclosure mechanism and would be in place of the cleartext of the claim value in the current SVC structure. So I don't think there would be any additional implications than the current approach.  ",
          "createdAt": "2022-06-10T18:22:34Z",
          "updatedAt": "2022-06-10T18:22:34Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "NONE",
          "body": "I'll try and put together an example to hopefully make the idea more concrete and easier to reason about and discuss.  ",
          "createdAt": "2022-06-10T18:27:09Z",
          "updatedAt": "2022-06-10T18:27:09Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "also flagging Issue #37 as relevant\r\n",
          "createdAt": "2022-06-10T21:32:42Z",
          "updatedAt": "2022-06-10T21:32:42Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "NONE",
          "body": "Working with the same *raw* claim values from the [Example 1 - Flat SD-JWT](https://www.ietf.org/archive/id/draft-fett-oauth-selective-disclosure-jwt-00.html#name-example-1-flat-sd-jwt) \r\n```\r\n{\r\n  \"sub\": \"6c5c0a49-b589-431d-bae7-219122a9ec2c\",\r\n  \"given_name\": \"John\",\r\n  \"family_name\": \"Doe\",\r\n  \"email\": \"johndoe@example.com\",\r\n  \"phone_number\": \"+1-202-555-0101\",\r\n  \"address\": {\r\n    \"street_address\": \"123 Main St\",\r\n    \"locality\": \"Anytown\",\r\n    \"region\": \"Anystate\",\r\n    \"country\": \"US\"\r\n  },\r\n  \"birthdate\": \"1940-01-01\"\r\n}\r\n```\r\n\r\nAn SD-JWT payload where the claim values are encrypted (using JWE with dir + A128GCM) would look like this:\r\n\r\n```\r\n{\r\n  \"iss\": \"https://example.com/issuer\",\r\n  \"iat\": 1516239022,\r\n  \"exp\": 1516247022,\r\n  \"_sd\": {\r\n    \"sub\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..cV2hFOGObggjin8z.kUL8jXdYYuD5-BwiW8q9xzoHQvBWvNueI2eRFXEmXuEasIpV.tn8RpYzKqrxiy_NK_F-J0w\",\r\n    \"given_name\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..bTDF3Hk4nAX0BXnJ.2JBl2g.paUW9Ke3dmcnV19Om6MjGg\",\r\n    \"family_name\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..Ql9gAqzexvluo7p9.RK5q.7LFlsjNhFoCX3sBy0qyR7g\",\r\n    \"email\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..X44VMMQQFlzdMsoY.VB10p2ZHBBmJi7Aduy1JvuaelQ.HiPo_W4IqamZT7WU1YqMCA\",\r\n    \"phone_number\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..Sp9V2uFfT3I3PqAX.zdXKGs5--foh8F15qp1u.fuoYChpMugOiAudJHGVwjg\",\r\n    \"address\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..AI4SunVU0jY5wXF3.jWtiXP_B5R-Uzl03lH9KdPxPTMVn6jPZK71VusMUQNvnM5E0ZawVqdrkNKtXFfd20T-DBpJ8fot3gp_7aIj8h8Um8jQfui4aOfKq_Bu5cwJ5_mN-SnOoqg.8fLbHaBcARle6SikZg77-g\",\r\n    \"birthdate\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..fB5hiX7d2KhG5axC.Uhp3K_eTfvscEw.x4hDafN3Sdb7A-YuoO8cMg\"\r\n  }\r\n}\r\n```\r\n\r\nThe SD-JWT signed by the issuer looks like this:  \r\n\r\n`\r\neyJhbGciOiJFUzI1NiJ9.eyJpc3MiOiJodHRwczovL2V4YW1wbGUuY29tL2lzc3VlciIsImlhdCI6MTUxNjIzOTAyMiwiZXhwIjoxNTE2MjQ3MDIyLCJfc2QiOnsic3ViIjoiZXlKaGJHY2lPaUprYVhJaUxDSmxibU1pT2lKQk1USTRSME5OSW4wLi5jVjJoRk9HT2JnZ2ppbjh6LmtVTDhqWGRZWXVENS1Cd2lXOHE5eHpvSFF2Qld2TnVlSTJlUkZYRW1YdUVhc0lwVi50bjhScFl6S3FyeGl5X05LX0YtSjB3IiwiZ2l2ZW5fbmFtZSI6ImV5SmhiR2NpT2lKa2FYSWlMQ0psYm1NaU9pSkJNVEk0UjBOTkluMC4uYlRERjNIazRuQVgwQlhuSi4ySkJsMmcucGFVVzlLZTNkbWNuVjE5T202TWpHZyIsImZhbWlseV9uYW1lIjoiZXlKaGJHY2lPaUprYVhJaUxDSmxibU1pT2lKQk1USTRSME5OSW4wLi5RbDlnQXF6ZXh2bHVvN3A5LlJLNXEuN0xGbHNqTmhGb0NYM3NCeTBxeVI3ZyIsImVtYWlsIjoiZXlKaGJHY2lPaUprYVhJaUxDSmxibU1pT2lKQk1USTRSME5OSW4wLi5YNDRWTU1RUUZsemRNc29ZLlZCMTBwMlpIQkJtSmk3QWR1eTFKdnVhZWxRLkhpUG9fVzRJcWFtWlQ3V1UxWXFNQ0EiLCJwaG9uZV9udW1iZXIiOiJleUpoYkdjaU9pSmthWElpTENKbGJtTWlPaUpCTVRJNFIwTk5JbjAuLlNwOVYydUZmVDNJM1BxQVguemRYS0dzNS0tZm9oOEYxNXFwMXUuZnVvWUNocE11Z09pQXVkSkhHVndqZyIsImFkZHJlc3MiOiJleUpoYkdjaU9pSmthWElpTENKbGJtTWlPaUpCTVRJNFIwTk5JbjAuLkFJNFN1blZVMGpZNXdYRjMuald0aVhQX0I1Ui1VemwwM2xIOUtkUHhQVE1WbjZqUFpLNzFWdXNNVVFOdm5NNUUwWmF3VnFkcmtOS3RYRmZkMjBULURCcEo4Zm90M2dwXzdhSWo4aDhVbThqUWZ1aTRhT2ZLcV9CdTVjd0o1X21OLVNuT29xZy44ZkxiSGFCY0FSbGU2U2lrWmc3Ny1nIiwiYmlydGhkYXRlIjoiZXlKaGJHY2lPaUprYVhJaUxDSmxibU1pT2lKQk1USTRSME5OSW4wLi5mQjVoaVg3ZDJLaEc1YXhDLlVocDNLX2VUZnZzY0V3Lng0aERhZk4zU2RiN0EtWXVvTzhjTWcifX0.LH5_YlMoXceIRb2G5atmS5VlECm3YjldIUPMstq22nxfU31xxEqcW3c4L5RuqGl4YBID6vif5pjYlZ0zV-AEgQ\r\n`\r\n\r\nThe disclosure container (just made the name up and there's probably better names but it takes the place of the SVC) has the claim names and the base64url encoded key that is used to disclosure that claim value in the SD-JWT by decrypting it.   \r\n\r\n```\r\n{\r\n  \"_dc\": {\r\n    \"sub\": \"In-iH0S_HXDvzkoVxfpqvA\",\r\n    \"given_name\": \"YYBWLGytJx2B9QL9y4cfMA\",\r\n    \"family_name\": \"jPAuYX6B-KcGm3QaT9iQ9A\",\r\n    \"email\": \"Bdqe6gP2ojC1lPP_IT59qw\",\r\n    \"phone_number\": \"KxeODoPXouVBlZ6izB966A\",\r\n    \"address\": \"cnouoEo4q5V8gAeNli7Pjw\",\r\n    \"birthdate\": \"44Um0QD0R59RxqyCUWgXOA\"\r\n  }\r\n}\r\n```\r\n\r\nThe disclosure container base64url encoded:\r\n\r\n`\r\neyJfZGMiOnsic3ViIjoiSW4taUgwU19IWER2emtvVnhmcHF2QSIsImdpdmVuX25hbWUiOiJZWUJXTEd5dEp4MkI5UUw5eTRjZk1BIiwiZmFtaWx5X25hbWUiOiJqUEF1WVg2Qi1LY0dtM1FhVDlpUTlBIiwiZW1haWwiOiJCZHFlNmdQMm9qQzFsUFBfSVQ1OXF3IiwicGhvbmVfbnVtYmVyIjoiS3hlT0RvUFhvdVZCbFo2aXpCOTY2QSIsImFkZHJlc3MiOiJjbm91b0VvNHE1VjhnQWVObGk3UGp3IiwiYmlydGhkYXRlIjoiNDRVbTBRRDBSNTlSeHF5Q1VXZ1hPQSJ9fQ\r\n`\r\n\r\nAnd, same as the  approach in -00, the holder could present a subset of the disclosure container thereby doing the selective disclosing.  Like this would only disclose birthdate:\r\n\r\n```\r\n{\r\n  \"_dc\": {\r\n    \"birthdate\": \"44Um0QD0R59RxqyCUWgXOA\"\r\n  }\r\n}\r\n```\r\nEncoded: \r\n`eyJfZGMiOiB7ImJpcnRoZGF0ZSI6ICI0NFVtMFFEMFI1OVJ4cXlDVVdnWE9BIn19`\r\n\r\n\r\nIt's pretty similar in general to the approach in -00 but the disclosure container only has stuff needed to reveal/release the claim values rather than the values themselves and a detached integrity check as in the SVC. Which eliminates the possibility of relying on the claim values from the SVC while forgetting to to do the integrity check. And yes, as you point out, that check is fundamental. But mistakes like that do happen and have happened. And, so to the extent possible/reasonable, it's good if the protocol design can eliminate or reduce the possibility of making common mistakes.\r\n\r\nWith this proposed approach, the SD-JWT is bigger. And the disclosure container will be smaller than the SVC.\r\n\r\nIt could be something different but I used plain JWE for the encrypted values. Which has the benefit of reusing the JWE spec and concepts. And should mean that JWE libraries already have the code to process the stuff. So from that perspective, I don't actually think it would impact adoption and simplicity. In some ways, it's simpler. And algorithm agility comes \"for free\" from the JWE layer. \r\n\r\nJWE isn't the most space efficient. But it's not terrible. And there are some potential optimizations that could be looked at too, if desired. The likely redundant JWE header looks like a good candidate. But I digress for now... \r\n\r\nSome info about the size of the underlying data does maybe leak here (b/c the cipher text size will vary with the size of the plain text) vs. the hash. But I'm having a hard time seeing how that could be meaningfully consequential in this context. \r\n\r\n\r\n\r\n",
          "createdAt": "2022-06-10T23:39:46Z",
          "updatedAt": "2022-06-10T23:39:46Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks a lot, Brian. I do see the benefits much clearer now and the use of symmetric keys makes sense.\r\n\r\nto sort out different proposals, this proposal would be orthogonal to including an encrypted SVC entirely inside an SD-JWT to prevent dissociation of the data structures.",
          "createdAt": "2022-06-13T07:37:22Z",
          "updatedAt": "2022-06-13T07:37:22Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I do see Brian's point (very well). This _is_ the kind of mistakes that will happen.\r\n\r\nIn my (limited) experience, the implementations for JWS are more mature than those for JWE and available in more libraries. Therefore, I think avoiding encryption if we can would make the spec easier to implement.\r\n\r\nProviding clearer implementation advice and negative test cases (\"must not accept...\") could be a way to reduce developer mistakes without the additional complexity of encryption.",
          "createdAt": "2022-06-13T09:13:10Z",
          "updatedAt": "2022-06-13T09:13:10Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "In summary (to make sure I follow), each field in the JWD-SD is encrypted with a unique symmetric key, the SVC is replaced by a construct that contains value/symmetric key pairings, and for disclosure the holder sends the JWD-SD along with the value/symmetric key pairing for the values that should be disclosed.\r\n\r\n@bc-pi in this proposal, do you foresee a need to protect the disclosure keys? I always feel uncomfortable when symmetric keys are being sent in the clear. If we added confidentiality protection for the symmetric keys it can be done using established key management techniques. I imagine an approach where the structure with the symmetric keys are encrypted with the holder public key. When the holder wants to perform disclosure, the holder decrypt the structure, extract the key it wants to share, create the disclosure document and then encrypts it with the verifiers public key. The verifier would then decrypt the disclosure structure, extract the symmetric keys, and decrypt the fields in the JD-SWT.\r\n\r\nThe benefit of protecting the encryption keys is that it mitigates against accidental disclosure if the structure with the symmetric keys gets logged/exfiltrated, and the holder can store it as received from the issuer (protecting data at rest).\r\n\r\nThe downside is extra key management, but perhaps a worthwhile option given that we are building a privacy preserving capability.",
          "createdAt": "2022-06-13T10:05:47Z",
          "updatedAt": "2022-06-13T10:05:47Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I am against requiring encryption as part of the basic SD-JWT data structure.  We should be emulating the simplicity of mDL's use of salted hashes and stop there.\r\n\r\nYes, recipients could forget to check the hashes, just like recipients could forget to check JWS signatures.  Addressing that is the domain of test suites and certification suites; trying to prevent negligent implementations should not result in making the data structures more complicated than they need to be.",
          "createdAt": "2022-06-13T12:36:39Z",
          "updatedAt": "2022-06-13T12:36:39Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "NONE",
          "body": "What I'm proposing is in no way more complicated. It is actually simpler in many respects. And avoids the awkward JSON in JSON a la #27.\r\n\r\nImplementation advice, warnings, test suites, certification suites, etc., have shown to be woefully insufficient and don't even reach the those that need it the most. \r\n\r\nNegligence would be continuing to ignore these kinds of very real problems resulting from fundamental spec choices while deferring to ineffective mitigations while blaming developers. \r\n\r\n",
          "createdAt": "2022-06-13T14:25:46Z",
          "updatedAt": "2022-06-13T14:25:46Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "NONE",
          "body": "@PieterKas the current SVC has the value of claims fully in the clear. All of what you say applies (or doesn't) just the same to both approaches. But isn't an inherent or extra complexity of making things harder to mess up. ",
          "createdAt": "2022-06-13T14:32:17Z",
          "updatedAt": "2022-06-13T14:32:17Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "@bc-pi agreed, that is the current state. \r\n\r\nI guess I am feeling uneasy at having these SVC type constructs in the clear as we know they tend to leak. For a privacy preserving capability, it feels prudent to take the extra step of protecting the confidentiality of the SVC. If we choose to leave it in the clear, we need to provide clear guidance on the risks, although, I am with your sentiment that more documentation has proven inadequate to prevent some unfortunate errors.",
          "createdAt": "2022-06-13T15:01:59Z",
          "updatedAt": "2022-06-13T15:01:59Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "In the use case I was exploring, packaging SD-JWT as QR code, some limited clients (or simply printing the QR code on paper) can present the QR code as is, with all the claims and SVC in clear allowing the verifier to read the claims. A compliant client can further limit the disclosure by removing the SVC. This use case requires the SVC in clear.",
          "createdAt": "2022-06-13T15:21:35Z",
          "updatedAt": "2022-06-13T15:21:35Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "@christianpaquin can you elaborate a bit more? The use case you describe (passing the SVC in clear to the verifier) sounds like it can be achieved without selective disclosure since giving the SVC in clear to the verifier does not seem to introduce any selectivity in the disclosure. It feels like you can achieve the same goal by just including the claims in cleartext in in a JWT.",
          "createdAt": "2022-06-13T19:06:27Z",
          "updatedAt": "2022-06-13T19:06:27Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "> @christianpaquin can you elaborate a bit more? \r\n\r\nSure. Issuer issues the signed claims (JWS) to the user, along with the SVC. Legacy clients / paper-based encodings (e.g., QR codes) can present the entirety of the claims by presenting JWS+SVC. Conforming clients can disclose less by editing the SVC and removing the data associated with the claims to hide. See the [Claim QR](https://github.com/microsoft/claimqr) project for a prototype of this approach.\r\n",
          "createdAt": "2022-06-13T22:47:19Z",
          "updatedAt": "2022-06-13T22:47:19Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "right, when SD-JWT-R is not signed, editing SVC turns it into SD-JWT-R",
          "createdAt": "2022-06-13T23:15:11Z",
          "updatedAt": "2022-06-13T23:15:11Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @christianpaquin  and @Sakurann. \r\n\r\n1. For the paper based encodings, how would the holder edit the SVC? \r\n2. For paper based encodings, the verifier still perfroms the verification electronically (e.g. scans the QR code(s)), verify signatures on the SD-JWT etc?",
          "createdAt": "2022-06-14T12:01:56Z",
          "updatedAt": "2022-06-14T12:01:56Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "1. A user wouldn't be able to edit a paper-based credential, of course. Many large scenarios would have a diverse set of users, ranging from those with smart phones, to those with more limited features phones, to those without any device. For equity reasons, all these users would need to be able to participate in the system. (This was the case, e.g., for the covid certificates; it was a hard requirement for the QR codes to be presentable in paper form.) Now, in this spectrum of user capabilities, an issuer can issue the same QR code encoding a SD-JWT+SVC to everyone. Paper printouts would disclose everything; limited feature phones could display the QR code, perhaps even edit down the SVC to hide some claims (since it only involves JSON editing and no crypto operations); full feature smart phones would have all the power of selective disclosure. A SD-JWT+SVC issued on paper can later be imported to a smart phone allowing selective disclosure down the line (imagine a kiosk where you get a certification of some sort for which they give you a print out that you can import at home on a device of your choice).\r\n2. Yes. The QR code serves only as transport here; which works well to bridge the electronic and physical world.",
          "createdAt": "2022-06-14T14:12:47Z",
          "updatedAt": "2022-06-14T14:12:47Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I plan to give this a try and implement the encryption-based scheme in a separate branch.\r\n\r\nI do have a concern with the cipher text size revealing the plain text length (Brian already mentioned this): With AES/GCM, the length of the cipher text depends directly on the plain text.\r\n\r\nThis can be seen in the example above (showing just the cipher text part of the JWE):\r\n\r\n- given_name: `2JBl2g` (John)\r\n- family_name: `RK5q` (Doe)\r\n\r\nThis is very revealing, especially for fields with limited value ranges. You can immediately tell which of these cipher texts encodes \"true\" and which encodes \"false\":\r\n\r\n- `KVN23w`\r\n- `IXZpXl8`\r\n\r\nSame for `male`/`female`:\r\n\r\n- `cqFN5Elz`\r\n- `1xtI9iijGVc`\r\n\r\nWorks for numbers as well, e.g., `9` and `10`:\r\n\r\n- `QA`\r\n- `8t8`\r\n\r\nThis is clearly not acceptable.\r\n\r\nPotential solutions would be to manually pad the plain text before putting it through the encryption algorithm (by adding white space) or to use block-based modes, like AES 128 CBC, that at least hide some of the length information:\r\n\r\nWorks for true/false, empty value vs. short value, `male`/`female`:\r\n\r\n- `-Apn73e0Js7fFhvPn-GbTQ`\r\n- `nITWmxBvFOUnUJT6FyKv0g`\r\n\r\nDoes not work for information that crosses block boundaries, e.g., the country names \"Germany\" vs. \"United States of America\":\r\n\r\n- `s-KTQ4woDrDuYsZcW8Eifg`\r\n- `tgIUUpSn91qbMZQwnN5WEry0tuaEUVjI_OMT170QH-4`\r\n\r\nI'm not sure if this is sufficient. The side channel opened through the length is particularly large here as we encode single values. On the contrary, when a whole token is encrypted, the length is much less revealing, as it is not clear what claim value causes the length variations.\r\n\r\nBoth solutions (adding white space and only allowing block-based modes) also increase the size of the SD-JWT.",
          "createdAt": "2022-06-15T13:07:35Z",
          "updatedAt": "2022-06-15T13:07:35Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "NONE",
          "body": "I did mention ciphertext size revealing info about plain text length but with, \"having a hard time seeing how that could be meaningfully consequential\" clearly didn't think too hard about some of the cases that have real implications. And was forgetting/ignoring that GCM wasn't a bock mode. ",
          "createdAt": "2022-06-15T14:27:25Z",
          "updatedAt": "2022-06-15T14:27:25Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "The increased size is a lesser concern than the information leakage (the point is selective disclosure afterall).\r\n\r\nI always worry a bit more about stream ciphers in any event. For GCM mode, the developer now has to remember not to use the same IV twice, and any padding they engage in my lead to keystream data being revealed if they don't use a new IV for every field. So prohibiting to a block cipher may be safer, however, the information leakage is still there even with block ciphers (it is less pronounced though). \r\n\r\nAsking the developer to apply padding so that all blocks are of the same length is also going to cause implementation errors. The question is it would be as severe as when they just don't calculate and compare the hash values?",
          "createdAt": "2022-06-16T09:16:16Z",
          "updatedAt": "2022-06-16T09:16:16Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "> 1. A user wouldn't be able to edit a paper-based credential, of course. Many large scenarios would have a diverse set of users, ranging from those with smart phones, to those with more limited features phones, to those without any device. For equity reasons, all these users would need to be able to participate in the system. (This was the case, e.g., for the covid certificates; it was a hard requirement for the QR codes to be presentable in paper form.) Now, in this spectrum of user capabilities, an issuer can issue the same QR code encoding a SD-JWT+SVC to everyone. Paper printouts would disclose everything; limited feature phones could display the QR code, perhaps even edit down the SVC to hide some claims (since it only involves JSON editing and no crypto operations); full feature smart phones would have all the power of selective disclosure. A SD-JWT+SVC issued on paper can later be imported to a smart phone allowing selective disclosure down the line (imagine a kiosk where you get a certification of some sort for which they give you a print out that you can import at home on a device of your choice).\r\n> 2. Yes. The QR code serves only as transport here; which works well to bridge the electronic and physical world.\r\n\r\nI think if the holder does not need to edit the paper representation of the SCV, and the verifier is performing verification electronically, it does not matter whether the SVC contains cleartext (per original proposal) or ciphertext values (the alternate proposal from Brian). The holder would still present both the SD-JWT and the SVC (or equivalent) and the verifier would scan both and then do comparison electronically. ",
          "createdAt": "2022-06-16T09:25:12Z",
          "updatedAt": "2022-06-16T09:25:12Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "\r\n> I think if the holder does not need to edit the paper representation of the SCV, and the verifier is performing verification electronically, it does not matter whether the SVC contains cleartext (per original proposal) or ciphertext values (the alternate proposal from Brian). \r\n\r\nCorrect, hash-based or encryption-based selective disclosure is orthogonal to this design. There was another encryption being discussed: the encryption of SVC in order to \"unlock\" the disclosure by the client. This can be an option for some use cases, but shouldn't be mandated to accommodate this bearer token one.\r\n\r\n> The holder would still present both the SD-JWT and the SVC (or equivalent) and the verifier would scan both and then do comparison electronically.\r\n\r\nCorrect. They would be combined (dot-concatenated) in one string, encoded in one QR image (in this example), so there is only one \"scan\" for the verifier. ",
          "createdAt": "2022-06-16T14:44:21Z",
          "updatedAt": "2022-06-16T14:44:21Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "> Asking the developer to apply padding so that all blocks are of the same length is also going to cause implementation errors. The question is it would be as severe as when they just don't calculate and compare the hash values?\r\n\r\nI agree that the claims leakage mitigations are arguably at least as complex as the requirement to correctly check the digests. The outcome is however different: privacy leak vs. security bypass. Anyone involved with mDL design? It'd be interesting to see if they considered an encryption-based disclosure, and if so, why they didn't use that.\r\n\r\n(There is another encryption size issue that I raised elsewhere, which bloats the resulting artifacts, which is problematic for some use cases (e.g., QR encoding)).\r\n\r\n",
          "createdAt": "2022-06-16T14:52:35Z",
          "updatedAt": "2022-06-16T14:52:35Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Good callout that the impact of a mistake is different. ",
          "createdAt": "2022-06-17T10:24:36Z",
          "updatedAt": "2022-06-17T10:24:36Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I created a proof of concept: https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/62\r\n\r\nIt uses a block cipher without any further leakage protections.\r\n\r\nWhat I learned:\r\n\r\n- The issuer has to make decisions on the encryption algorithms (enc and alg). The advantages and disadvantages of the various options are not obvious at all. The issuer has to match key sizes to those required by the algorithm chosen.\r\n- Creating the SD-JWT was straightforward (well supported by the library), but took a couple more lines of codes than the hash solution.\r\n- The verification is easier when the encryption is used - just decrypt the values.\r\n- The SD-JWT becomes much larger, the SVC and SD-JWT-R are smaller.",
          "createdAt": "2022-06-17T13:50:56Z",
          "updatedAt": "2022-06-17T13:59:28Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "FWIW, I'll briefly describe another solution here that I came up with during our call on Friday - and say why it doesn't work.\r\n\r\nThe idea I had was that the issuer creates an encryption key for each claim value, encrypts the claim value, and provides the *key* - not the ciphertext - in the SD-JWT.\r\nThe SVC would contain the ciphertexts instead of the keys, and the holder would release a subset of the ciphertexts to the verifier.\r\nThe verifier would use the keys signed by the issuer plus the ciphertexts to get the claim values. Implicitly, since authenticated encryption is used, the verifier would validate that the claim values have not been modified.\r\n\r\nThis is a nice construction as it combines the advantages of the hash and encryption approaches: The verifier cannot skip the check of the signature and the SD-JWT remains fairly small. Also, we don't unnecessarily share encrypted values.\r\n\r\nNow here's the problem: \r\n\r\n- If we use symmetric encryption, the holder would be able to create new ciphertexts for the signed keys. We can't allow that, so we must use **asymmetric encryption**.\r\n- This means that the issuer creates a key pair (public/private) for each claim value. If the issuer now uses (as usual) the public key to encrypt the claim values, he would need to **sign/share the private key in the SD-JWT.** That's bad, not only because private keys are not meant to be shared, but because you can often derive the public key from the private key and the holder could again create new ciphertexts. [Somebody (@christianpaquin @PieterKas) correct me if I'm wrong, but as far as I know \"you can't derive the public key from the private key\" is not a guarantee any encryption algorithm available in JOSE provides.]\r\n- Therefore, the issuer has to use the *private* key to encrypt and then sign/share the *public* key. This is essentially what happens in signatures, but the problem is, that JWE does not foresee this. This means that it is probably not easy to implement or error-prone when attempted.\r\n\r\nAlso, performance considerations.",
          "createdAt": "2022-06-20T12:48:37Z",
          "updatedAt": "2022-06-20T12:48:37Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "NONE",
          "body": "While trying to wrap my head around @danielfett's idea from the call last Friday I was inspired by the swapping of the placement of keys and ciphertexts and  stumbled on an approach that I think maybe does combine the advantages of the hash and encryption approaches. The idea is to use the authentication tag of a symmetric JWE similar to the hash value in the salted hash approach. Then include the rest of the JWE in the release container for each claim. For each released claim, the verifier appends the tag on the back of the rest of the JWE and decrypts to get the value. Because it's authenticated encryption, the decryption includes an integrity check. Treating the authenticated decryption as a single operation (which isn't strictly true but you'd have to go out of you way to separate them and mess it up) means the verifier cannot skip the tag/hash check while accessing the claim values. And the tags are under the signature of the SD-JWT. A bit more detail with examples follows.\r\n\r\nA symmetric encryption key is put in the `sd_tags` container of SD-JWT. Each claim value is JWE (symmetric AEAD) encrypted with the key and the authentication tag (the last part) is stripped off and placed as the value of the claim in the `sd_tags` container.  Conceptually in JSON:\r\n\r\n```\r\n{\r\n  \"sd_tags\": {\r\n    \"_key\": \"<base64url encoded symmetric encryption key>\",\r\n    \"sub\": \"<JWE authentication tag from encrypted sub>\",\r\n    \"email\": \"<JWE authentication tag from encrypted email>\",\r\n  }\r\n```\r\n\r\nThe releases container has each claim name and the associated JWE without the tag. Conceptually in JSON:\r\n\r\n```\r\n{\r\n  \"sd_release\": {\r\n    \"sub\": \"<JWE from encrypted sub without authentication tag>\",\r\n    \"email\": \"<JWE from encrypted email without authentication tag>\",\r\n  }\r\n}\r\n```\r\n\r\nWorking with the same raw claim values from the [Example 1 - Flat SD-JWT](https://www.ietf.org/archive/id/draft-fett-oauth-selective-disclosure-jwt-00.html#name-example-1-flat-sd-jwt) - an SD-JWT payload where the claim values are the JWE authentication tag would look like this:\r\n\r\n```\r\n{\r\n  \"iss\": \"https://example.com/issuer\",\r\n  \"iat\": 1516239022,\r\n  \"exp\": 1516247022,\r\n  \"sd_tags\": {\r\n    \"_key\": \"F4c66aQI4Qwf1Tcipct9sw\",\r\n    \"sub\": \"xS2kLH0Fc9wJbg5BvsaZsA\",\r\n    \"given_name\": \"RqzDHzn5ERa9hC47BzGPEQ\",\r\n    \"family_name\": \"g9lo2uNcWdmepNvtST4WuQ\",\r\n    \"email\": \"RHP8ky9Od5xUsQOSe_C-Mg\",\r\n    \"phone_number\": \"aNuk8EX_a3QN3c4Q2-oH2w\",\r\n    \"address\": \"rHUTycKpJ6Sz3qlYFhqe2w\",\r\n    \"birthdate\": \"rrXyxgQAOVCa367VVi3b1w\"\r\n  }\r\n}\r\n```\r\n\r\nThe SD-JWT signed by the issuer looks like this:\r\n\r\n`eyJhbGciOiJFUzI1NiJ9.eyJpc3MiOiJodHRwczovL2V4YW1wbGUuY29tL2lzc3VlciIsImlhdCI6MTUxNjIzOTAyMiwiZXhwIjoxNTE2MjQ3MDIyLCJzZF90YWdzIjp7Il9rZXkiOiJGNGM2NmFRSTRRd2YxVGNpcGN0OXN3Iiwic3ViIjoieFMya0xIMEZjOXdKYmc1QnZzYVpzQSIsImdpdmVuX25hbWUiOiJScXpESHpuNUVSYTloQzQ3QnpHUEVRIiwiZmFtaWx5X25hbWUiOiJnOWxvMnVOY1dkbWVwTnZ0U1Q0V3VRIiwiZW1haWwiOiJSSFA4a3k5T2Q1eFVzUU9TZV9DLU1nIiwicGhvbmVfbnVtYmVyIjoiYU51azhFWF9hM1FOM2M0UTItb0gydyIsImFkZHJlc3MiOiJySFVUeWNLcEo2U3ozcWxZRmhxZTJ3IiwiYmlydGhkYXRlIjoicnJYeXhnUUFPVkNhMzY3VlZpM2IxdyJ9fQ.Mwbd8K6nrQ8clBbe-xFYGi3KofRO8cordH5pL0QPu41MPE2Ol75fzRFc6eGNLJobM3SmSJU9mW8T-PeDxMw70A\r\n`\r\n\r\nThe release container has the claim names and encrypted values omitting the tag (the first four parts of the JWE): \r\n\r\n```\r\n{\r\n  \"sd_release\": {\r\n    \"sub\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..2CPSJxfHXsIvdiXr.8SnXSG7i1G0RUBzCjkDpjmNCrZMASD44TG-sQgvr2G_xfB6L\",\r\n    \"given_name\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..Ux6LFw7GXlt14Pcn.ULtuGg\",\r\n    \"family_name\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..NfEty8WYlTuYLjqh.oLij\",\r\n    \"email\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..A1l60VKGahQKMoAz.S-MxvTsdVwcr0hov4c0i7Cd0EA\",\r\n    \"phone_number\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..Ye0-LAyu4t5eUuEr.NOQETMI6jkZasNHsSVTt\",\r\n    \"address\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..JV19LMhFt8pqnd_g.-apgQvHiTqmV2t9yFAMYDmIZOmALWM2ekcxkeQW9T5LfOOTW3tmYgcUtmd0mu2vA_jAr5lp6GVVFaxfWVceDUHooJnvFK96Mt3Kti-aombm7pTYTUCVhDw\",\r\n    \"birthdate\": \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4R0NNIn0..FQhkucvj2FcVWIwd.ll5yTiX8yN-7ig\"\r\n  }\r\n}\r\n```\r\nThe release container base64url encoded:\r\n\r\n`eyJzZF9yZWxlYXNlIjp7InN1YiI6ImV5SmhiR2NpT2lKa2FYSWlMQ0psYm1NaU9pSkJNVEk0UjBOTkluMC4uMkNQU0p4ZkhYc0l2ZGlYci44U25YU0c3aTFHMFJVQnpDamtEcGptTkNyWk1BU0Q0NFRHLXNRZ3ZyMkdfeGZCNkwiLCJnaXZlbl9uYW1lIjoiZXlKaGJHY2lPaUprYVhJaUxDSmxibU1pT2lKQk1USTRSME5OSW4wLi5VeDZMRnc3R1hsdDE0UGNuLlVMdHVHZyIsImZhbWlseV9uYW1lIjoiZXlKaGJHY2lPaUprYVhJaUxDSmxibU1pT2lKQk1USTRSME5OSW4wLi5OZkV0eThXWWxUdVlManFoLm9MaWoiLCJlbWFpbCI6ImV5SmhiR2NpT2lKa2FYSWlMQ0psYm1NaU9pSkJNVEk0UjBOTkluMC4uQTFsNjBWS0dhaFFLTW9Bei5TLU14dlRzZFZ3Y3IwaG92NGMwaTdDZDBFQSIsInBob25lX251bWJlciI6ImV5SmhiR2NpT2lKa2FYSWlMQ0psYm1NaU9pSkJNVEk0UjBOTkluMC4uWWUwLUxBeXU0dDVlVXVFci5OT1FFVE1JNmprWmFzTkhzU1ZUdCIsImFkZHJlc3MiOiJleUpoYkdjaU9pSmthWElpTENKbGJtTWlPaUpCTVRJNFIwTk5JbjAuLkpWMTlMTWhGdDhwcW5kX2cuLWFwZ1F2SGlUcW1WMnQ5eUZBTVlEbUlaT21BTFdNMmVrY3hrZVFXOVQ1TGZPT1RXM3RtWWdjVXRtZDBtdTJ2QV9qQXI1bHA2R1ZWRmF4ZldWY2VEVUhvb0pudkZLOTZNdDNLdGktYW9tYm03cFRZVFVDVmhEdyIsImJpcnRoZGF0ZSI6ImV5SmhiR2NpT2lKa2FYSWlMQ0psYm1NaU9pSkJNVEk0UjBOTkluMC4uRlFoa3VjdmoyRmNWV0l3ZC5sbDV5VGlYOHlOLTdpZyJ9fQ\r\n`\r\n\r\n\r\n",
          "createdAt": "2022-06-20T14:47:23Z",
          "updatedAt": "2022-06-27T21:49:36Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I like this idea! Best of both worlds, I guess. \r\n\r\nAlthough fiddling with the JWE may be a bit tricky to communicate and get right.\r\n\r\nI would suggest to put the key into a separate \"sd_key\" claim. I heard the underscore does not imply magic abilities! :-D",
          "createdAt": "2022-06-20T15:00:48Z",
          "updatedAt": "2022-06-20T15:00:48Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Authentication tags in SD-JWT\nEncrypted values without tags in SVC and SD-JWT-R.\n\nthe benefit of new approach compared to the original one it that it solved the problem that the length of the encrypted values is different by using AEAD instead of padding, correct?\n\nSent from my iPhone\n________________________________\nFrom: Daniel Fett ***@***.***>\nSent: Monday, June 20, 2022 8:00:58 AM\nTo: oauthstuff/draft-selective-disclosure-jwt ***@***.***>\nCc: Kristina Yasuda ***@***.***>; Mention ***@***.***>\nSubject: Re: [oauthstuff/draft-selective-disclosure-jwt] encrypting values in SD-JWT (Issue #30)\n\n\nI like this idea! Best of both worlds, I guess.\n\nAlthough fiddling with the JWE may be a bit tricky to communicate and get right.\n\nI would suggest to put the key into a separate \"sd_key\" claim. I heard the underscore does not imply magic abilities! :-D\n\n\u2014\nReply to this email directly, view it on GitHub<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Foauthstuff%2Fdraft-selective-disclosure-jwt%2Fissues%2F30%23issuecomment-1160555581&data=05%7C01%7Ckristina.yasuda%40microsoft.com%7C92852efc24bc44c5cb5c08da52cdaf8d%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637913340616380231%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=PymDTslFXwXTiTBEE90PK6br458atyahAfUXdH5Sdeg%3D&reserved=0>, or unsubscribe<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAMTNZU3IJ6F2UH27I33NM7LVQCBSVANCNFSM5YAQ5GCQ&data=05%7C01%7Ckristina.yasuda%40microsoft.com%7C92852efc24bc44c5cb5c08da52cdaf8d%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637913340616380231%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=rCofN%2BUQgYLH5fAt%2FW%2F04xbA7PrdJoKBUoNWf3OcsQs%3D&reserved=0>.\nYou are receiving this because you were mentioned.Message ID: ***@***.***>\n",
          "createdAt": "2022-06-20T15:31:47Z",
          "updatedAt": "2022-06-20T15:31:47Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "NONE",
          "body": "Agree that the JWE fiddling may be a bit tricky to communicate. But the actual fiddling operations are a string split for the issuer and a string concatenation for the verifier. So not particularly difficult. \r\n\r\nI should have anticipated the questioning of my magic abilities! :-D A separate \"sd_key\" claim would probably be better. \r\n",
          "createdAt": "2022-06-20T15:32:30Z",
          "updatedAt": "2022-06-20T15:32:30Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "NONE",
          "body": "Kinda, yeah. Keeping the ciphertext out of the SD-JWT removes the potential info leakage of the size of the ciphertext revealing info about the plaintext.  ",
          "createdAt": "2022-06-20T15:43:32Z",
          "updatedAt": "2022-06-20T15:43:32Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "> FWIW, I'll briefly describe another solution here that I came up with during our call on Friday - and say why it doesn't work.\r\n> \r\n> The idea I had was that the issuer creates an encryption key for each claim value, encrypts the claim value, and provides the _key_ - not the ciphertext - in the SD-JWT. The SVC would contain the ciphertexts instead of the keys, and the holder would release a subset of the ciphertexts to the verifier. The verifier would use the keys signed by the issuer plus the ciphertexts to get the claim values. Implicitly, since authenticated encryption is used, the verifier would validate that the claim values have not been modified.\r\n> \r\n> This is a nice construction as it combines the advantages of the hash and encryption approaches: The verifier cannot skip the check of the signature and the SD-JWT remains fairly small. Also, we don't unnecessarily share encrypted values.\r\n> \r\n> Now here's the problem:\r\n> \r\n> * If we use symmetric encryption, the holder would be able to create new ciphertexts for the signed keys. We can't allow that, so we must use **asymmetric encryption**.\r\n> * This means that the issuer creates a key pair (public/private) for each claim value. If the issuer now uses (as usual) the public key to encrypt the claim values, he would need to **sign/share the private key in the SD-JWT.** That's bad, not only because private keys are not meant to be shared, but because you can often derive the public key from the private key and the holder could again create new ciphertexts. [Somebody (@christianpaquin @PieterKas) correct me if I'm wrong, but as far as I know \"you can't derive the public key from the private key\" is not a guarantee any encryption algorithm available in JOSE provides.]\r\n> * Therefore, the issuer has to use the _private_ key to encrypt and then sign/share the _public_ key. This is essentially what happens in signatures, but the problem is, that JWE does not foresee this. This means that it is probably not easy to implement or error-prone when attempted.\r\n> \r\n> Also, performance considerations.\r\n\r\n@danielfett I was thinking about the practical implications of the proposal  after our call and agree that in practice there will be opportunities for implementation errors. \r\n\r\nIn theory, the mathematical properties of public and private key pairs are equivalent. However, most implementations optimise for speed by picking fixed values and parameters (in the case of RSA, the public exponent is often short and fixed as 65537). It often also includes other parameters that can be used to compute intermediate steps, which in turn may be handy when optimising the implementation, but ends up helping the cryptanalyst. It could be overcome, but would make use of standard crypto libraries difficult, leading to the point of custom crypto library implementations, which is worse in my view than the ill we are trying to cure (comparing hashes). So agreed that this particular approach may not get us there, but @bc-pi iteration looks interesting ;)",
          "createdAt": "2022-06-20T19:22:04Z",
          "updatedAt": "2022-06-20T19:23:34Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "@bc-pi for your scheme, I think we are restricting algorithms to only those that support authenticated encryption. I think that is fine as there is a good supply of chaining modes that support it. ",
          "createdAt": "2022-06-20T19:36:30Z",
          "updatedAt": "2022-06-20T19:36:30Z"
        },
        {
          "author": "fabian-hk",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@bc-pi I have implemented your encryption approach in Kotlin: [https://github.com/IDunion/SD-JWT-Kotlin/tree/encryption-proposal](https://github.com/IDunion/SD-JWT-Kotlin/tree/encryption-proposal)\r\n\r\nIt was quite easy to implement. The only thing I was struggling a little bit with was the JSON encoding inside the JWE. But this is maybe related to the JSON library I am using. The size of the SD-JWT is roughly the same but the SVC (or however we call the other container) is obviously a little bit bigger but not extremely large. If we want to do an exact comparison of the sizes I am happy to contribute.\r\n\r\nMaybe it would be good to include the JWE encryption algorithm as a claim in the SD-JWT (same as the hash algorithm). I think it would make the implementation of different algorithms easier.",
          "createdAt": "2022-06-24T14:57:41Z",
          "updatedAt": "2022-06-24T15:07:39Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "NONE",
          "body": "Some feedback was received second hand from a crypto expert at a company that has actual crypto experts - and they indicated the tag scheme is not going to work. If the attacker knows the key + tag, it's apparently not too difficult to forge a message with new ciphertext that authenticates against the same tag.  I was (apparently naively) thinking that the AEAD tag provides similar properties to a secure hash or hmac (one of the JWE constructions uses AES CBC + HMAC SHA2 to provide an AEAD, which influenced my thinking) - particularly something like second preimage resistance that would make such forgery infeasible - but sounds like my assumption there is wrong. ",
          "createdAt": "2022-07-01T21:04:42Z",
          "updatedAt": "2022-07-01T21:04:42Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I'd just like to add that this is a very good point - AEAD assumes the attacker does not know the key, but here they key is known to all parties. \r\n\r\nSo to summarize the options we have:\r\n\r\n1. Hashing, as currently in the main branch. Cons: The potential footgun of missing the hash check, slightly awkward JSON-in-JSON encoding. Pros: Aligned with mDL and established there, relatively compact, easy to implement.\r\n2. Encryption with release of key. Cons: A length sidechannel, having to select algorithms carefully, and potentially very large SD-JWTs. Relying on lesser used features (JWE instead of JWS+hashing). Pros: No footgun for the verifier.\r\n3. Encryption with tag/key in SD-JWT and release of ciphertext. Cons: Relying on a crypto property we should not rely on. Pros: No footgun, smaller SD-JWTs.\r\n\r\nI think it is clear that (3) is out. \r\nComparing (1) and (2), I think that (1) is the better option. Yes, the footgun of (1) is a large one, but at least it is only one. We can make an attempt to educate implementers early on and to provide tools (e.g., test vectors) to support correct implementations.",
          "createdAt": "2022-07-04T08:15:47Z",
          "updatedAt": "2022-07-04T08:15:47Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We discussed this further and hashing seems to be the best alternative for now. I'll close this issue for now.",
          "createdAt": "2022-07-11T16:47:07Z",
          "updatedAt": "2022-07-11T16:47:07Z"
        }
      ]
    },
    {
      "number": 31,
      "id": "I_kwDOHTmVzM5LYAQN",
      "title": "Binding between SD-JWT and SD-JWT Salt/Value Container (SVC)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/31",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "Section 4.3 proposes a combined format of appending the SD-JWT Salt/Value Container (SVC) to the SD-JWT. To avoid mix-ups and improve reliability it may be worth establishing an explicit binding between the SD-JWT Salt/Value Container (SVC) to the SD-JWT by, for example, adding an attribute to the SD-JWT that includes the hash of the SD-JWT Salt/Value Container (SVC). This would give the holder a way to easily verify if the two structures are associated and avoid mix-ups.",
      "createdAt": "2022-06-08T11:16:16Z",
      "updatedAt": "2022-06-29T01:13:59Z",
      "closedAt": "2022-06-29T01:13:59Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "The purpose would be for the holder to better manage SD-JWT and SVC, correct? because SVC is not being sent from the holder to the verifier. ",
          "createdAt": "2022-06-08T17:49:36Z",
          "updatedAt": "2022-06-08T17:49:36Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "> \r\n\r\nYes - the thing I worry about is if that the holder (or the engineer implementing the handling of the artefacts at the holder/wallet) makes a mistake or looses the relationship between the two artefacts. This can result in security and/or reliability issues.",
          "createdAt": "2022-06-09T16:44:07Z",
          "updatedAt": "2022-06-09T16:44:07Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Do we actually need this? I have the feeling that through the existing hashes, there is already a good binding.",
          "createdAt": "2022-06-13T10:55:46Z",
          "updatedAt": "2022-06-13T10:55:46Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the existing hashes could be used, but there should be some clear guidance that the verifier should correlate the hashes between the SCV and SD-JWT. \r\n\r\nIf we make it explicit (e.g. the holder should only accept the SVC and SD-JWT pairing if all the hashes match (computed, not just string compared), it could work.  ",
          "createdAt": "2022-06-13T11:36:55Z",
          "updatedAt": "2022-06-13T11:36:55Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "As per my comments on some of the other proposals, we should mirror the simplicity of mDL's salted hash claims, and stop there.  We need to resist the temptation to make things more complicated than they need to be.",
          "createdAt": "2022-06-13T12:47:45Z",
          "updatedAt": "2022-06-13T12:47:45Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I'm not convinced we need any of this. The binding by the existing hashes is already quite strong. \r\n\r\nWe can define that the holder checks that (a) the structure in the SVC actually matches the one in the SD-JWT and that (b) the holder checks that the hashes match. That's really all we need.",
          "createdAt": "2022-06-17T07:36:30Z",
          "updatedAt": "2022-06-17T07:36:30Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed, that would achieve the same result. Some proposed text:\r\n\r\nThe SVC and SD-JWT are implicitly linked through the hash values of the claims in the SVC that is included in the SD-JWT. To ensure that the correct SVC and SD-JWT pairings are being used, the holder should verify that all the claims in the SVC are present in the SD-JWT, that there are no claims in the SD-JWT that are not in the SVC and that the hashes of the claims in the SVC match those in the SD-JWT.",
          "createdAt": "2022-06-17T08:46:42Z",
          "updatedAt": "2022-06-17T08:46:42Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "agreed, refactored the PR #34.",
          "createdAt": "2022-06-27T05:20:25Z",
          "updatedAt": "2022-06-27T05:20:25Z"
        }
      ]
    },
    {
      "number": 32,
      "id": "I_kwDOHTmVzM5LYBpy",
      "title": "Encrypting the SD-JWT Salt/Value Container (SVC)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/32",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "duplicate"
      ],
      "body": "Since this is a privacy preserving mechanism, it may be worth adding an option to encrypt the SD-JWT Salt/Value Container (SVC) using the holders public key. We know from experience that tokens end up in log files and get exfiltrated that way, so adding an option to encrypt the information protects against this accidental leakage. \r\n\r\nIf we consider this option, it would be advisable to use a dedicated holder encryption key to avoid issues from using the same keys for encrypting and signing information.",
      "createdAt": "2022-06-08T11:21:28Z",
      "updatedAt": "2022-07-11T16:20:53Z",
      "closedAt": "2022-07-11T16:20:53Z",
      "comments": [
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I am against requiring encryption as part of the basic SD-JWT data structure. We should be emulating the simplicity of mDL's use of salted hashes and stop there.",
          "createdAt": "2022-06-13T12:38:10Z",
          "updatedAt": "2022-06-13T12:38:10Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "Salting in the SD-JWT provides blinding so we wouldn't need encryption there, but I do think it is prudent to protect the confidentiality of the SVC. It is another kind of artefact that will end up in log files, get leaked, stolen or mislaid, just like we have seen with bearer tokens. Since it contains all the information we are trying not to disclose, making an effort to protect it may be prudent.",
          "createdAt": "2022-06-13T13:57:34Z",
          "updatedAt": "2022-06-13T13:57:34Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Encryption may be useful in some cases and it would be good to have it in the specs by design, as an additional feature, this would be very appreciated in some contexts",
          "createdAt": "2022-06-18T08:18:25Z",
          "updatedAt": "2022-06-18T08:18:25Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing as duplicate of #33 ",
          "createdAt": "2022-07-11T16:20:53Z",
          "updatedAt": "2022-07-11T16:20:53Z"
        }
      ]
    },
    {
      "number": 33,
      "id": "I_kwDOHTmVzM5LYERW",
      "title": "Including an encrypted version of the SD-JWT Salt/Value Container (SVC) in the SD-JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/33",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "duplicate"
      ],
      "body": "It may be interesting to consider including the SD-JWT Salt/Value Container (SVC) in the SD-JWT. This way there would be only one structure to pass around and it won't be possible to mix-up SD-JWT Salt/Value Container (SVC) and SD-JWT pairings. The SD-JWT Salt/Value Container (SVC) can be encrypted using a holder public key (using a dedicated encryption key), so privacy is preserved, and only the holder can decrypt that part of the structure before doing a selective disclosure. It also prevent errors where the developer may get confused and send the SD-JWT Salt/Value Container (SVC) to a verifier. \r\n\r\nIf the information is already encrypted, the developer only needs to store the single structure and it would be privacy preserving at rest by default (to circumvent the default privacy at rest feature of the data structure, the developer would need to do extra work to decrypt and store the information in clear text - something that can be called out as a risk in the security considerations).\r\n\r\nThe downside is a larger data structure and the need for encryption keys and should be weighed against the convenience of dealing with a single data structure.",
      "createdAt": "2022-06-08T11:30:58Z",
      "updatedAt": "2022-07-11T16:33:47Z",
      "closedAt": "2022-07-11T16:33:47Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "How is this issue different from #37, @PieterKas ?",
          "createdAt": "2022-06-10T21:32:16Z",
          "updatedAt": "2022-06-10T21:32:16Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/37 is broader and covers not just encapsulation of the SVC in the SD-JWT, but also the encapsulation of the SD-JWT in the SD-JWT-R.",
          "createdAt": "2022-06-13T11:40:12Z",
          "updatedAt": "2022-06-13T11:40:12Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I am against requiring encryption as part of the basic SD-JWT data structure. We should be emulating the simplicity of mDL's use of salted hashes and stop there.",
          "createdAt": "2022-06-13T12:38:47Z",
          "updatedAt": "2022-06-13T12:38:47Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "If we are pursuing a strategy of concatenation rather than encapsulation, the linking between the data structures needs to be clear (e.g. verification of all hashes before accepting that the data structures should be paired).",
          "createdAt": "2022-06-13T14:01:09Z",
          "updatedAt": "2022-06-13T14:01:09Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing as a duplicate of Issue #37 ",
          "createdAt": "2022-07-11T16:33:47Z",
          "updatedAt": "2022-07-11T16:33:47Z"
        }
      ]
    },
    {
      "number": 36,
      "id": "I_kwDOHTmVzM5LbPQO",
      "title": "How to send SD-JWT and SD-JWT-R in a presentation",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/36",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "discuss-first"
      ],
      "body": "Per https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/19#issuecomment-1144794055 in PR https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/19.\r\n\r\nTwo options how to the Holder sends SD-JWT and SD-JWT-R to the Verifier\r\n1. as separate JWTs -> six period-separated elements\r\n2. as one JWT (SD-JWT is a string inside SD-JWT-R) -> four period-separated elements\r\n\r\npersonally I am in favor of an option 2, also given the discussion in Issuer #37 on data structures potentially getting dissociated ",
      "createdAt": "2022-06-09T00:01:02Z",
      "updatedAt": "2022-10-24T20:02:11Z",
      "closedAt": "2022-10-24T20:02:10Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "If the SD-JWT is a string inside the SD-JWT-R, this will create a larger data structure (base64 encoded base64). ",
          "createdAt": "2022-06-13T07:21:53Z",
          "updatedAt": "2022-06-13T07:21:53Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with @danielfett that the double base64url-encoding resulting from option 2 is potentially problematic.",
          "createdAt": "2022-06-13T12:40:51Z",
          "updatedAt": "2022-06-13T12:40:51Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Current choice is to concatenate SD-JWT and HS-Disclosures JWT: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/155/files#diff-40bc3800dd9a7d4411799637caf0b01f82a01242d57264a2e4beb408c3835704R831\r\n\r\nNoting that it is inconsistent with how vc-data-model defined for a vc to be sent inside a vp",
          "createdAt": "2022-10-24T20:02:10Z",
          "updatedAt": "2022-10-24T20:02:10Z"
        }
      ]
    },
    {
      "number": 37,
      "id": "I_kwDOHTmVzM5LjCcH",
      "title": "Encapsulation instead of concatenation of data structures.",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/37",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The concatenation of data structures may result in reliability problems (the data structures may get dissociated), or could be an entry point for an attacker (swapping out data structures, especially if there is no binding between them).\r\n\r\nIt may be interesting to consider encapsulation instead of concatenation. In that approach the issuer will generate a SD-JWT that contains the hashes and the SVC. The SVC will be encrypted with the holders public key, so that a verifier cannot access the SVC data. \r\n\r\nThe holder will decrypt the SVC structure in the SD-JWT, decide which claims to present, and then include them in the SD-JWT-R. To avoi concatenation of the SD-JWT and SD-JWT-R, the SD-JWT can include the SD-JWT as an attribute. The result is a larger data structure, but it is all in one place, bound together, reducing the risk of accidental or malicious dissosiation. \r\n\r\nSomething like:\r\n\r\nSD-JWT = (hashes, SVC encrypted with holders public key)\r\nSD-JWT-R = (disclosed claims, SD, JWT)\r\n\r\nThen:\r\n\r\n1. Issuer sends SD-JWT to Holder\r\n2. Holder verifies SD-JWT, decrypts SVC, selects attributes to disclose, generate SD-JWT-R (which now includes the SD-JWT)\r\n3. Verifier verifies SD-JWT-R (JD-SWT is encapsulated in the SD-JWT, the SD-JWT does include the SVC, but it is privacy protected, so no risk of unauthorised disclosure).\r\n\r\nWith encapsulation, the same information gets passed around. Encrypting the SVC with the holders public key allows it to be included in the SD-JWT, without risk of unauthorised disclosure to the verifier when the SD-JWT is processed by the verifier. Encapsulating the SD-JWT in the SD-JWT-R binds the two structures together and removes any risks of dissociating of the data structures.\r\n\r\n",
      "createdAt": "2022-06-10T12:27:03Z",
      "updatedAt": "2022-12-15T17:47:26Z",
      "closedAt": "2022-12-15T17:47:26Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "very interesting. there is step 0 where the holder needs to send a encPubKey to the Issuer so that the Issuer can encrypt the SVC, which should not be the same as the signPubKey used to sign SD-JWT-R for holder binding. \r\n\r\nwould you still want to bind SVC and SD-JWT as proposed in #31?",
          "createdAt": "2022-06-10T18:18:29Z",
          "updatedAt": "2022-06-10T18:18:29Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "- Sending 'unnecessary' encrypted data to the verifier is something we should avoid in my opinion. It makes the privacy of the claims depending on the strength of the encryption. We have seen weak encryption keys and leaked encryption keys in the past. If a verifier stores the encrypted values, it can try to decrypt them later on (forward secrecy), for example, after it turns out that the encryption algorithm is broken. \r\n- This makes implementations depend on JWE libraries. In my experience, JWS in libraries is much more mature and available than JWE. We should not make this spec depend on JWE.\r\n- Larger data structure: base64 in base64 plus the encryption.\r\n\r\nOverall, this proposal adds a lot of security concerns.\r\n\r\nI do not see how manipulating the SVC or disassociating it from the SD-JWT leads to practical security problems. Unless we find practical concerns, I would propose to stick with the current approach.",
          "createdAt": "2022-06-13T09:00:58Z",
          "updatedAt": "2022-06-13T09:00:58Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett can you clarify the security concerns? \r\n\r\nIt is unclear how leaving the content of the SVC in cleartext provides better privacy assurances than encrypting it. We already know that tokens and authorization codes end up in log files, and the SVC will as well. Attackers will (and do) hoover up these artefacts, so protecting their contents seems appropriate. I worry about designing a privacy preserving feature that passes the data it seeks to control around in cleartext. \r\n\r\nIn terms of complexity, encrypting the entire structure will be much simpler than the field level encryption being proposed in https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/30. From an implementation perspective we already encrypt token contents in certain cases to preserve privacy, so there is evidence that this can be achieved at scale. Encrypting an entire structure with a single key does come across as simpler than encrypting each field with a different \r\n\r\nThe concerns about weak keys and weak algorithms can be addressed by specifying the algorithm suits that should be used and avoiding constructs like Alg:NONE. Conformance suites can enforce this in time. \r\n\r\nIt is an interesting point to consider forward secrecy in the context of selective disclosure. There are ways to solve for that through algorithm selection, ephemeral keys or just rolling keys. It still feels like a better problem to have than not protecting the SVC at all and probably applies to https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/30 as well. I do agree that including the encrypted SVC in the SD-JWT expands the impact of a future algorithm failure as there are more places where the encrypted payload will be available. However, encrypting the SVC and keeping it outside of the SD-JT still feels like a better option, even in the face of a possible future algorithm compromise (at least there is some protection in the present).",
          "createdAt": "2022-06-13T11:20:56Z",
          "updatedAt": "2022-06-13T11:32:52Z"
        },
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "Per my comment https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/36#issuecomment-1153865303 , encapsulation results in unnecessary space bloat, which we should avoid.",
          "createdAt": "2022-06-13T12:42:58Z",
          "updatedAt": "2022-06-13T12:42:58Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "If we opt for concatenation, then we need to make sure there is explicit guidance on how to link the structures (e.g. comparison of hash values).",
          "createdAt": "2022-06-13T14:03:46Z",
          "updatedAt": "2022-06-13T14:03:46Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "the guidance on how to link the structures has been addressed in several PRs. \r\n\r\nHowever, keeping this open to discuss if we want to add an option to encrypt II-Disclosures Object (former SVC) - @danielfett ?",
          "createdAt": "2022-10-24T20:07:09Z",
          "updatedAt": "2022-10-24T20:07:09Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Editors believe that encapsulating approach would significantly complicate the approach, while the risk of the mapping between hashes and disclosures seems to be significantly low based on the initial implementation feedback",
          "createdAt": "2022-12-15T17:47:26Z",
          "updatedAt": "2022-12-15T17:47:26Z"
        }
      ]
    },
    {
      "number": 44,
      "id": "I_kwDOHTmVzM5Ln6Iw",
      "title": "Restructure: use only Example 1 of 'flat' SD-JWT in the main text and move Example 2 to the Annex.",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/44",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "insight after doing a PR #43",
      "createdAt": "2022-06-13T00:47:58Z",
      "updatedAt": "2022-06-23T15:06:00Z",
      "closedAt": "2022-06-23T15:06:00Z",
      "comments": [
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm fine with that restructuring choice.",
          "createdAt": "2022-06-13T12:43:44Z",
          "updatedAt": "2022-06-13T12:43:44Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "addressed in PR #71 ",
          "createdAt": "2022-06-23T15:06:00Z",
          "updatedAt": "2022-06-23T15:06:00Z"
        }
      ]
    },
    {
      "number": 47,
      "id": "I_kwDOHTmVzM5LrLpM",
      "title": "Break down the examples in more granular steps",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/47",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "danielfett"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "",
      "createdAt": "2022-06-13T15:27:26Z",
      "updatedAt": "2022-10-24T20:00:30Z",
      "closedAt": "2022-10-24T20:00:30Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "requested by @christianpaquin\r\n@danielfett is this something you could work on?",
          "createdAt": "2022-06-16T10:55:41Z",
          "updatedAt": "2022-06-16T10:55:41Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "Specifically, it'd be helpful to describe each of the dotted component, e.g., for a non-keybound token: `<JWS Header>.<JWS payload>.<JWS signature>.<SVC>`",
          "createdAt": "2022-06-16T14:19:15Z",
          "updatedAt": "2022-06-16T14:19:15Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I addressed this here: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/155/files#diff-40bc3800dd9a7d4411799637caf0b01f82a01242d57264a2e4beb408c3835704R800-R817\r\n\r\nand here: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/155/files#diff-40bc3800dd9a7d4411799637caf0b01f82a01242d57264a2e4beb408c3835704R652-R668",
          "createdAt": "2022-10-20T09:01:46Z",
          "updatedAt": "2022-10-20T09:01:46Z"
        }
      ]
    },
    {
      "number": 48,
      "id": "I_kwDOHTmVzM5LrPdc",
      "title": "Clarify signed vs unsigned SD-JWT-R",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/48",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "the main purpose of signing SD-JWT-R is binding it to the transaction (nonce, aud)?\r\n-> clarify the use-case\r\nunsigned by default, can be signed.",
      "createdAt": "2022-06-13T15:39:36Z",
      "updatedAt": "2022-06-29T01:14:17Z",
      "closedAt": "2022-06-29T01:14:17Z",
      "comments": []
    },
    {
      "number": 49,
      "id": "I_kwDOHTmVzM5LrQiM",
      "title": "allow unsigned SD-JWT?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/49",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "describe why always sign if we are mandating to do so. ",
      "createdAt": "2022-06-13T15:43:29Z",
      "updatedAt": "2022-06-17T07:15:16Z",
      "closedAt": "2022-06-17T07:15:16Z",
      "comments": [
        {
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "body": "@Sakurann Proposed text for why the SD-JWT has to be signed (perhaps to be included in the security considerations?)\r\n\r\nThe SD-JWT is always signed by the issuer to prevent claims from being added or modified without detection. The verifier must always check the signature to ensure that the SD-JWT has not been tampered with and that the claims included were not modified since the SD-JWT was signed by the issuer. If the signature on the SD-JWT cannot be verified the SD-JWT should be rejected. If the SD-JWT is not signed, an attacker may modify claims (e.g. change the \"sub\" attribute to identify another subject or \"address\" to modify a shipping address for goods ordered), thereby forging the issuer assertion. An attacker may also choose to add optional claims that the issuer had not asserted (e.g. adding an attribute indicating an academic qualification).\r\n\r\n",
          "createdAt": "2022-06-16T13:47:32Z",
          "updatedAt": "2022-06-16T15:37:55Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "thanks Pieter, incorporated into the PR.",
          "createdAt": "2022-06-17T04:46:36Z",
          "updatedAt": "2022-06-17T04:46:36Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Thanks for preparing the pull request. Approved and merged!",
          "createdAt": "2022-06-17T07:15:16Z",
          "updatedAt": "2022-06-17T07:15:16Z"
        }
      ]
    },
    {
      "number": 50,
      "id": "I_kwDOHTmVzM5LrWuO",
      "title": "MTI hash algorithm?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/50",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "per @PieterKas's comment.",
      "createdAt": "2022-06-13T16:05:29Z",
      "updatedAt": "2022-08-25T23:04:40Z",
      "closedAt": "2022-08-25T23:04:40Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2022-08-25T23:04:40Z",
          "updatedAt": "2022-08-25T23:04:40Z"
        }
      ]
    },
    {
      "number": 51,
      "id": "I_kwDOHTmVzM5LzdHk",
      "title": "More explanation on \"precise JSON encoding can vary\"",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/51",
      "state": "CLOSED",
      "author": "kushaldas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Talking about https://www.ietf.org/archive/id/draft-fett-selective-disclosure-jwt-00.html#section-4.1.1.1-3\r\n\r\nI think we should add one more line to explain that depending on the programming language & exact JSON library, the JSON encoded ordered array (which is the input to the hash function) may look different, but all are valid JSON. This also means the hash output may not be the same even for the same `salt` & `value`.\r\n\r\nI spent 2 hours yesterday while totally missing a space in the JSON encoded string, which is not there in Rust JSON encoding, but in the  Python output.",
      "createdAt": "2022-06-15T07:17:33Z",
      "updatedAt": "2022-10-17T07:33:41Z",
      "closedAt": "2022-10-17T07:33:41Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that thi issue could be closed when this proposal will be approved (and implemented)\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/27#issuecomment-1157732753\r\n\r\nall the values will be a JSON Object and not escaped string",
          "createdAt": "2022-06-25T22:17:11Z",
          "updatedAt": "2022-06-25T22:17:11Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This has been addressed with PR #146.",
          "createdAt": "2022-10-17T07:33:41Z",
          "updatedAt": "2022-10-17T07:33:41Z"
        }
      ]
    },
    {
      "number": 53,
      "id": "I_kwDOHTmVzM5L5_Vv",
      "title": "Reference Python implementation is not verifying HOLDER binding via sub_jwk",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/53",
      "state": "CLOSED",
      "author": "kushaldas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "According to the HOLDER key (4.1.1.2), we should have the HOLDER_PUBLIC_KEY as `sub_jwk` in the *SD-JWT*, right now the reference implementation is attaching the ISSUER_PUBLIC_KEY to *SD-JWT*. We should fix this and then verify that the actual HOLDER's key matches with the `sub_jwk`.",
      "createdAt": "2022-06-16T12:24:51Z",
      "updatedAt": "2022-06-17T07:12:26Z",
      "closedAt": "2022-06-17T07:12:26Z",
      "comments": []
    },
    {
      "number": 57,
      "id": "I_kwDOHTmVzM5L-l_K",
      "title": "add a JSON-encoded mDL example",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/57",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "post-wg-adoption"
      ],
      "body": "",
      "createdAt": "2022-06-17T07:54:47Z",
      "updatedAt": "2022-10-18T15:56:54Z",
      "closedAt": "2022-10-18T15:56:53Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "there is no JSON-encoded ISO mDL defined right now. \r\nalso duplicate of Issue #144.",
          "createdAt": "2022-10-18T15:56:53Z",
          "updatedAt": "2022-10-18T15:56:53Z"
        }
      ]
    },
    {
      "number": 59,
      "id": "I_kwDOHTmVzM5L_cVW",
      "title": "Complete W3C VC/VP Example",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/59",
      "state": "CLOSED",
      "author": "tlodderstedt",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "It unclear to me how the key for holder binding is represented and used in the example 4 in the appendix. Could you please add an explanation (perhaps JWT headers are required as well).",
      "createdAt": "2022-06-17T11:34:16Z",
      "updatedAt": "2022-10-24T17:05:07Z",
      "closedAt": "2022-10-24T17:05:07Z",
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "NONE",
          "body": "I recommend use of raw public keys (JWKs) in this example. ",
          "createdAt": "2022-06-17T11:35:08Z",
          "updatedAt": "2022-06-17T11:35:08Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "need to agree `sub_jwk` vs `cnf` re Issue #77 ",
          "createdAt": "2022-06-27T05:02:25Z",
          "updatedAt": "2022-06-27T05:02:25Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #127 ",
          "createdAt": "2022-07-14T20:53:38Z",
          "updatedAt": "2022-07-14T20:53:38Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #162, PR #161",
          "createdAt": "2022-10-24T17:05:07Z",
          "updatedAt": "2022-10-24T17:05:07Z"
        }
      ]
    },
    {
      "number": 60,
      "id": "I_kwDOHTmVzM5L_eC5",
      "title": "Add proper header claims in SD-JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/60",
      "state": "OPEN",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "We have \r\n\r\n````\r\n{\r\n  \"alg\": \"RS256\"\r\n}\r\n````\r\n\r\nwe may have something like\r\n\r\n````\r\n{\r\n  \"typ\": \"SD-JWT\"\r\n  \"alg\": \"RS256\"\r\n}\r\n````",
      "createdAt": "2022-06-17T11:42:04Z",
      "updatedAt": "2022-12-08T20:13:39Z",
      "closedAt": null,
      "comments": [
        {
          "author": "tlodderstedt",
          "authorAssociation": "NONE",
          "body": "+1",
          "createdAt": "2022-06-17T12:32:06Z",
          "updatedAt": "2022-06-17T12:32:06Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "I suppose also to have at least `kid` or `x5t` or `jwk` or `x5c` in the headers.",
          "createdAt": "2022-06-18T07:06:03Z",
          "updatedAt": "2022-06-18T07:06:03Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "and also the typ header claim \"SD-JWT-R\"\r\n\r\ndo we have nay prefernces on the name of these typ(s)?\r\n\r\n\"selective-disclosure-jwt+r\" and things or the KISS approach? (I'm for the second one)",
          "createdAt": "2022-06-22T09:50:34Z",
          "updatedAt": "2022-06-22T09:50:34Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "If I look at what we have chosen for DPoP, I think we should go for `sd+jwt` and `sd-r+jwt` or similar. @b---c Do you have an opinion on this?",
          "createdAt": "2022-06-24T09:57:23Z",
          "updatedAt": "2022-06-24T09:57:23Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Agree with `sd+jwt`. \r\n\r\nNot sure about the `sd-r+jwt` because the SD JWT release is more stuff than a single JWT. And typ is describing the JWT containing it.  ",
          "createdAt": "2022-06-24T13:26:35Z",
          "updatedAt": "2022-06-24T13:26:35Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "@bc-pi\r\n\r\nThis is the SD-JWT-R taken from draft and demo code\r\n````\r\neyJhbGciOiAiUlMyNTYifQ.eyJub25jZSI6ICIyR0xDNDJzS1F2ZUNmR2ZyeU5STjl3Iiw\r\ngImF1ZCI6ICJodHRwczovL2V4YW1wbGUuY29tL3ZlcmlmaWVyIiwgIl9zZCI6IHsiZ2l2Z\r\nW5fbmFtZSI6ICJbXCI2SWo3dE0tYTVpVlBHYm9TNXRtdlZBXCIsIFwiSm9oblwiXSIsICJ\r\nmYW1pbHlfbmFtZSI6ICJbXCJlSThaV205UW5LUHBOUGVOZW5IZGhRXCIsIFwiRG9lXCJdI\r\niwgImFkZHJlc3MiOiAiW1wiUGMzM0pNMkxjaGNVX2xIZ2d2X3VmUVwiLCB7XCJzdHJlZXR\r\nfYWRkcmVzc1wiOiBcIjEyMyBNYWluIFN0XCIsIFwibG9jYWxpdHlcIjogXCJBbnl0b3duX\r\nCIsIFwicmVnaW9uXCI6IFwiQW55c3RhdGVcIiwgXCJjb3VudHJ5XCI6IFwiVVNcIn1dIn1\r\n9.b0hG3v71rzHvtoDTdroZ9m-lt9tf8nobFKb2YGiyGOjIklfcKc2KWj72oi_tBKcOCqZh\r\ndX6IV4BRXIw-aspQfLh-xBrNLuGqiC-Y3rZBBlWw0WWnbbtsy1tj8yZOiXBr8vO6mCgZGA\r\nd4MgPYPd-QzOr9ukObYDRB4I24xHrqlAEYPJIzSw9MI_dEmIkNnAuIfLQKiuyTqVVVp6Ly\r\npBIz6fBLm6NOLC4-uVXlOzI91iT4zlkrhP0-vj8TmfB-XL9aD3-xqytvLBHTESct49OSRZ\r\nFrwkLUKTM56_6KW3pG7Ucuv8VnpHXHIka0SGRaOh8x6v5-rCQJl_IbM8wb7CSHvQ\r\n````\r\n\r\nit's a signed JWT with the structure above\r\n\r\n````\r\n{\r\n  \"alg\": \"RS256\"\r\n}\r\n.\r\n{\r\n  \"nonce\": \"2GLC42sKQveCfGfryNRN9w\",\r\n  \"aud\": \"https://example.com/verifier\",\r\n  \"_sd\": {\r\n    \"given_name\": \"[\\\"6Ij7tM-a5iVPGboS5tmvVA\\\", \\\"John\\\"]\",\r\n    \"family_name\": \"[\\\"eI8ZWm9QnKPpNPeNenHdhQ\\\", \\\"Doe\\\"]\",\r\n    \"address\": \"[\\\"Pc33JM2LchcU_lHggv_ufQ\\\", {\\\"street_address\\\": \\\"123 Main St\\\", \\\"locality\\\": \\\"Anytown\\\", \\\"region\\\": \\\"Anystate\\\", \\\"country\\\": \\\"US\\\"}]\"\r\n  }\r\n}\r\n````\r\n\r\nSo if we agree we can add `sd-r+jwt` in the SD-JWT-R",
          "createdAt": "2022-06-25T21:04:10Z",
          "updatedAt": "2022-06-25T21:04:10Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "PR here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/83\r\n\r\nCode here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/d49b8ffe82392b3a4948393863e203ad25885b4a\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/4a4575f36906c61471179b8b530f47d980853ba1",
          "createdAt": "2022-06-25T21:12:42Z",
          "updatedAt": "2022-06-25T21:12:42Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "My previous comment had some confusion about what exactly is SD JWT release. I thought (from misunderstanding or maybe text from a previous revision of the draft) that the SD-JWT-R was a term for the whole package. Sorry for any confusion. ",
          "createdAt": "2022-06-27T18:34:58Z",
          "updatedAt": "2022-06-27T18:35:16Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thinking about this a bit more and I don't think that `typ` value(s) should be defined or mandated by this draft. \r\n\r\n[RFC 8725 - JSON Web Token Best Current Practices](https://tools.ietf.org/html/rfc8725.html) talks about using explicit typing as a security mechanism to prevent \"Cross-JWT Confusion\" but typing something as an SD-JWT doesn't accomplish the same thing and might preclude use in contexts where there is a typ already in use (i.e. `at+jwt` for an access token per https://datatracker.ietf.org/doc/html/rfc9068#section-2.1).",
          "createdAt": "2022-06-27T18:45:25Z",
          "updatedAt": "2022-06-27T18:48:41Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "It's subtle but this isn't exactly a type of JWT and the title 'Selective Disclosure JWT' is potentially misleading. The document is more defining some structures/claims for use in JWT that can (help) accomplish selective disclosure.  'Selective Disclosure with JWT' or 'Selective Disclosure for JWT' might be more appropriate. ",
          "createdAt": "2022-06-27T19:22:20Z",
          "updatedAt": "2022-06-27T19:22:20Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, it seems to define the scope of this draft instead of the identification of the SD-JWT artifact. Anyway we need a section that exolain how to have a SD even with access tokens and id tokens for example, or any other scenario that makes sense",
          "createdAt": "2022-06-27T21:56:48Z",
          "updatedAt": "2022-06-27T21:56:48Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "My two eurocents on this: A clearer distinction between the different JWTs and JSON documents we're dealing with will help to inform the decision on this issue.\r\n\r\n* We do have the SD-JWT, a normal JWT with the special claim `sd_digests`.\r\n* Then there is the SVC, let's ignore that for a moment.\r\n* Then the SD-JWT-R, another normal JWT (or a plain JSON structure) with some special claims.\r\n* Finally, the verifier may synthesize a data structure from the SD-JWT plus the SD-JWT-R. This data structure contains the same data an application would otherwise maybe have received via a JWT from the issuer directly, and its integrity can be traced back to the issuer as well. Let's call this data the **result** (of the SD-JWT(-R) verification).\r\n\r\nThis result will have the same claim names as ID Tokens in some cases. In some cases, it might look like an access token according to RFC9068. In other cases, will conform to <insert_spec_here>.\r\n\r\nBut the SD-JWT that was the basis for this result will never be an ID token, or an RFC9068 compliant access token, or an <insert_spec_here> compliant token, because it uses a special claims container (`sd_digests`), and the claim values are hashes, not actual claim values. Maybe the structure is completely different.\r\n\r\nTherefore, the `typ` of the original SD-JWT cannot be `jwt` or `at+jwt` or `<insert_spec_here>+jwt`. If anything, it should be something like `sd+jwt`. Same for the SD-JWT-R, maybe the `typ` should be `sd-r+jwt` as proposed before.\r\n\r\nBut: There might be room for another `typ`-like information, maybe in a new claim `sd_headers`, to indicate what the `typ` of the result will be:\r\n\r\n```\r\n{\r\n  \"typ\": \"sd+jwt\"\r\n}.\r\n{\r\n  \"iss\": \"https://example.com/issuer\",\r\n  \"sub_jwk\": {\r\n    \"kty\": \"RSA\",\r\n    \"n\": \"pm4bOHBg-oYhAyPWzR56AWX3rUIXp11_ICDkGgS6W3ZWLts-hzwI3x65659kg4hVo9dbGoCJE3ZGF_eaetE30UhBUEgpGwrDrQiJ9zqprmcFfr3qvvkGjtth8Zgl1eM2bJcOwE7PCBHWTKWYs152R7g6Jg2OVph-a8rq-q79MhKG5QoW_mTz10QT_6H4c7PjWG1fjh8hpWNnbP_pv6d1zSwZfc5fl6yVRL0DV0V3lGHKe2Wqf_eNGjBrBLVklDTk8-stX_MWLcR-EGmXAOv0UBWitS_dXJKJu-vXJyw14nHSGuxTIK2hx1pttMft9CsvqimXKeDTU14qQL1eE7ihcw\",\r\n    \"e\": \"AQAB\"\r\n  },\r\n  \"iat\": 1516239022,\r\n  \"exp\": 1516247022,\r\n  \"sd_headers\": {\r\n    \"typ\": \"something+jwt\"\r\n  },\r\n  \"sd_digests\": {\r\n    \"sub\": \"LbnhkOr5oS7KjeUrxezAu8TG0CpWz0jSixy6tffuo04\",\r\n    \"given_name\": \"fUMdn88aaoyKTHrvZd6AuLmPraGhPJ0zF5r_JhxCVZs\",\r\n    \"family_name\": \"9h5vgv6TpFV6GmnPtugiMLl5tHetHeb5X_2cKHjN7cw\",\r\n    \"email\": \"fPZ92dtYMCN2Nb-2ac_zSH19p4yakUXrZl_-wSgaazA\",\r\n    \"phone_number\": \"QdSffzNzzd0n60MsSmuiKj6Y6Enk2b-BS-KtEePde5M\",\r\n    \"address\": \"JFu99NUXPq55f6DFBZ22rMkxMNHayCrfPG0FDsqbyDs\",\r\n    \"birthdate\": \"Ia1Tc6_Xnt5CJc2LtKcu6Wvqr42glBGGcjGOye8Zf3U\"\r\n  }\r\n}\r\n```\r\n\r\nA verifier could use this information to reject the SD-JWT early without checking anything else, and to avoid type confusion attacks as usual.",
          "createdAt": "2022-07-06T08:51:42Z",
          "updatedAt": "2022-07-06T08:51:42Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Coming back to this after a looong time...\r\n\r\nWhat about this solution?\r\n- Add a `typ` header, e.g., `sd+jwt` to the SD-JWT.\r\n- Define a new header, `_sd_typ`, that defines *what the SD-JWT is supposed to represent*, e.g., `at`, `secevent` or similar.\r\n- Define that the verifier must replace `typ` with the contents of `_sd_typ` before passing the data to the application.\r\n\r\nSo you would have in the SD-JWT:\r\n```\r\n{\r\n  \"typ\": \"sd+jwt\"\r\n}.\r\n{\r\n  \"iss\": \"https://example.com/issuer\",\r\n  \"_sd_typ\": \"at+jwt\"\r\n```\r\n  \r\n  and passed to the application:\r\n```\r\n{\r\n  \"typ\": \"at+jwt\"\r\n}.\r\n{\r\n  \"iss\": \"https://example.com/issuer\",\r\n```\r\n",
          "createdAt": "2022-12-07T13:49:50Z",
          "updatedAt": "2022-12-07T13:52:01Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> What about this solution? \r\n\r\nI usually like your ideas @danielfett but would be strongly opposed to that. \r\n\r\nIMHO this draft should not say or mandate anything about \"typ\" headers. Leave that to the application to use (or not) as appropriate. But `\"typ\": \"sd+jwt\"` isn't really meaningful or useful on it's own (similar to `\"typ\": \"JWT\"`, the WTF from RFC7519) and so we don't need special SD-JWT features for it. \r\n\r\nIt _maybe_ worthwhile to define media type(s) for the combined format(s) that could be used to signal what the thing is in like HTTP `Content-Type` or `cty` header of an enclosing JWE.  Maybe. \r\n",
          "createdAt": "2022-12-08T20:13:39Z",
          "updatedAt": "2022-12-08T20:13:39Z"
        }
      ]
    },
    {
      "number": 64,
      "id": "I_kwDOHTmVzM5MCkfF",
      "title": "[Sending SD-JWT and SVC during Issuance] explanatory text, terms and examples",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/64",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "ready-to-close"
      ],
      "body": "In [Sending SD-JWT and SVC during Issuance](https://github.com/oauthstuff/draft-selective-disclosure-jwt/blob/master/main.md#sending-sd-jwt-and-svc-during-issuance) we read \r\n\r\n`For transporting the SVC together with the SD-JWT from the issuer to the holder, the SVC is base64url-encoded and appended to the SD-JWT using a period character . as the separator.`\r\n\r\nWe may consider to enrich the example with this decoded and self explanatory structure:\r\n````\r\n{\"alg\": \"RS256\"}\r\n.\r\n{\"iss\": \"https://example.com/issuer\", \"sub_jwk\": {\"kty\": \"RSA\", \"n\": \"pm4bOHBg-oYhAyPWzR56AWX3rUIXp11_ICDkGgS6W3ZWLts-hzwI3x65659kg4hVo9dbGoCJE3ZGF_eaetE30UhBUEgpGwrDrQiJ9zqprmcFfr3qvvkGjtth8Zgl1eM2bJcOwE7PCBHWTKWYs152R7g6Jg2OVph-a8rq-q79MhKG5QoW_mTz10QT_6H4c7PjWG1fjh8hpWNnbP_pv6d1zSwZfc5fl6yVRL0DV0V3lGHKe2Wqf_eNGjBrBLVklDTk8-stX_MWLcR-EGmXAOv0UBWitS_dXJKJu-vXJyw14nHSGuxTIK2hx1pttMft9CsvqimXKeDTU14qQL1eE7ihcw\", \"e\": \"AQAB\"}, \"iat\": 1516239022, \"exp\": 1516247022, \"_sd\": {\"sub\": \"LbnhkOr5oS7KjeUrxezAu8TG0CpWz0jSixy6tffuo04\", \"given_name\": \"fUMdn88aaoyKTHrvZd6AuLmPraGhPJ0zF5r_JhxCVZs\", \"family_name\": \"9h5vgv6TpFV6GmnPtugiMLl5tHetHeb5X_2cKHjN7cw\", \"email\": \"fPZ92dtYMCN2Nb-2ac_zSH19p4yakUXrZl_-wSgaazA\", \"phone_number\": \"QdSffzNzzd0n60MsSmuiKj6Y6Enk2b-BS-KtEePde5M\", \"address\": \"JFu99NUXPq55f6DFBZ22rMkxMNHayCrfPG0FDsqbyDs\", \"birthdate\": \"Ia1Tc6_Xnt5CJc2LtKcu6Wvqr42glBGGcjGOye8Zf3U\"}}\r\n.\r\n$JWT-Signature-bytes\r\n.\r\n{\r\n    \"_sd\": {\r\n        \"sub\": \"[\\\"eluV5Og3gSNII8EYnsxA_A\\\", \\\"6c5c0a49-b589-431d-bae7-219122a9ec2c\\\"]\",\r\n        \"given_name\": \"[\\\"6Ij7tM-a5iVPGboS5tmvVA\\\", \\\"John\\\"]\",\r\n        \"family_name\": \"[\\\"eI8ZWm9QnKPpNPeNenHdhQ\\\", \\\"Doe\\\"]\",\r\n        \"email\": \"[\\\"Qg_O64zqAxe412a108iroA\\\", \\\"johndoe@example.com\\\"]\",\r\n        \"phone_number\": \"[\\\"AJx-095VPrpTtN4QMOqROA\\\", \\\"+1-202-555-0101\\\"]\",\r\n        \"address\": \"[\\\"Pc33JM2LchcU_lHggv_ufQ\\\", {\\\"street_address\\\": \\\"123 Main St\\\", \\\"locality\\\": \\\"Anytown\\\", \\\"region\\\": \\\"Anystate\\\", \\\"country\\\": \\\"US\\\"}]\",\r\n        \"birthdate\": \"[\\\"G02NSrQfjFXQ7Io09syajA\\\", \\\"1940-01-01\\\"]\"\r\n    }\r\n}\r\n````",
      "createdAt": "2022-06-18T09:19:17Z",
      "updatedAt": "2022-07-11T16:55:48Z",
      "closedAt": "2022-07-11T16:55:48Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "In pyrefactor branch (PR [here](https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/files#diff-5222495a3d6b3dd607e525361846720aa32ea623787032990c43548a2c24b3c1R169) ) I added this kind of representation for debug/demo purpose\r\n\r\n````\r\nSerialized SD-JWT Salt/Value Container (SVC) decoded representation:\r\n{\"alg\": \"RS256\", \"typ\": \"sd-jwt\", \"kid\": \"goi21Bfx-Qn6K-tle5ML1vCB52T8MIYqG6pwJKVnPZA\"}.{\"iss\": \"https://example.com/issuer\", \"sub_jwk\": {\"kty\": \"RSA\", \"n\": \"ufPP5x7pFf1DBcu9u3usHMzNIncKE5yPh_gNGGBkrKzI2u1ZvxJPyutJFCDfyEfqsQZgPfTB9i_U2SReWy2-nGEiMrgE1vnRZ76kd1eMUADfK8UyhNqqa0nT09ILVZeMDfnHZKzd0Z9GNxEfoaF8jYJtkIG26_D1xwyCSbaeRunKzG4MMs8hyx8xyNQWgui06z-FjGrgXoJASZ4DC4j8an4p9prs6hI9f1eZEEtDSEQZBApg-FDWO1jFpSjRt3micSH7EWyb73X0p0dn31kk33CdJ-ragpFw7IOmRESRelMymykjX8xqqWWc6vUoUiXIHrJzTAftPcMIK4SlLoc_Ow\", \"e\": \"AQAB\"}, \"iat\": 1656184897, \"exp\": 1656185797, \"hash_alg\": \"sha-256\", \"sd_digests\": {\"sub\": \"z4xgEco94diTaSruISPiE7o_wtmcOfnH_8R7X9Pa578\", \"given_name\": \"PvU7cWjuHUq6w-i9XFpQZhjT-uprQL3GH3mKsAJl0e0\", \"family_name\": \"H-Relr4cEBMlenyK1gvyx16QVpnt4MEclT5tP0aTLFU\", \"email\": \"ET2A1JQLF85ZpBulh6UFstGrSfR4B3KM-bjQVllhxqY\", \"phone_number\": \"SJnciB2DIRVA5cXBrdKoH6n45788mZyUn2rnv74uMVU\", \"address\": {\"street_address\": \"O7_Isd6CmZqcSobPVpMgmJwB41hPUHHG8jg5LJ8YzfY\", \"locality\": \"w-zTF6ljkQLTvVyp_JNyD3t5Waj-B2vb0AXH1q8OsjI\", \"region\": \"nTvoKpGA6YQwEZipVBIM4WVH9KWEnwiqsRjEhrxhQz4\", \"country\": \"u-O1yDQqDTTqOgUBSjWilgkMLzg_QOTELMfZrRT5e6k\"}, \"birthdate\": \"TipyoxD43PZJF8ZEmKPrbxMElpFX_M7aBLkUpC-W53o\"}}.YJILeZBqr3rZBbejfweY4CjC4SKAvbbg6FxQKyNx2xaSRACsphHOg9zeNcUnW8EugR0uM812L_zkS5C3YFBDxuQR1OuFtSasYdwUmKgqlo5clFhHr4-zUJ-h5Y5jQ5WUwVNB1ETMG1sbS_Sq3B5XUrYNZ_5vQrYPBqAmu1TT8ATFpdgvl91SqZNWp9i7qVEhVHzmJSSMp4ZRK9Ky83ldMpW4FtVSyhVqMMXv_581mrM4hNBT8elceGfHX56CwirlpErIq9qaLvU7AOMAuDuGx74eYJZGvRJSaiRtlbXGdlbMURke5KJlafWCnz8Yy91eKTHq266xfhXrgyyDh-BjhA\r\n````",
          "createdAt": "2022-06-25T21:23:21Z",
          "updatedAt": "2022-06-25T21:23:21Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "This is not a defined format, mixing up multiple representations, so it should not be in the spec text itself, but it is a great clarification to have in the Command Line output, which you have already kindly done :)",
          "createdAt": "2022-07-11T16:55:48Z",
          "updatedAt": "2022-07-11T16:55:48Z"
        }
      ]
    },
    {
      "number": 65,
      "id": "I_kwDOHTmVzM5MCldY",
      "title": "[SD-JWT and SVC Issuance and Presentation] JWT Artifact instead of custom base64url concatenation ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/65",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In section \"Sending SD-JWT and SVC during Issuance\" in \"SD-JWT and SVC issuance\" and define a term for the objects that concatenates the base64urls artifacts.\r\n\r\nWhat do you think to have a JWT instead of a custom base64url artifact? \r\nThe JWT it has a header where we may normate the `typ` claim `ISS-SD-JWT` or any other that say \"ISSUED SD-JWT\". The JWT may have the following structure\r\n\r\n````\r\n{\r\n  \"alg\": \"RS256\",\r\n  \"typ\": \"ISS-SD-JWT\",\r\n  \"kid\": \"that-thumbprinted-value-we-like\"\r\n}\r\n.\r\n{\r\n  \"iss\": \"https://example.com/issuer\",\r\n  \"aud\": \"https://that-cloud-wallet.id/78as6df86asf8as6f8as76s78f68fg6dfjnrker\"\r\n  \"iat\": 1516239022,\r\n  \"exp\": 1516249022, # matching with the exp value of the SD-JWT\r\n  \"_sd_jwt\": \r\n  $START of JWT as decoded payload\r\n        {\r\n          \"alg\": \"RS256\",\r\n          \"typ\": \"SD-JWT\",\r\n          \"kid\": \"that-thumbprinted-value-we-like\"\r\n        }\r\n        .\r\n        {\r\n            \"iss\": \"https://example.com/issuer\",\r\n            \"sub_jwk\": {\r\n              \"kty\": \"RSA\",\r\n              \"n\": \"pm4bOHBg- ...\",\r\n              \"e\": \"AQAB\"},\r\n           \"iat\": 1516239022,\r\n           \"exp\": 1516247022,\r\n         \"_sd\": {\"sub\": \"LbnhkOr5oS7KjeUrxezAu8TG0CpWz0jSixy6tffuo04\",\r\n          \"given_name\": \"fUMdn88aaoyKTHrvZd6AuLmPraGhPJ0zF5r_JhxCVZs\",\r\n          \"family_name\": \"9h5vgv6TpFV6GmnPtugiMLl5tHetHeb5X_2cKHjN7cw\",\r\n          \"email\": \"fPZ92dtYMCN2Nb-2ac_zSH19p4yakUXrZl_-wSgaazA\",\r\n          \"phone_number\": \"QdSffzNzzd0n60MsSmuiKj6Y6Enk2b-BS-KtEePde5M\",\r\n          \"address\": \"JFu99NUXPq55f6DFBZ22rMkxMNHayCrfPG0FDsqbyDs\",\r\n          \"birthdate\": \"Ia1Tc6_Xnt5CJc2LtKcu6Wvqr42glBGGcjGOye8Zf3U\"}\r\n          },\r\n  $END of JWT as decoded payload\r\n  \"_sd_svc\": {\r\n        \"sub\": \"[\\\"eluV5Og3gSNII8EYnsxA_A\\\", \\\"6c5c0a49-b589-431d-bae7-219122a9ec2c\\\"]\",\r\n        \"given_name\": \"[\\\"6Ij7tM-a5iVPGboS5tmvVA\\\", \\\"John\\\"]\",\r\n        \"family_name\": \"[\\\"eI8ZWm9QnKPpNPeNenHdhQ\\\", \\\"Doe\\\"]\",\r\n        \"email\": \"[\\\"Qg_O64zqAxe412a108iroA\\\", \\\"johndoe@example.com\\\"]\",\r\n        \"phone_number\": \"[\\\"AJx-095VPrpTtN4QMOqROA\\\", \\\"+1-202-555-0101\\\"]\",\r\n        \"address\": \"[\\\"Pc33JM2LchcU_lHggv_ufQ\\\", {\\\"street_address\\\": \\\"123 Main St\\\", \\\"locality\\\": \\\"Anytown\\\", \\\"region\\\": \\\"Anystate\\\", \\\"country\\\": \\\"US\\\"}]\",\r\n        \"birthdate\": \"[\\\"G02NSrQfjFXQ7Io09syajA\\\", \\\"1940-01-01\\\"]\"\r\n    }\r\n}\r\n````",
      "createdAt": "2022-06-18T09:40:33Z",
      "updatedAt": "2022-06-20T12:56:34Z",
      "closedAt": "2022-06-20T12:56:08Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "If thsi approach is reasonable to you we should adopt the same solution during the Presentation phase\r\n\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/blob/master/main.md#sending-sd-jwt-and-sd-jwt-r-during-presentation",
          "createdAt": "2022-06-18T09:51:23Z",
          "updatedAt": "2022-06-18T09:51:23Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Is this a duplicate of https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/37?",
          "createdAt": "2022-06-20T12:33:41Z",
          "updatedAt": "2022-06-20T12:33:41Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "completely yes, So I close this.\r\n\r\nI'm not for nesting stuffs in matrioska formats, so we may consider to register a content-type in the IANA Registry to deal with this base64 concatenation of objects if we agree. Let's talk on this on the dedicated/original issue \r\n\r\nmy bad!",
          "createdAt": "2022-06-20T12:56:08Z",
          "updatedAt": "2022-06-20T12:56:34Z"
        }
      ]
    },
    {
      "number": 66,
      "id": "I_kwDOHTmVzM5MCltu",
      "title": "We should define two different claims for _sd ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/66",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The same `_sd` claim is used for `SD-JWT` and also for `SVC`.\r\n\r\nHere an example of `_sd` in `SD-JWT`\r\n\r\n````\r\n\"_sd\": {\r\n    \"sub\": \"LbnhkOr5oS7KjeUrxezAu8TG0CpWz0jSixy6tffuo04\",\r\n    \"given_name\": \"fUMdn88aaoyKTHrvZd6AuLmPraGhPJ0zF5r_JhxCVZs\",\r\n    \"family_name\": \"9h5vgv6TpFV6GmnPtugiMLl5tHetHeb5X_2cKHjN7cw\",\r\n    \"email\": \"fPZ92dtYMCN2Nb-2ac_zSH19p4yakUXrZl_-wSgaazA\",\r\n    \"phone_number\": \"QdSffzNzzd0n60MsSmuiKj6Y6Enk2b-BS-KtEePde5M\",\r\n    \"address\": {\r\n      \"street_address\": \"4FpVpd563Owh9G3HkGNTN9FiSHT0e6y9-Abk_IuG86M\",\r\n      \"locality\": \"Kr0BpdZz6yU8HMhjyYHh1EEgJxeUyLIpJEi47iXhp8Y\",\r\n      \"region\": \"QXxWKvcV4Bc9t3M7MF43W5vdCnWtA9hsYX8ycWLu1LQ\",\r\n      \"country\": \"3itkoMzrDrinn7T0MUbAmrMm1ya1LzbBgif_50WoFOs\"\r\n    },\r\n    \"birthdate\": \"fvLCnDm3r4VSYcBF3pIlXP4ulEoHuHOfG_YmFZEuxpQ\"\r\n  }\r\n```` \r\n\r\nhere an example of `_sd` in `SVC`\r\n\r\n````\r\n  \"_sd\": {\r\n    \"sub\": \"[\\\"eluV5Og3gSNII8EYnsxA_A\\\", \\\"6c5c0a49-b589-431d-bae7-219122a9ec2c\\\"]\",\r\n    \"given_name\": \"[\\\"6Ij7tM-a5iVPGboS5tmvVA\\\", \\\"John\\\"]\",\r\n    \"family_name\": \"[\\\"eI8ZWm9QnKPpNPeNenHdhQ\\\", \\\"Doe\\\"]\",\r\n    \"email\": \"[\\\"Qg_O64zqAxe412a108iroA\\\", \\\"johndoe@example.com\\\"]\",\r\n    \"phone_number\": \"[\\\"AJx-095VPrpTtN4QMOqROA\\\", \\\"+1-202-555-0101\\\"]\",\r\n    \"address\": \"[\\\"Pc33JM2LchcU_lHggv_ufQ\\\", {\\\"street_address\\\": \\\"123 Main St\\\", \\\"locality\\\": \\\"Anytown\\\", \\\"region\\\": \\\"Anystate\\\", \\\"country\\\": \\\"US\\\"}]\",\r\n    \"birthdate\": \"[\\\"G02NSrQfjFXQ7Io09syajA\\\", \\\"1940-01-01\\\"]\"\r\n  }\r\n````\r\n\r\nSo actually we have the same claim name for two different purposes.\r\nWhat do you think to have two separate claim name, like `_sd_jwt` and `_sd_svc`?",
      "createdAt": "2022-06-18T09:46:13Z",
      "updatedAt": "2022-06-18T12:59:30Z",
      "closedAt": "2022-06-18T12:59:30Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "We may adopt in SD-JWT Release the claim `_sd_svc`",
          "createdAt": "2022-06-18T09:48:51Z",
          "updatedAt": "2022-06-18T09:48:51Z"
        },
        {
          "author": "Macke",
          "authorAssociation": "NONE",
          "body": "This seems a duplicate of [issue 25](https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/25)\r\n",
          "createdAt": "2022-06-18T10:24:39Z",
          "updatedAt": "2022-06-18T10:24:39Z"
        }
      ]
    },
    {
      "number": 68,
      "id": "I_kwDOHTmVzM5MCnwm",
      "title": "Editorial issues and typos",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/68",
      "state": "CLOSED",
      "author": "Macke",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 1 - The note at end of  is not clear\r\n\r\nSection 2.7 - \"An entity that **entity that** requests,\"\r\n\r\nSection 3.3 - Verifying an **SD-JWWT** Release\r\n\r\nSection 4.1.1.1 - Reference to eKYC should probably be OIDC4IDA\r\n\r\nSection 4.3 - \"...base64ur-encoded...\"\r\n\r\nSection 5 - numbering format is not good from a readability perspective\r\n\r\n",
      "createdAt": "2022-06-18T10:28:41Z",
      "updatedAt": "2022-06-24T12:20:33Z",
      "closedAt": "2022-06-24T12:20:33Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "See PR #72. Most points in this issue have been addressed already in other commits. We can't change the list style, so keeping as is for now.",
          "createdAt": "2022-06-23T15:32:56Z",
          "updatedAt": "2022-06-23T15:32:56Z"
        }
      ]
    },
    {
      "number": 73,
      "id": "I_kwDOHTmVzM5MdzOm",
      "title": "Handling claims that are in the form of a dictionary or array",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/73",
      "state": "CLOSED",
      "author": "nikosft",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "ready-to-close"
      ],
      "body": "IMHO if a claim is in the form of a dictionary, then each element of the dictionary should be hashed separately. For example, in [Example 1](https://www.ietf.org/archive/id/draft-fett-oauth-selective-disclosure-jwt-01.html#name-example-1-sd-jwt) there is the following claim:\r\n\r\n```JSON\r\n\"address\": {\r\n    \"street_address\": \"123 Main St\",\r\n    \"locality\": \"Anytown\",\r\n    \"region\": \"Anystate\",\r\n    \"country\": \"US\"\r\n  }\r\n```\r\nwhich is transformed to\r\n\r\n```\r\n\"address\": \"JFu99NUXPq55f6DFBZ22rMkxMNHayCrfPG0FDsqbyDs\",\r\n```\r\n\r\nWhereas it might be more useful to be transformed into something like that:\r\n\r\n```\r\n\"address\": {\r\n    \"street_address\": \"HASH\",\r\n    \"locality\": \"HASH\",\r\n    \"region\": \"HASH\",\r\n    \"country\": \"HASH\"\r\n  }\r\n```\r\nIn that case users can reveal, for example, only their country.\r\n\r\nSimilarly, when a claim is in the form of an array it may make sense to encode each element of the array separately. For example:\r\n\r\n```\r\n\"liked_movies\"=[\"Armageddon\", \"Titanic\"]\r\n```\r\nCould become something like \r\n\r\n```\r\n\"liked_movies\"=[\"HASH\", \"HASH\"]\r\n```",
      "createdAt": "2022-06-23T20:05:17Z",
      "updatedAt": "2022-07-11T16:52:54Z",
      "closedAt": "2022-07-11T16:52:53Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Ciao,\r\nthis is a very good question and probably this is the answer: `sd_jwt -t structured`\r\n\r\n````\r\nPayload of the SD-JWT:\r\n{\r\n    \"iss\": \"https://example.com/issuer\",\r\n    \"sub_jwk\": {\r\n        \"kty\": \"RSA\",\r\n        \"n\": \"vHdoaUhFEzs1ZCF_qCKw28d0bzNWVSls_AHUOPDFhGIN3neRpxJPmE7KD9m5J_e0y6i0Q4uObl0O-n3G4h3rSt_9Snzuk082JgZHMdTJ2StAKX4PX_9mv0fMdUbWly93q8AzneIMJCwiP8y9uYD5wiDHd2k0P4imtpaGL9dSewbEjakCmZM3nYnHBD5vHAJDrK2Ebr0M_eQOeKvFnzrHUopETrSSsNt4etnLbIaoArVBfsVIpMV7NrRox8PvMxlCy_JESxwfMcdmo0wLq_rv3N1ronsaY-RJ8lTSP5eCwGfXAdT5RnZz8xladGKZ6vLkGzsT5ZCjR3QGseTfvHy3IQ\",\r\n        \"e\": \"AQAB\"\r\n    },\r\n    \"iat\": 1656013213,\r\n    \"exp\": 1656014113,\r\n    \"sd_digests\": {\r\n        \"sub\": \"z4xgEco94diTaSruISPiE7o_wtmcOfnH_8R7X9Pa578\",\r\n        \"given_name\": \"PvU7cWjuHUq6w-i9XFpQZhjT-uprQL3GH3mKsAJl0e0\",\r\n        \"family_name\": \"H-Relr4cEBMlenyK1gvyx16QVpnt4MEclT5tP0aTLFU\",\r\n        \"email\": \"ET2A1JQLF85ZpBulh6UFstGrSfR4B3KM-bjQVllhxqY\",\r\n        \"phone_number\": \"SJnciB2DIRVA5cXBrdKoH6n45788mZyUn2rnv74uMVU\",\r\n        \"address\": {\r\n            \"street_address\": \"O7_Isd6CmZqcSobPVpMgmJwB41hPUHHG8jg5LJ8YzfY\",\r\n            \"locality\": \"w-zTF6ljkQLTvVyp_JNyD3t5Waj-B2vb0AXH1q8OsjI\",\r\n            \"region\": \"nTvoKpGA6YQwEZipVBIM4WVH9KWEnwiqsRjEhrxhQz4\",\r\n            \"country\": \"u-O1yDQqDTTqOgUBSjWilgkMLzg_QOTELMfZrRT5e6k\"\r\n        },\r\n        \"birthdate\": \"TipyoxD43PZJF8ZEmKPrbxMElpFX_M7aBLkUpC-W53o\"\r\n    },\r\n    \"hash_alg\": \"sha-256\"\r\n}\r\n````\r\n\r\n@daniel anyway in the current implementation, usign a `complex` structure, I see this \r\n`\"address\": \"[\\\"M0Jb57t41ubrkSuyrDT3xA\\\", {\\\"locality\\\": \\\"Maxstadt\\\", \\\"postal_code\\\": \\\"12344\\\", \\\"country\\\": \\\"DE\\\", \\\"street_address\\\": \\\"An der Weide 22\\\"}]\"`\r\n\r\nis it a bug of the walker implementation?",
          "createdAt": "2022-06-23T21:41:36Z",
          "updatedAt": "2022-06-23T21:41:36Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Hi Nikos,\r\n\r\nExamples 1 and 2 show exactly the two options from your comment. It is up to the issuer to decide whether to make the full address releasable as one value or to make each of the sub-claims releasable.\r\n\r\nWe don't have an example for arrays yet, but I imagine that what you are showing should be possible as well.\r\n\r\n@peppelinux The complex example seems correct to me - what am I missing?",
          "createdAt": "2022-06-24T09:52:52Z",
          "updatedAt": "2022-06-24T09:52:52Z"
        },
        {
          "author": "nikosft",
          "authorAssociation": "NONE",
          "body": "> Hi Nikos,\r\n> \r\n> Examples 1 and 2 show exactly the two options from your comment. It is up to the issuer to decide whether to make the full address releasable as one value or to make each of the sub-claims releasable.\r\n> \r\n> We don't have an example for arrays yet, but I imagine that what you are showing should be possible as well.\r\n> \r\n> @peppelinux The complex example seems correct to me - what am I missing?\r\n\r\nI missed the Appendix section :) My fault. ",
          "createdAt": "2022-06-24T10:01:09Z",
          "updatedAt": "2022-06-24T10:01:09Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett I was wondering if instead of a single hash for an entire JSON Object we should have, there, a JSON Object with the key:hashes for each address attribute",
          "createdAt": "2022-06-24T10:40:29Z",
          "updatedAt": "2022-06-24T10:40:29Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "@peppelinux Ah, now I see what you mean. In the complex example, address is intentionally a single claim. This is defined by `CLAIMS_STRUCTURE` in `complex_structured.py`. The example shows that the issuer doesn't have to descent into all subclaims and treating address as in the simple example can be a valid choice.",
          "createdAt": "2022-06-24T11:21:25Z",
          "updatedAt": "2022-06-24T11:21:25Z"
        }
      ]
    },
    {
      "number": 74,
      "id": "I_kwDOHTmVzM5MeKsG",
      "title": "Define an content-type for the bas64url encoded artifacts in the HTTP Requests and Responses",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/74",
      "state": "OPEN",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "pending-close"
      ],
      "body": "We should consider to define a content-type and returning this in the HTTP Response, may we imagine something like `application/sd-jwt-svc`?\r\n\r\nand for the request `application/sd-jwt-release`",
      "createdAt": "2022-06-23T21:45:16Z",
      "updatedAt": "2022-12-15T18:22:54Z",
      "closedAt": null,
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "what is the use case when only SD-JWT is returned in HTTP Response, so that this content-type will be used?",
          "createdAt": "2022-08-04T19:59:00Z",
          "updatedAt": "2022-08-04T19:59:14Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "During the issuance of a VC the VCI releases both SD-JWT and SVC, combined in a single artifact, this artifact should have a content-type, then the receiver is able to know what it is and process it in the right way.\r\n\r\nI don't have any use-case with an issuance response with the sd-jwt alone\r\n",
          "createdAt": "2022-08-04T21:55:30Z",
          "updatedAt": "2022-08-04T21:55:30Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "so application/sd-jwt+svc will be used during issuance request and application/sd-jwt-release will be used during presentation request? SGTM\r\n(cc @bc-pi)",
          "createdAt": "2022-09-05T22:27:52Z",
          "updatedAt": "2022-09-05T22:27:52Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "IMHO this is a bit premature and maybe unnecessary. Because I'd imagine these artifacts will most likely be used in places, such as within the JSON content of API messages or HTTP header, where a content/media type isn't relevant. \r\n\r\nIt maybe makes sense for the case of the SD-JWT and SVC being returned together as the HTTP response content. I *still* (as mentioned previously including in Philly) think that the combined SD-JWT and SVC needs to be given it's own proper name and treatment as a first order thing in this draft though. And that should probably happen before defining a media type for it. ['+' has some special meaning in media types](https://www.iana.org/assignments/media-type-structured-suffix/media-type-structured-suffix.xhtml#structured-syntax-suffix) so using it to mean \"and\" with `application/sd-jwt+svc` doesn't really work. ",
          "createdAt": "2022-09-06T16:10:04Z",
          "updatedAt": "2022-09-06T16:10:04Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "When SD-JWT is transported over OpenID4VC, content-type defined by OAuth or OpenID4VC specifications will be used - in those cases, there is no need to define a specific one whether credential format is sd-jwt or not.\r\n\r\nIf there are no other use-cases where sd-jwt is the only content of http req/res, suggest closing this issue",
          "createdAt": "2022-12-15T17:44:17Z",
          "updatedAt": "2022-12-15T17:44:17Z"
        }
      ]
    },
    {
      "number": 75,
      "id": "I_kwDOHTmVzM5MeajP",
      "title": "Github page content",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/75",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "Github page should publish the content of main.md and not the README of the project.\r\ndo you agree?",
      "createdAt": "2022-06-23T22:42:52Z",
      "updatedAt": "2022-06-29T16:38:55Z",
      "closedAt": "2022-06-29T16:32:21Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I'd like to keep it as is. The readme provides guidance and instructions to compile everything, this would be hidden away otherwise. We can make create a more prominent link to main.md though.",
          "createdAt": "2022-06-24T08:45:31Z",
          "updatedAt": "2022-06-24T08:45:31Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "It make sense, ok for the README, the important document is anyway the main.md, a link directly in the README woud be a very good strategy",
          "createdAt": "2022-06-24T08:57:07Z",
          "updatedAt": "2022-06-24T08:57:07Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "let's just add a link to the IETF html https://datatracker.ietf.org/doc/html/draft-fett-selective-disclosure-jwt from README- I can do a PR",
          "createdAt": "2022-06-27T18:44:50Z",
          "updatedAt": "2022-06-27T18:45:05Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "indeed @Sakurann\r\n\r\nI was referring to a preview of the last version built in the main branch and not to the official spec. I may have misunderstood, just to tell you what I mean as continuous deployment in github pages",
          "createdAt": "2022-06-27T21:44:40Z",
          "updatedAt": "2022-06-27T21:45:17Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Why not both? Added a note to the PR!",
          "createdAt": "2022-06-28T07:13:39Z",
          "updatedAt": "2022-06-28T07:13:39Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "ok let's add a link to the latest ver of a main branch of this repo as \"editor's draft\". will do a PR later.",
          "createdAt": "2022-06-29T16:32:21Z",
          "updatedAt": "2022-06-29T16:32:21Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #105 and #97",
          "createdAt": "2022-06-29T16:38:55Z",
          "updatedAt": "2022-06-29T16:38:55Z"
        }
      ]
    },
    {
      "number": 76,
      "id": "I_kwDOHTmVzM5Mgex0",
      "title": "sd-jwt-r as signature algo",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/76",
      "state": "OPEN",
      "author": "dtmcg",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "pending-close"
      ],
      "body": "this is an elegant solution to selective disclosure \ud83d\udc4d \r\nquestion if the sd-jwt-r is modifed to contain the salts and payload value hash's (instead of the values), \r\ncan the process used for generating the sd-jwt-r be considered a signature algo and be applied any JWT?\r\n\r\nif the sd-jwt-r is b64 url encoded as a signature & appended to a plane old JWT \r\nthis would make selective disclosure a function of the jwt alog. no additional objects need to be defined, this should make the solution easier to uptake in existing jwt libs where a supported algo can be added. \r\n\r\nsteps \r\n- sd-jwt-r \"signature\" is generated for a JWT header and payload, as currently defined.\r\n-  - the release contains the payload hashs and salt, then it is signed over as a JWT\r\n- it is b64url encoded and appended as the signature\r\n- when the holder wishes to share the JWT with a redacted payload they can do so by removing payload entities, re encode the json and append the same signature. \r\n",
      "createdAt": "2022-06-24T10:35:57Z",
      "updatedAt": "2022-12-15T17:48:12Z",
      "closedAt": null,
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "What does the issuer sign? \r\nIf I understood correctly, you are swapping SD-JWT and SD-JWT-R as defined in the current draft, so that only claim values are included in SD-JWT-R and salt + hashes in SD-JWT. The issuer would have to sign over SD-JWT-R so that the holder can keep appending it integrity protected and your SD-JWT becomes unsigned SD-JWT-R because that is that the holder modifies when presenting.\r\nNot sure what the new approaches achieves?",
          "createdAt": "2022-06-27T17:25:42Z",
          "updatedAt": "2022-06-27T17:25:42Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I'm not sure I'm following the proposal. Maybe a concrete example would help.",
          "createdAt": "2022-06-28T07:14:31Z",
          "updatedAt": "2022-06-28T07:14:31Z"
        },
        {
          "author": "dtmcg",
          "authorAssociation": "NONE",
          "body": "> What does the issuer sign? If I understood correctly, you are swapping SD-JWT and SD-JWT-R as defined in the current draft, so that only claim values are included in SD-JWT-R and salt + hashes in SD-JWT. The issuer would have to sign over SD-JWT-R so that the holder can keep appending it integrity protected and your SD-JWT becomes unsigned SD-JWT-R because that is that the holder modifies when presenting. Not sure what the new approaches achieves?\r\n\r\nyea mostly, what it achieves is that there are no new data types which need to understood, everything is in JWT with a longer signature, the verification of the jwt signature can be encapsulated into the jwt libs with a new algo handler ",
          "createdAt": "2022-07-19T10:07:36Z",
          "updatedAt": "2022-07-19T10:07:36Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "If the SD-JWT-R contains the hashes and salts and is always released in full, we lose the selective disclosure property. The salts prevent guessing the plain-text values. Without them, it would be trivial, e.g., to guess a birth date (and many other claims as well).",
          "createdAt": "2022-07-19T12:29:15Z",
          "updatedAt": "2022-07-19T12:29:15Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "This might have been obsoleted by the latest changes made to the draft. Daniel, could you please take a look at the latest version and let us know if you are ok closing this issue.",
          "createdAt": "2022-12-15T17:36:30Z",
          "updatedAt": "2022-12-15T17:36:30Z"
        }
      ]
    },
    {
      "number": 77,
      "id": "I_kwDOHTmVzM5MhKcs",
      "title": "Use cnf to represent holder key.",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/77",
      "state": "CLOSED",
      "author": "nikosft",
      "authorAssociation": "NONE",
      "assignees": [
        "Sakurann"
      ],
      "labels": [],
      "body": "Right now the text uses `sub_jwk` to \"include the holder public key\". May be the `cnf` claim, defined in [RFC 7800](https://datatracker.ietf.org/doc/html/rfc7800) is more suitable. Then an SD-JWT could be nicely combined with MTLS of DPoP. ",
      "createdAt": "2022-06-24T13:34:36Z",
      "updatedAt": "2022-07-18T15:56:44Z",
      "closedAt": "2022-07-18T15:56:44Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "+1",
          "createdAt": "2022-06-27T05:01:27Z",
          "updatedAt": "2022-06-27T05:01:27Z"
        }
      ]
    },
    {
      "number": 79,
      "id": "I_kwDOHTmVzM5Mitox",
      "title": "Get rid of _sd claim in spec examples",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/79",
      "state": "CLOSED",
      "author": "christianpaquin",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Regenerate the base64url encoded examples; they still contain the `_sd` claim name\r\n",
      "createdAt": "2022-06-24T20:36:30Z",
      "updatedAt": "2022-07-06T23:03:09Z",
      "closedAt": "2022-07-06T23:02:53Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "We fixed this with the last commit\r\n\r\n",
          "createdAt": "2022-07-06T21:29:33Z",
          "updatedAt": "2022-07-06T21:29:33Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "please see PR #61 ",
          "createdAt": "2022-07-06T23:03:09Z",
          "updatedAt": "2022-07-06T23:03:09Z"
        }
      ]
    },
    {
      "number": 80,
      "id": "I_kwDOHTmVzM5MjNkm",
      "title": "[Privacy] Anonymous claims",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/80",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "### Problem\r\nA user doesn't want to show which attributes he got from an issuer in a VC. The reason behind this is that the user doesn't want to give to a RP any information about the attributes that this RP may ask to him in the future. If a RP has a proof of possession of some claim of a user it may ask these to the user, in the future, producing  some reason, some levers or circumstances, to persuade a need to the user to share his claims to the RP.\r\n\r\nA RP may know that a user is also:\r\n- graduated even without knowing the value contained in the related claim.\r\n- married, without knowing the attributes of the spouse\r\n- and so on ...\r\n\r\nThis means that the only presence of a claim, even if its value is opaque, can determine an information or a proof of truth.\r\nThis scenario is not relevant for a person schema (eIDAS minimum data set) but can be relevant with the issuing of some extendend attestation of the personal attributes.\r\n\r\n### Requirement\r\nA way to make also the claim names anonymous/opaques.\r\n\r\n### Current behaviour\r\nThe **sd_digest** shows how many and which attributes the user may disclose\r\n\r\n````\r\n...\r\n  \"sd_digests\": {\r\n    \"sub\": \"LbnhkOr5oS7KjeUrxezAu8TG0CpWz0jSixy6tffuo04\",\r\n    ...\r\n  }\r\n...\r\n````\r\n### Expected behaviour\r\nAlso the claim names can be obscured, defining an additional structure type to the current three available to date (simple, structured, complex). The result can be the SD-JWT in the example given above\r\n\r\n````\r\n{\r\n  \"iss\": \"https://example.com/issuer\",\r\n  \"sub_jwk\": {\r\n    \"kty\": \"RSA\",\r\n    \"n\": \"pm4bOHBg-oYhAyPWzR56AWX3rUIXp11_ICDkGgS6W3ZWLts-hzwI3x65659kg4hVo9dbGoCJE3ZGF_eaetE30UhBUEgpGwrDrQiJ9zqprmcFfr3qvvkGjtth8Zgl1eM2bJcOwE7PCBHWTKWYs152R7g6Jg2OVph-a8rq-q79MhKG5QoW_mTz10QT_6H4c7PjWG1fjh8hpWNnbP_pv6d1zSwZfc5fl6yVRL0DV0V3lGHKe2Wqf_eNGjBrBLVklDTk8-stX_MWLcR-EGmXAOv0UBWitS_dXJKJu-vXJyw14nHSGuxTIK2hx1pttMft9CsvqimXKeDTU14qQL1eE7ihcw\",\r\n    \"e\": \"AQAB\"\r\n  },\r\n  \"hash_alg\": \"sha-256\",\r\n  \"iat\": 1516239022,\r\n  \"exp\": 1516247022,\r\n  \"sd_digests\": [\r\n    \"LbnhkOr5oS7KjeUrxezAu8TG0CpWz0jSixy6tffuo04\",\r\n    \"fUMdn88aaoyKTHrvZd6AuLmPraGhPJ0zF5r_JhxCVZs\",\r\n    \"9h5vgv6TpFV6GmnPtugiMLl5tHetHeb5X_2cKHjN7cw\",\r\n    \"fPZ92dtYMCN2Nb-2ac_zSH19p4yakUXrZl_-wSgaazA\",\r\n    \"QdSffzNzzd0n60MsSmuiKj6Y6Enk2b-BS-KtEePde5M\",\r\n    \"JFu99NUXPq55f6DFBZ22rMkxMNHayCrfPG0FDsqbyDs\",\r\n    \"Ia1Tc6_Xnt5CJc2LtKcu6Wvqr42glBGGcjGOye8Zf3U\"\r\n  ],\r\n  \"hash_alg\": \"sha-256\"\r\n}\r\n````\r\nThe related SVC could be as follows\r\n````\r\n{\r\n  \"sd_release\": {\r\n    \"LbnhkOr5oS7KjeUrxezAu8TG0CpWz0jSixy6tffuo04\": {\"claim\": \"sub\", \"value\": \"6c5c0a49-b589-431d-bae7-219122a9ec2c\", salt: \"eluV5Og3gSNII8EYnsxA_A\"},\r\n    \"fUMdn88aaoyKTHrvZd6AuLmPraGhPJ0zF5r_JhxCVZs\": {\"claim\": \"given_name\", \"value\": \"John\", \"salt\": \"6Ij7tM-a5iVPGboS5tmvVA\"},\r\n...\r\n  }\r\n}\r\n````\r\n\r\n",
      "createdAt": "2022-06-24T23:05:42Z",
      "updatedAt": "2022-07-14T23:46:51Z",
      "closedAt": "2022-07-14T23:46:51Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Would that work well with structured claims, like the eKYC example?",
          "createdAt": "2022-06-29T19:06:14Z",
          "updatedAt": "2022-06-29T19:06:14Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "You write\r\n\r\n> defining an additional structure type to the current three available to date (simple, structured, complex). \r\n\r\nJust to ensure that we're all on the same page: These three are not defined in the spec and are not intended to be. There is just one type, it just so happens that the 'flat' structure will probably be a common use case. It is therefore used in Example 1. But it is really just a special case of an essentially arbitrary JSON object.",
          "createdAt": "2022-06-29T20:45:19Z",
          "updatedAt": "2022-06-29T20:45:19Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "For the structured claims we can adopt the same approach, exposing only the hashed values pointing to a json object that defines salt, value and claim name\r\n\r\nin other words, the new `sd_digest` array should be flat",
          "createdAt": "2022-07-02T22:47:13Z",
          "updatedAt": "2022-07-03T00:30:05Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "If `sd_digests` is always flat, I assume that the 'structure' is reconstructed from the SD-JWT-R, where the holder uses parts of the structure from the SVC. In this case, how would you prevent a holder from tampering with the structure, e.g., moving a claim to a different part of the structure or creating a whole new structure?",
          "createdAt": "2022-07-04T12:04:21Z",
          "updatedAt": "2022-07-04T12:04:21Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "yes, I wonder on the possibile approaches, please add your thoughts. Regarding the structure:\r\n\r\n1. Abandon JSON Object to embedded JWT. This proposal seems to be [declined here](https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/37). so, let's look forward.\r\n\r\n2. define a rule, in the specs, about how the serialization of the json object must be done. No additional spaces and alphabetical ordering of the entries.\r\n\r\nAFAIK a SD-JWT is signed by a trusted issuer and is tamper proof.\r\nSD-JWT-R is released and optionally signed by a Holder. The Holder in SD-JWT-R uses the sd_digests taken from SD-JWT. The hash_alg is not per claim but is globally defined in the SD-JWT. If I understand well the Holder can't tamper the salt or the digest or the hash alg, for each claim.\r\n\r\nNeeds discussion. Consider me available for the implementation of a PoC to stress out all the possibile weakness of this proposal",
          "createdAt": "2022-07-04T12:21:14Z",
          "updatedAt": "2022-07-04T12:21:44Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I'm not sure if I'm following. I think it would be good if you could show an example of what a structured SD-JWT, SVC and SD-JWT-R would look like.",
          "createdAt": "2022-07-04T12:55:21Z",
          "updatedAt": "2022-07-04T12:55:21Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/106",
          "createdAt": "2022-07-14T23:46:51Z",
          "updatedAt": "2022-07-14T23:46:51Z"
        }
      ]
    },
    {
      "number": 81,
      "id": "I_kwDOHTmVzM5MjPF3",
      "title": "SVC values as strings or JSON Object?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/81",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "actually we have the SVC claims dumped as string, in this way\r\n\r\n````\r\n\"sub\": \"[\\\"eluV5Og3gSNII8EYnsxA_A\\\", \\\"6c5c0a49-b589-431d-bae7-219122a9ec2c\\\"]\",\r\n````\r\n\r\nis there any requirement to have these as strings or this is only an implementation flavour?\r\nWouldn't be better to have the claims values, in this JSON Object, as JSON Object as well?\r\n\r\nthis proposal makes the claims values as follows\r\n\r\n````\r\n\"sub\": [\"eluV5Og3gSNII8EYnsxA_A\", \"6c5c0a49-b589-431d-bae7-219122a9ec2c\"],\r\n````\r\n\r\nThis would reduce the encoding/parsing of the values as JSON Object during validation and also improve the readability, removing the escape characters provided by the json dump operation of the object as string.\r\n\r\n",
      "createdAt": "2022-06-24T23:18:56Z",
      "updatedAt": "2022-06-25T20:23:57Z",
      "closedAt": "2022-06-25T15:24:02Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This is a duplicate of https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/27 - please see the discussion there.",
          "createdAt": "2022-06-25T15:24:02Z",
          "updatedAt": "2022-06-25T15:24:02Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "thank you @danielfett , I completely missed it!",
          "createdAt": "2022-06-25T20:23:56Z",
          "updatedAt": "2022-06-25T20:23:56Z"
        }
      ]
    },
    {
      "number": 84,
      "id": "I_kwDOHTmVzM5Mk0ZN",
      "title": "[Feature] JSON schema for SD-JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/84",
      "state": "OPEN",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Once we resolve [this issue](https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/27) we'll be able to define a validation schema (in draft and in code) for SD-JWT, SVC and SD-JWT-R if you agree\r\n\r\nthe python implementation will adopts pydantic if you agree\r\n\r\nhere some examples\r\nhttps://github.com/italia/spid-cie-oidc-django/blob/main/spid_cie_oidc/entity/schemas/op_metadata.py#L84\r\nhttps://github.com/italia/spid-cie-oidc-django/blob/main/docs/schemas/METADATA.md",
      "createdAt": "2022-06-25T21:32:32Z",
      "updatedAt": "2022-11-23T12:46:17Z",
      "closedAt": null,
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I do like the idea of having a JSON schema, and also generating it from Pydantic seems like a good idea!",
          "createdAt": "2022-06-27T14:39:48Z",
          "updatedAt": "2022-06-27T14:39:48Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok consider it done after we decide the final structure of SD-JWT, SD-JWT-R and SVC payloads\r\n\r\nDo we consider to have an annex with the json-schemas in the draft?\r\nI can do a CLI paramenter to export all the schemas or the selected one to easiy update the annex examples",
          "createdAt": "2022-06-27T21:14:28Z",
          "updatedAt": "2022-06-27T21:14:28Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I think having the schemas in the annex makes sense.",
          "createdAt": "2022-06-30T06:52:39Z",
          "updatedAt": "2022-06-30T06:52:39Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, I can do a proposal in https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61 once we decide the final structure ",
          "createdAt": "2022-07-03T00:27:34Z",
          "updatedAt": "2022-07-03T00:27:34Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We have now once more updated the structure of SD-JWTs. @peppelinux Do you see an advantage of a JSON Schema for the current structure? There is not too much we could define in such a schema, I think.",
          "createdAt": "2022-11-23T12:46:17Z",
          "updatedAt": "2022-11-23T12:46:17Z"
        }
      ]
    },
    {
      "number": 85,
      "id": "I_kwDOHTmVzM5MlNLo",
      "title": "Delineation of the entity and process",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/85",
      "state": "OPEN",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "# Comment: \r\nIn this document, issuer, holder, and verifier are entities and not processes. \r\nObviously, a holder, typically a human being, cannot receive the electronic communication directly, so there needs to be a process that runs on a computing device to receive the communication. \r\nThis distinction is important when discussing privacy as the process may be run by a processor under the control of the holder instead of the holder running it themselves. So, at least, something like holder-agent needs to be introduced. This will be used in my other comments to define security and privacy properties. \r\n\r\n# Proposal: \r\nDefine holder-agent as \u201cprocess that is used by the holder to obtain, store and present the claim sets\u201d\r\n",
      "createdAt": "2022-06-26T06:26:41Z",
      "updatedAt": "2022-10-24T20:11:33Z",
      "closedAt": null,
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "> Holder:  An entity that received SD-JWTs from the Issuer and has control over them.\r\n\r\nJust like the Issuer is not an admin using Issuance infrastructure, and Verifier is not a police officer but a SW app it uses, Holder is meant not as a human being, but a SW application used.",
          "createdAt": "2022-10-24T20:11:32Z",
          "updatedAt": "2022-10-24T20:11:32Z"
        }
      ]
    },
    {
      "number": 86,
      "id": "I_kwDOHTmVzM5MlNOn",
      "title": "Notation clarification",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/86",
      "state": "OPEN",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "# Comment\r\nIs the notation used to build this ABNF? (Looks a bit different). We should state what notation we are using.\r\n\r\n# Proposal\r\nState what notation scheme it is using with reference to the format definition. ",
      "createdAt": "2022-06-26T06:27:43Z",
      "updatedAt": "2022-06-26T06:27:43Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 87,
      "id": "I_kwDOHTmVzM5MlNZR",
      "title": "Security and privacy targets not defined",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/87",
      "state": "OPEN",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "# Comments\r\nFrom the current version of the document, the security and privacy target is not really defined but only a mechanism is defined as \u201cAn SD-JWT, at its core, is a digitally signed document containing hashes over the claim values with unique salts and other metadata. It MUST be digitally signed using the issuer's private key\u201d. Explicitly defining security and privacy goals may be desired. \r\n\r\n# Proposal\r\n \r\nAdd the following at the beginning of \u201cConcept\u201d\r\n\r\nFrom the point of view of the collection limitation, which is one of the main privacy principles, it is desirable to be able to provide only the claims necessary for the verifier to process. In the case of a standard JWT [RFC7519], however, this can only be achieved when the JWT is minted afresh each time and it is not possible to re-use the JWT that is pre-minted for other occasions. For example, a holder may want to re-use the document that contains name, address (municipality, street address, room number), date of birth, and National Identification Number to prove that he is a resident of the municipality so that he can receive the service to the resident. In the case of the normal JWT, this is not possible as the signature is over the entire claim set directly. To achieve it, a JWT that only contains the claim about the municipality needs to be minted. \r\n\r\nSelective disclosure JWT (SD-JWT) aims to address this issue by introducing an indirection: sign the salted hash of the claims instead of the claim set and provide only the claim value of the claim that is required to be processed by the receiver, which assumes the verifier role. This way, while the claim names and the salted hash of the claim values of all the claims contained in the document issued by the issuer is disclosed, the claim values of other claims are not in principle. \r\n\r\nIn this document, a protocol is considered to fulfil the selective disclosure property when it has the following properties: \r\n\r\n## R1. Strong uncoverability\r\n\r\nA protocol is said to achieve strong uncoverability if the adversary acting as the verifier cannot successfully find the claim values that were not intended to be disclosed to the verifier, with a probability significantly better than negligible. \r\n\r\n## R2. Weak uncoverability\r\n\r\nWhile strong uncoverability is desirable, it is not trivial to achieve it. For example, if the original document was a passport that came with the signature of the national authority, then just by looking at the issuer and its signature, it is trivial to find the nationality of the subject in the release. Also, if the existence of the claim name in the release makes it possible for the verifier to guess the value with a probability significantly better than negligible, then it does not satisfy strong uncoverability. \r\n\r\nWith these considerations, weak uncoverability is defined as follows: \r\n\r\nA protocol is said to achieve weak uncoverability if the adversary acting as the verifier cannot successfully find the claim values that were not intended to be disclosed to the verifier from the section of the release that directly corresponds with the claim, with a probability significantly better than negligible.  \r\n\r\n## R3. Release confidentiality\r\n\r\nA protocol is said to achieve release confidentiality if the adversary that can observe the content of all protocol exchanges between the holder agent and the verifier cannot find the claims with a probability significantly better than negligible. \r\n\r\n## R4. Unforgeability\r\n\r\nUnforegeability ensures that an adversary acting as a holder (dishonest holder) cannot forge a release that makes the verifier believe the false value.  \r\n\r\nThe game is defined as follows. Arbitrary entities play the role of issuer and verifier while the adversary plays the role of the holder at each stage of the protocol. A is subjected to the game where sequentially: \r\n\r\n1. Issuer and verifier execute the setup/registration phase (if any). \r\n2. Issuer and adversary playing the role of holder execute the issuance phase in which issuer issues claim set attached to the honest holder C to the adversary. \r\n3. Adversary playing the role of holder and verifier executes the release phase for a policy P that is not satisfied by C. \r\n4. The winning event for the adversary is defined as a successful authentication towards the verifier. \r\n\r\nThe protocol achieves unforgeability if it is unfeasible for the adversary to win with a probability significantly better than negligible. \r\n\r\n## Security and privacy target of SD-JWT and SD-JWT release\r\n\r\nT1. SD-JWT, SD-JWT release with associated protocol execution fulfils R2, R3, and R4. \r\n\r\nNote: See privacy consideration for more discussion.",
      "createdAt": "2022-06-26T06:30:58Z",
      "updatedAt": "2022-07-17T22:14:47Z",
      "closedAt": null,
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Would R1 be covered by this proposal https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/80 ?",
          "createdAt": "2022-06-26T15:25:51Z",
          "updatedAt": "2022-06-26T15:25:51Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@peppelinux I will review it tomorrow. I took a sleeping pill a few minutes ago and probably not good to review it in this state.  (It is 1:17 AM now.) \r\n\r\nBy the way, the current draft does not even fulfil R2 except in special cases where there are large enough value possibilities in the value itself. Is this really what we want? If this is what the community wants, I am ok with it, but my preference is to make it a bit better to require R2. \r\n\r\nIn the privacy consideration, PR #91, I have provided one way of doing it. when the value is supposed to be text. \r\nBasically, making it as follows work. \r\n\r\nSD-CLAIMS = (\r\n    CLAIM-NAME: HASH(SALT | HASH(SALT | CLAIM-VALUE))\r\n)*\r\n\r\n\r\n",
          "createdAt": "2022-06-26T16:29:38Z",
          "updatedAt": "2022-06-26T16:29:38Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "In my understanding, we are not defining a protocol. we are defining an extension to JWT, which is defines as a \"compact, URL-safe means of representing claims to be transferred between two parties\" over the protocol of the choice of those parties.\r\n\r\nWhich is why I am also not comfortable defining properties R1-R4 in this document. For example R3 is out of scope of this specification defining means of representing claims, and is in scope for a specification defining \"protocol exchanges\". We could add text in privacy considerations section guiding implementers to consider these aspects when choosing the \"exchange protocol\". Are notions R1-R4 defined in any other document? is there are a reference we can point to?",
          "createdAt": "2022-06-27T03:12:36Z",
          "updatedAt": "2022-06-27T03:12:36Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Unless you have defined assumptions and security targets, you will not be able to define a data format that is useful. In the case of JWT and JWS, we had ID Token and OpenID Connect as concrete use-case and assumptions. I am quite sure that we do here as well. \r\n\r\nFor example, are we sure that what we have in the draft right now is what we want? If it does not even fulfil weak uncoverability (R2), this is bad. Obviously, if we want weak uncoverability, we need to change the data format. \r\n\r\nFor R3, we could assume the channel is protected. If not, then we probably need to encrypt the data. \r\n\r\nAnd if we cannot show a way to achieve R4, it is pretty useless. The \"way\" is not in the scope of this document, but we need to make sure that there is a way. It may impact the data structure as you can see. \r\n\r\nWe do not want to create a security theatre. We need to create something that is useful and beneficial. ",
          "createdAt": "2022-06-27T10:15:19Z",
          "updatedAt": "2022-06-27T10:45:01Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually, I re-read the draft and it probably does provide R2 for existing claims. Anyway, we need to decide on what we want to achieve and check that it indeed does. ",
          "createdAt": "2022-06-27T10:46:12Z",
          "updatedAt": "2022-06-27T10:48:20Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I like Nat's proposal to define these or similar terms in our document. A lot!\r\n\r\nWhat we claim to achieve in the document needs to be guided by the requirements, and I think we need to discuss this in more details (e.g., hiding claim names).\r\n\r\n@Sakurann \r\n> In my understanding, we are not defining a protocol\r\n\r\nWe very much are, just not a network or web protocol. What is described in Concepts is essentially a protocol, without calling it that way - there are three parties and they exchange some messages. Nat's proposed adversary fits right into this.\r\n\r\nThe assumptions we make about this protocol (participants, adversaries) and the goals we want to achieve must guide our design process. This has been implicit so far, we should make it more explicit.",
          "createdAt": "2022-06-27T11:08:15Z",
          "updatedAt": "2022-06-27T11:08:15Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Would R1 be covered by this proposal #80 ?\r\n\r\nYes, it goes towards it, although not completely. As described in my proposed privacy consideration text, the issuer identifier alone may be enough to break this so we may need to combine it with a group signature scheme or something like that. ",
          "createdAt": "2022-06-27T11:35:45Z",
          "updatedAt": "2022-06-27T11:35:45Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "So in layman terms, what is being proposed in this PR and the issue are the following security goals, correct?\r\n1. SD-JWT does not allow the attacker to find the claim values that were intended to be disclosed to another legitimate verifier.\r\n2. SD-JWT does not allow the attacker to obtain claims even if it has access to all of the protocol exchanges between the holder and the legitimate verifier.\r\n3. SD-JWT does not allow the attacker to create a release that would make verifier to trust claim values not originally signed by the issuer.\r\n \r\n- On 1 and 2, this is where in my mind this cannot be achieved only by using SD-JWT, but requires other \"protocols\". Plain text release contains actual claim values! so to achieve this property, release has to be sent over TLS, or session encrypted BLE/NFC, but we cannot force that in this SD-JWT document itself. and this is where audience restriction and nonces also come into play.\r\n- On 3, I agree with this one. it is achieved by including hashes in SD-JWT, but can be undermined if verifier does not perform hash computation.",
          "createdAt": "2022-07-17T22:08:13Z",
          "updatedAt": "2022-07-17T22:13:07Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree we need to explain security goals of the design choices made in SD-JWT document. Could we first agree on those security goals? \r\n\r\nTo those three outlined in this document above, I would add basic ones:\r\n- Integrity protection - Issuer's signature on SD-JWT\r\n- optionally, when holder binding is present - prevention of cloning of SD-JWT and MITM by signing the release using holder's key\r\n\r\nI am sure I missed something, and maybe this has been meant in current PR text, but I re-read the PR text couple of times and was still left confused..",
          "createdAt": "2022-07-17T22:13:44Z",
          "updatedAt": "2022-07-17T22:13:44Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Once we agree on the security goals, could we also brainstorm fitting terms - \"strong uncoverability\", \"weak uncoverability\", \"release confidentiality\", \"unforgeability\" have not been the most intuitive for me, but maybe that's only me.",
          "createdAt": "2022-07-17T22:14:47Z",
          "updatedAt": "2022-07-17T22:14:47Z"
        }
      ]
    },
    {
      "number": 88,
      "id": "I_kwDOHTmVzM5MlNnb",
      "title": "Is \u201cPrivate key\u201d appropriate term to use? ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/88",
      "state": "OPEN",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "# Comments\r\nPerhaps a signing key is more appropriate if it is a \u201cdigitally signed document\u201d\r\n\r\n# Proposals\r\nReplace \"private key\" with \"signing key\"",
      "createdAt": "2022-06-26T06:36:31Z",
      "updatedAt": "2022-06-27T10:36:15Z",
      "closedAt": null,
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "What is a concern with using `private key`? Both [JWA](https://www.rfc-editor.org/rfc/rfc7518.html) and [JWS](https://datatracker.ietf.org/doc/html/rfc7515) use `private key`.",
          "createdAt": "2022-06-27T04:35:24Z",
          "updatedAt": "2022-06-27T04:35:24Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That was a comment I got from a cryptographer. I can ask them and get back to you. ",
          "createdAt": "2022-06-27T08:58:00Z",
          "updatedAt": "2022-06-27T08:58:00Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So, the rationale was that ISO's cryptography working group (SC27/WG2) has completely moved away from the terminology and decided to use function-based naming (signature key, verification key) instead of secrecy-based naming (private key, public key) as a private key does not necessarily have an ability to sign: you would have to specify a pairing algorithm with the word \"private key\" to make it sure that it is a signature key. \r\n\r\nThen, another cryptographer in the room told me that they prefer the term \"secret key\" that, while not all of them have abilities to sign, is a better name because then the reader/user will know that it has to be kept secret.\r\n\r\nAnother view given was that \"private key\" may imply a world where only Asymmetric and Symmetric crypto is there, which is not the case. \r\n\r\nMy 2c. ",
          "createdAt": "2022-06-27T10:36:15Z",
          "updatedAt": "2022-06-27T10:36:15Z"
        }
      ]
    },
    {
      "number": 89,
      "id": "I_kwDOHTmVzM5MlN0b",
      "title": "Explain what is selective disclosure",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/89",
      "state": "CLOSED",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "# Comments\r\nConcept of selective disclosure is not obvious for many readers so it needs to be explained\r\n\r\n# Proposals\r\nIn the terms and definition, define it as follows\r\n\r\nselective disclosure\r\nprocess of disclosing a subset of claims contained in a claim set\r\n",
      "createdAt": "2022-06-26T06:41:59Z",
      "updatedAt": "2022-10-19T06:33:57Z",
      "closedAt": "2022-10-19T06:33:56Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, this is not the first time I hear this question, it's not banal at all",
          "createdAt": "2022-07-06T21:28:06Z",
          "updatedAt": "2022-07-06T21:28:06Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #147",
          "createdAt": "2022-10-01T04:40:14Z",
          "updatedAt": "2022-10-01T04:40:14Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2022-10-19T06:33:56Z",
          "updatedAt": "2022-10-19T06:33:56Z"
        }
      ]
    },
    {
      "number": 90,
      "id": "I_kwDOHTmVzM5MlN3I",
      "title": "Terms and definition formatting error",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/90",
      "state": "CLOSED",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "# Comments\r\nWhile some of the definitions refer to other terms with numbers, the corresponding term is not numbered. \r\n\r\n# Proposals\r\nAdd numbers and reformat. ",
      "createdAt": "2022-06-26T06:43:09Z",
      "updatedAt": "2022-11-23T12:44:48Z",
      "closedAt": "2022-11-23T12:44:47Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I think we should remove the references with numbers since they are not required anyway.\r\n\r\nThe format we're using for the terms is a somewhat official one, using features provided by xml2rfc. Not sure if it is the best one, though.",
          "createdAt": "2022-06-27T10:56:33Z",
          "updatedAt": "2022-06-27T10:56:33Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Removing the numbers is one way to remove the inconsistency and I am fine with it. It should be one way or another and be consistent. \r\n\r\nHaving said that, the current format is hard to read, unfortunately. \r\n\r\nAlso, I know it is not a norm in IETF, but relying on upper-casing for defined words and keywords is a bad idea, as they often do not translate. So, we should make sure that the defined terms would not appear in the main text in a dictionary meaning regardless of the case. ",
          "createdAt": "2022-06-28T07:43:08Z",
          "updatedAt": "2022-06-28T07:43:08Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We switched to a format that is also used in other published RFCs. The new format has a bit too much wide space, but otherwise works fine.",
          "createdAt": "2022-11-23T12:44:47Z",
          "updatedAt": "2022-11-23T12:44:47Z"
        }
      ]
    },
    {
      "number": 91,
      "id": "I_kwDOHTmVzM5MlPvU",
      "title": "Create decent privacy considerations",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/91",
      "state": "OPEN",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "# Comment\r\nWhile many people attached in this field seem to focus on loosely defined notion of unlinkability, it is not only the factor to be considered. Also, the notion of unlinkability can be more regorously defined as in ISO/IEC 27551 and it is essential to consider in that rigor. \r\n\r\n# Proposal: \r\nUse the following text. \r\n\r\n# Privacy considerations\r\n\r\nPrivacy protection can be considered from the following principles per ISO/IEC 29100.  \r\n\r\n\t1.\tConsent and choice \r\n\t2.\tPurpose legitimacy and specification \r\n\t3.\tCollection limitation \r\n\t4.\tData minimization \r\n\t5.\tUse, retention and disclosure limitation \r\n\t6.\tAccuracy and quality \r\n\t7.\tOpenness, transparency and notice \r\n\t8.\tIndividual participation and access \r\n\t9.\tAccountability \r\n\t10.\tInformation security \r\n\t11.\tPrivacy compliance \r\n\r\nAmong them, this document is concerned directly with 3. Collection limitation and indirectly/partially with 1. Consent and choice, 2. Purpose legitimacy and specification, 6. Accuracy and quality, and 10. Information security.  \r\n\r\nOften talked unlinkability is a subset of 3. Collection limitation as it amounts to providing unintended (by the holder) information such as the fact that the holder visited a verifier to another verifier. \r\n\r\n## Collection limitation\r\n\r\nIn this document, Collection limitation is considered from two aspects. \r\n\r\n1. Uncoverability\r\n2. Unlinkability\r\n\r\n### Uncoverability\r\n\r\nThe concept of uncoverability was discussed in clause 3. In this subclause, this document further discusses it in more detail. \r\n\r\n#### Uncovering the values of non-existent claims from issuer identifier\r\nWhen an issuer issues only one type of SD-JWT, it is often possible to recover some attributes about the holder. \r\nFor example, if the issuer was an authority that only issues driver's licenses in this format, \r\nthen, just by looking at the issuer and the document itself, it can be deterministically recovered that the holder has a driving license. While revealing that the holder has a driving license may not have much privacy impact, \r\nif it was other attributes, it could be quite a privacy-sensitive. \r\n\r\nFor example, suppose the case where the SD-JWT was issued by National Cancer Centre. \r\nThen, by just looking at the issuer, it is possible to deduce that the holder is a cancer patient. \r\nThis may have a fair amount of privacy impact. \r\n\r\nTo mitigate this kind of issue, a group of issuers may elect to use a common issuer identifier and use a group signature scheme instead of an individual signature. \r\n\r\n#### Uncovering the values of non-existent claims from the list of claim names\r\nEven if a group of issuers uses a common issuer identifier, if the claims used are unique from one issuer to another, \r\nthe list of the claim names would be enough to identify the real issuer. In this case, the values of non-existent claims can be uncovered in the same manner as described in the previous subclause. \r\n\r\nTo mitigate this kind of issue, the group of issuers may elect to use a common set of claims and always include them in the SD-JWT. \r\n\r\n#### Uncovering the claim value where the number of possible values is limited\r\n\r\nWhen the number of possible values of the claim is limited, it is trivial to uncover the actual value from the salt and the hash. \r\nIt suffices to iterate over the possible values with the provided hash. \r\n\r\nTo mitigate this kind of issue, the issuer may add a random string to provide entropy at the end of the actual value with an appropriate delimiter in the case the value is a string. For other data types like boolean, some other mechanisms should be considered, e.g., defining a transform from boolean to a string using the entropy string. \r\n\r\n\r\n### Unlinkability\r\n\r\nThe notion of unlinkability cannot be defined precisely without specifying the role assumed by the adversary and the target of the attack. In ISO/IEC 27551, the following notation is used to describe a different kind of unlinkability. \r\n\r\n    (Adversary)\u2013(Target) Unlinkability\r\n\r\nNOTE: The notation is modified to group the Adversary and Target with a parenthesis to make it easier to read when adopted this document's entity name. \r\n\r\nIn the case two parties are colluding as the adversary, the colluding parties are concatenated with \"+\" sign to express it. \r\n\r\n    (Adversar1+Adversary2)\u2013(Target) Unlinkability\r\n\r\nThe same applies to the target. \r\n\r\nWith this notation, ISO/IEC 27551 defines the following eight types of unlinkability. (Entity names are modified to match this document. Corresponding ISO/IEC 27551 unlinkability names are given in braces after it). \r\n\r\n1. (Passive Outsider)\u2013(Holder) Unlinkability [PO-U]\r\n2. (Active Outsider)\u2013(Holder) Unlinkability [AO-U]\r\n3. (Verifier 1 + Verifier 2)\u2013(Holder) Unlinkability [RP+RP'\u2013U]\r\n4. (Issuer)\u2013(Holder) Unlinkability [AP\u2013U]\r\n5. (Verifier)\u2013(Holder) Unlinkability [RP\u2013U]\r\n6. (Issuer)\u2013(Verifier) Unlinkability [AP\u2013RP]\r\n7. (Issuer+Verifier)\u2013(Holder) Unlinkability [AP+RP-U]\r\n8. (Issuer)\u2013(Holder+Verifier) Unlinkability [AP-RP+U]\r\n\r\n#### (Passive Outsider)\u2013(Holder) Unlinkability [PO-U]\r\nWhen all the protocol runs are encrypted, e.g., by TLS, then a Passive Outside cannot see the content of SD-JWT and SD-JWT-R. \r\nIn other words, the protocol runs should be encrypted to achieve this unlinkability. \r\n\r\n####  (Active Outsider)\u2013(Holder) Unlinkability [AO-U]\r\n\r\n(TBD)\r\n\r\n#### (Verifier 1 + Verifier 2)\u2013(Holder) Unlinkability [RP+RP'\u2013U]\r\n\r\n(TBD)\r\n\r\n#### (Issuer)\u2013(Holder) Unlinkability [AP\u2013U]\r\n\r\n(TBD)\r\n\r\n#### (Verifier)\u2013(Holder) Unlinkability [RP\u2013U]\r\n\r\n(TBD)\r\n\r\n#### (Issuer)\u2013(Verifier) Unlinkability [AP\u2013RP]\r\n\r\n(TBD)\r\n\r\n#### (Issuer+Verifier)\u2013(Holder) Unlinkability [AP+RP-U]\r\n\r\n(TBD)\r\n\r\n#### (Issuer)\u2013(Holder+Verifier) Unlinkability [AP-RP+U]\r\n\r\n(TBD)\r\n\r\n## Consent and choice\r\n\r\n(TBD)\r\n\r\n\r\n## Purpose legitimacy and specification\r\n\r\n(TBD)\r\n\r\n\r\n## Accuracy and quality\r\n\r\n(TBD)\r\n\r\n\r\n## Information security\r\n\r\n(TBD)\r\n\r\n",
      "createdAt": "2022-06-26T07:25:03Z",
      "updatedAt": "2022-07-20T13:00:18Z",
      "closedAt": null,
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Nat, can SD-JWT be used to achieve any of the eight types of unlinkability defined in ISO/IEC 27551, regardless of which \"exchange protocol\" is used? If it achieves none, we should just say so. If it achieves one or more of the eight, we should focus on those.",
          "createdAt": "2022-06-27T04:31:48Z",
          "updatedAt": "2022-06-27T04:31:48Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Unlinkability cannot be discussed without referring to exchange protocol. By choosing a suitably protective protocol (including issuance and presentation), we could certainly achieve 1,2,3,5,6, I think, from my gut feeling. They need to be demonstrated and that's why this exercise is useful. \r\n\r\nBTW, SD-JWT is mainly on uncoverability if I understand correctly and thus that should be the main focus of the discussion, while unlinkability tend to draw people's attention more. ",
          "createdAt": "2022-06-27T08:56:43Z",
          "updatedAt": "2022-06-27T08:56:43Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "discussed with Daniel the direction: \"if you have a transport that has this properties, you can get the following privacy projections. Probably with some limitations. Some things are not fulfillable when entities collaborate - ie when RP-RP' or Issuer-RP collaborate.\"\r\n",
          "createdAt": "2022-07-18T15:41:35Z",
          "updatedAt": "2022-07-18T15:41:35Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I re-read 27551 and have the idea how to fill in the gaps. @sakimura would you be ok with me doing a PR on top of your PRs #87 and #93 ?\r\n\r\n\t- PO-U: anti-tracking from passing outsiders\r\n\t\t- All claim values included as plain text in SD-JWT-R\r\n\t\t- ISO recommends careful use of encryption throughout the protocol.\r\n\t- AO-U: anti-tracking from active outsiders\r\n\t\t- Without holder binding, if the AO intercepts both SD-JWT and SVC, can impersonate\r\n\t\t- ISO recommends Carefully using the correct combination of existing encryption and authentication throughout the protocol\r\n\t- RP-U: user's \"anonymous visits\" to an RP\r\n\t\t- same SD-JWT presented to the same R, can be correlated across transactions\r\n\t\t- (no solution in proposed in ISO)\r\n\t- AP-U: AP=IdP in federation and AP=issuer in VC\r\n\t\t- If issuance decoupled from presentation and no issuer call home during revocation, etc. can be achieved?\r\n\t- RP+AP-U: Issuer and RP colludes\r\n\t\t- If issuance decoupled from presentation and no issuer call home during revocation, etc. can be achieved\r\n\t- AP-RP: anti-tracking of RP from AP\r\n\t\t- If issuance decoupled from presentation and no issuer call home during revocation, etc. can be achieved\r\n\t- AP-RP+U: same pair of entities involved in multiple transactions\r\n\t\t- not much you can do when RPs collaborate\r\n\t- RP+RP'-U: anti-tracking of U from a set of colluding RPs\r\n\t\t- ISO says Achieving RP-U leads to achieving RP+RP'-U\r\n\t\t- not much you can do when RPs collaborate\r\n",
          "createdAt": "2022-07-18T15:53:26Z",
          "updatedAt": "2022-07-18T15:53:26Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry, I did not have time to review it till now. I will do so tomorrow\nmorning. (I have another three hours of calls remaining today...)\n\nOn Tue, Jul 19, 2022 at 12:53 AM Kristina ***@***.***> wrote:\n\n> I re-read 27551 and have the idea how to fill in the gaps. @sakimura\n> <https://github.com/sakimura> would you be ok with me doing a PR on top\n> of your PRs #87\n> <https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/87>\n> and #93\n> <https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/93> ?\n>\n> - PO-U: anti-tracking from passing outsiders\n> \t- All claim values included as plain text in SD-JWT-R\n> \t- ISO recommends careful use of encryption throughout the protocol.\n> - AO-U: anti-tracking from active outsiders\n> \t- Without holder binding, if the AO intercepts both SD-JWT and SVC, can impersonate\n> \t- ISO recommends Carefully using the correct combination of existing encryption and authentication throughout the protocol\n> - RP-U: user's \"anonymous visits\" to an RP\n> \t- same SD-JWT presented to the same R, can be correlated across transactions\n> \t- (no solution in proposed in ISO)\n> - AP-U: AP=IdP in federation and AP=issuer in VC\n> \t- If issuance decoupled from presentation and no issuer call home during revocation, etc. can be achieved?\n> - RP+AP-U: Issuer and RP colludes\n> \t- If issuance decoupled from presentation and no issuer call home during revocation, etc. can be achieved\n> - AP-RP: anti-tracking of RP from AP\n> \t- If issuance decoupled from presentation and no issuer call home during revocation, etc. can be achieved\n> - AP-RP+U: same pair of entities involved in multiple transactions\n> \t- not much you can do when RPs collaborate\n> - RP+RP'-U: anti-tracking of U from a set of colluding RPs\n> \t- ISO says Achieving RP-U leads to achieving RP+RP'-U\n> \t- not much you can do when RPs collaborate\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/91#issuecomment-1187671167>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABFENZM2MCJGL6RILJ5HKLVUV4YBANCNFSM5Z3QCP5Q>\n> .\n> You are receiving this because you were mentioned.Message ID:\n> ***@***.***\n> com>\n>\n\n\n-- \nNat Sakimura (=nat)\nChairman, OpenID Foundation\nhttp://nat.sakimura.org/\n@_nat_en\n",
          "createdAt": "2022-07-20T13:00:17Z",
          "updatedAt": "2022-07-20T13:00:17Z"
        }
      ]
    },
    {
      "number": 94,
      "id": "I_kwDOHTmVzM5MlQPE",
      "title": "Should we move normative requirements from \"Security Considerations\" to the main text? ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/94",
      "state": "OPEN",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "# Comments\r\nI know we sometimes do it, but I reckon that it is not a good practice to have normative requirements in the Security and Privacy considerations. \r\n\r\n# Proposal\r\nConsider moving those MUSTs to the main text. ",
      "createdAt": "2022-06-26T07:36:02Z",
      "updatedAt": "2022-06-26T07:36:02Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 95,
      "id": "I_kwDOHTmVzM5MlQaU",
      "title": "Each requirement should be listed as a numbered/labeled paragraph",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/95",
      "state": "OPEN",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pending-close"
      ],
      "body": "# Comments\r\nCurrently, multiple \"MUST\" exists in one paragraph/sentence. They are not labelled either. \r\nMaking each requirement an independent paragraph with a label will make a building of a conformance suite much easier. \r\n\r\n# Proposals\r\nGive mandate to editors to modify the text so that each requirement and recommendation are separated out and labelled. ",
      "createdAt": "2022-06-26T07:39:54Z",
      "updatedAt": "2022-12-15T18:27:42Z",
      "closedAt": null,
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "can you please point us to an example where requirements are labelled within the text? Will do wrt one MUST per paragraph/sentence.",
          "createdAt": "2022-06-27T04:33:18Z",
          "updatedAt": "2022-06-27T04:33:18Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I am not sure of what you are asking, but if you mean examples of specs that are doing the labelling or numbering, FAPI specs are doing like that. We adopted the structure specifically to be efficient in creating a conformance test suite so the conformance suite test number is tied to the spec's clause number. Another example for labelling is ISO/IEC 31700. When you are writing a conformance report, this indeed does make difference. ",
          "createdAt": "2022-06-27T08:49:47Z",
          "updatedAt": "2022-06-27T08:49:47Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "pointer to FAPI helps, that is what I have been asking for, since it is not a common style of writing specs in OpenID or IETF OAuth WG AFAIK.",
          "createdAt": "2022-06-27T15:43:38Z",
          "updatedAt": "2022-06-27T15:43:38Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I can point to the most recent draft of FAPI 2.0 Security profile [here](https://openid.bitbucket.io/fapi/fapi-2_0-security.html). \r\n\r\nHaving said that, if you go to OpenID Foundation's specifications page (there is a link in the top menu bar), you will find more of FAPI specs, of which FAPI 1.0 is a final and well-deployed specification. OpenID Foundation's [specification page](https://openid.net/developers/specs/). ",
          "createdAt": "2022-06-27T18:00:23Z",
          "updatedAt": "2022-06-27T18:00:23Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I'm not sure this will be easy for us to accomplish here, as we need to interleave explanations, examples, and normative requirements. For FAPI this is easier, as it does not need to describe the protocol. ",
          "createdAt": "2022-06-28T07:09:29Z",
          "updatedAt": "2022-06-28T07:09:29Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I understand that but it is doable. It probably is kind of hard to auto-number them, but we could label each requirement and recommendation. ISO 31700 uses something like this, and so does ISO/IEC 15048-2 (AKA Common Criteria). \r\n\r\nFor example, the schematics below would achieve it. \r\n\r\n## Section Header explaining FOO BAR provisions\r\n\r\n### Introduction\r\nSome prose explains what is being explained. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. \r\n\r\nThere can be multiple paragraphs. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n\r\n\r\n**FOO_BAR.1**: Foo MUST verify the signature using the provided verification key of bar.\r\n\r\nNote: Some explanatory notes about FOO_BAR.1 can be added as a note. \r\n\r\nSome further explanation introducing the next provision can be given here. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n\r\n**FOO_BAR.2**: Foo SHOULD verify that the provided value is less than bar registered as the maximum value allowed.\r\n\r\nSome further explanation\r\n\r\n### Examples\r\n\r\nExamples go in here. \r\n",
          "createdAt": "2022-06-28T07:36:52Z",
          "updatedAt": "2022-06-28T07:36:52Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I can point to the most recent draft of FAPI 2.0 Security profile here:\nhttps://openid.bitbucket.io/fapi/fapi-2_0-security.html\n\nHaving said that, if you go to OpenID Foundation's specifications page\n(there is a link in the top menu bar), you will find more of FAPI specs, of\nwhich FAPI 1.0 is a final and well-deployed specification. OpenID\nFoundation's specification page ==> https://openid.net/developers/specs/\n\nOn Tue, Jun 28, 2022 at 1:44 AM Kristina ***@***.***> wrote:\n\n> pointer to FAPI helps, that is what I have been asking for, since it is\n> not a common style of writing specs in OpenID or IETF OAuth WG AFAIK.\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/95#issuecomment-1167515711>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABFENZLKWD6HVZG5B5NLVDVRHK5TANCNFSM5Z3QVFBQ>\n> .\n> You are receiving this because you authored the thread.Message ID:\n> ***@***.***\n> com>\n>\n\n\n-- \nNat Sakimura (=nat)\nChairman, OpenID Foundation\nhttp://nat.sakimura.org/\n@_nat_en\n",
          "createdAt": "2022-10-11T08:19:04Z",
          "updatedAt": "2022-10-11T08:19:04Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "this is an IETF draft and I do not believe there is a requirement to comply with ISO or OIDF style - there are IETF RFCs that mandate certain format and numbering/listing paragraphs is not one of those, if I am correct.",
          "createdAt": "2022-10-24T18:57:46Z",
          "updatedAt": "2022-10-24T18:57:46Z"
        }
      ]
    },
    {
      "number": 96,
      "id": "I_kwDOHTmVzM5MofIM",
      "title": "5.1.1 para 3 (ed) Is just stating \"JSON-encoding\" deterministic enought? ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/96",
      "state": "CLOSED",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "# Comments\r\n\r\nIn 5.1.1 paragraph 3, it is stated \r\n\r\n> hashing over a string that is formed by JSON-encoding an ordered array containing the salt and the claim value\r\n\r\nIs it deterministic enough? For example, would not there be variations regarding whitespace, quoting, Unicode character normalization, etc.? \r\n\r\n# Proposal\r\nIf it is deterministic, I am fine with it, although I would appreciate a note explaining why. If not, we need to fix it :-)",
      "createdAt": "2022-06-27T11:45:15Z",
      "updatedAt": "2022-06-28T07:07:30Z",
      "closedAt": "2022-06-28T07:07:30Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "It is not deterministic, but since the value-to-be-hashed is shared with the verifier in the exact form it was hashed, there is no need for it to be deterministic.\r\n\r\nThis is being discussed in this issue: https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/27 \r\n\r\nKushal has rightfully pointed out that we need to make this more clear in the text: https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/51",
          "createdAt": "2022-06-27T14:36:50Z",
          "updatedAt": "2022-06-27T14:36:50Z"
        },
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ah, ok. So this is a dup of #51. Thanks.\n\nOn Tue, Jun 28, 2022 at 1:59 AM Daniel Fett ***@***.***>\nwrote:\n\n> It is not deterministic, but since the value-to-be-hashed is shared with\n> the verifier in the exact form it was hashed, there is no need for it to be\n> deterministic.\n>\n> This is being discussed in this issue: #27\n> <https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/27>\n>\n> Kushal has rightfully pointed out that we need to make this more clear in\n> the text: #51\n> <https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/51>\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/96#issuecomment-1167435833>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABFEN4ZJEJGGC2LH4BVMGDVRHMXRANCNFSM5Z6GRD7Q>\n> .\n> You are receiving this because you authored the thread.Message ID:\n> ***@***.***\n> com>\n>\n\n\n-- \nNat Sakimura (=nat)\nChairman, OpenID Foundation\nhttp://nat.sakimura.org/\n@_nat_en\n",
          "createdAt": "2022-06-27T17:57:55Z",
          "updatedAt": "2022-06-27T17:57:55Z"
        }
      ]
    },
    {
      "number": 98,
      "id": "I_kwDOHTmVzM5MtKQh",
      "title": "Underscore in front of `sd_release` and `sd_digests` claim names?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/98",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "See the discussion in https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/42",
      "createdAt": "2022-06-28T07:26:02Z",
      "updatedAt": "2022-10-18T16:03:03Z",
      "closedAt": "2022-10-18T16:03:02Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "No please \ud83d\ude04\r\nWhat an underscore would tell more or better regarding the nature of those claim names?",
          "createdAt": "2022-07-06T21:23:33Z",
          "updatedAt": "2022-07-06T21:23:33Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We decided to keep the current claim names with the `sd_` prefix. ",
          "createdAt": "2022-10-18T16:03:02Z",
          "updatedAt": "2022-10-18T16:03:02Z"
        }
      ]
    },
    {
      "number": 99,
      "id": "I_kwDOHTmVzM5MtOxK",
      "title": "Consider using an HMAC instad of a prefix hash",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/99",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [
        "Sakurann"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "Neil wrote on the mailing list:\r\n\r\n> Commitments to claim values are of the form HASH(SALT | CLAIM-VALUE), but this does not necessarily commit the sender to CLAIM-VALUE. In section 7.4, I think you need to say that HASH must be collision resistant - otherwise the user can find two (salt, claim-value) pairs that collide and get the issuer to sign one and then reveal the other pair to the downstream party.\r\n> \r\n> The fact that HASH(SALT | CLAIM-VALUE) is vulnerable to length extension attacks is also troubling, even if I can\u2019t see an immediate attack. But it\u2019s a weird property that Bob, for example, could make a commitment to some extension of one of Alice\u2019s claims without actually knowing her claim value.\r\n> \r\n> You can address both of these issues by instead using a compactly committing PRF [1], such as HMAC- i.e., HMAC-HASH(SALT, CLAIM-VALUE) rather than simple prefix hash.\r\n\r\nI think this make a lot of sense and we should consider using an HMAC instead.\r\n",
      "createdAt": "2022-06-28T07:38:57Z",
      "updatedAt": "2022-10-19T06:33:17Z",
      "closedAt": "2022-10-19T06:33:17Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "+1\r\ncc: @christianpaquin ",
          "createdAt": "2022-06-29T01:16:40Z",
          "updatedAt": "2022-06-29T01:16:40Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "The spec shouldn't mandate or preclude a digest derivation function (DDF), but should require (MUST use) a collision- and preimage-resistant cryptographically secure one. Depending on the target application, a profile or deployment can mandate a particular DDF by requiring a particular hash function, KDF, or a more complex process (e.g., using truncated digests from strong hash functions to save space).",
          "createdAt": "2022-06-29T19:36:36Z",
          "updatedAt": "2022-06-29T19:36:36Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "cc @bifurcation ",
          "createdAt": "2022-08-25T23:05:12Z",
          "updatedAt": "2022-08-25T23:05:12Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "yes, the issuer of SD-JWT can deny hashing the claims, but the issuer cannot deny signing over the whole SD-JWT. Or is the concern that the malicious verifier can change the claim values and regenerate the hashes, but issuer will not have the means to prove that it originally generated different hashes?",
          "createdAt": "2022-08-25T23:46:49Z",
          "updatedAt": "2022-08-25T23:46:49Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "(on further discussion with @christianpaquin)\r\n\r\nThe spec should not mandate a particular digest derivation function, just like JWS does not mandate a signature algorithm. A random value used to generate a digest can be a salt (hash algorithm) or a key (HMAC). The former can be useful when there are constrains in space (e.g., to fit in a QR code), while the latter is more complex, but can help protect against brute-force attacks\r\n\r\nWe think it is a good idea to make it more explicit in the text that both approaches are allowed (currently it could be read as if HMAC is not).",
          "createdAt": "2022-08-27T05:09:00Z",
          "updatedAt": "2022-08-27T05:09:00Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "> The former can be useful when there are constrains in space (e.g., to fit in a QR code), while the latter is more complex, but can help protect against brute-force attacks\r\n\r\nTo clarify, all approaches must protect against brute-force attacks on the undisclosed attributes. If your target SD-JWT size is limited (e.g., in a QR embedding scenario), then you can sacrifice the salt and digest lengths by using a more expensive digest derivation function (e.g., PBKDF2-HMAC-SHA256-310000), as prototyped in [this project](https://github.com/christianpaquin/selective-disclosure). (Note: shorter digest lengths means truncating secure hash functions, not using weaker shorter ones.)",
          "createdAt": "2022-08-29T13:31:59Z",
          "updatedAt": "2022-08-29T13:31:59Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #149 \r\n\r\nSection 7.5 already states `For the security of this scheme, the hash function is required to be preimage and collision resistant`.\r\n\r\n",
          "createdAt": "2022-10-04T06:16:31Z",
          "updatedAt": "2022-10-04T06:16:31Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2022-10-19T06:33:17Z",
          "updatedAt": "2022-10-19T06:33:17Z"
        }
      ]
    },
    {
      "number": 100,
      "id": "I_kwDOHTmVzM5MtO6w",
      "title": "Improve selection of hash algorithms",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/100",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Neil's comment on the mailing list:\r\n\r\n> It doesn\u2019t seem great to say that you can use any hash algorithm in the IANA registry, but then to rule out half of them as being not suitable in the security considerations - this list may go out of date as other hash algorithms are broken. Is it possible to update the IANA registry with a Recommended Y/N column? Also, shake128 and shake256 are not collision-resistant hash functions, they are XOFs that can produce any length of output - e.g. shake128 with a 32-bit output would not be collision-resistant and thus would not be at all suitable for this usage. Given these considerations, I might be tempted to create a new IANA registry, or perhaps just pick one good hash function. (Or maybe just use the same hash algorithm as the signature?)",
      "createdAt": "2022-06-28T07:39:29Z",
      "updatedAt": "2022-10-24T18:47:03Z",
      "closedAt": "2022-10-24T18:47:03Z",
      "comments": [
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "Is it better to specify a subset directly in the spec? \r\n\r\n> (Or maybe just use the same hash algorithm as the signature?)\r\n\r\nThis makes logical sense. Still doesn't get around the need for hash function specificity to ensure the attributes have sufficient cryptographic strength.",
          "createdAt": "2022-09-22T14:27:17Z",
          "updatedAt": "2022-09-22T14:27:17Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "mainly PR #149 ",
          "createdAt": "2022-10-24T18:47:03Z",
          "updatedAt": "2022-10-24T18:47:03Z"
        }
      ]
    },
    {
      "number": 102,
      "id": "I_kwDOHTmVzM5MtjZV",
      "title": "Example 1 includes twice the claim \"hash_alg\"",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/102",
      "state": "CLOSED",
      "author": "nikosft",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Example 1. in Section 5.2 includes `\"hash_alg\": \"sha-256\"` in line 6 and again in the last line. ",
      "createdAt": "2022-06-28T08:49:35Z",
      "updatedAt": "2022-06-29T01:12:59Z",
      "closedAt": "2022-06-29T01:12:59Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "thank you! resolved in PR #104 \r\nno changes in codes since the test code is generating SD-JWTs with only one hash_alg",
          "createdAt": "2022-06-29T01:12:59Z",
          "updatedAt": "2022-06-29T01:12:59Z"
        }
      ]
    },
    {
      "number": 103,
      "id": "I_kwDOHTmVzM5MvsjQ",
      "title": "Give advice on processing SD-JWTs for verifiers",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/103",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "In this discussion, the question around merging SD claims with non-SD claims came up: \r\nhttps://mailarchive.ietf.org/arch/msg/oauth/4jtL1vXWsYcyU99Gfe7n8jcONoA/\r\n\r\nI think it makes sense to discuss this in the spec, whether it ends up as normative text or not.",
      "createdAt": "2022-06-28T16:04:05Z",
      "updatedAt": "2022-10-17T07:30:50Z",
      "closedAt": "2022-10-17T07:30:50Z",
      "comments": [
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "FYI, that's what I currently do as a placeholder behavior in [my implementation](https://github.com/christianpaquin/sd-jwt), the disclosed claims are added in a `disclosedClaims` object in the returned JWT. It might not be right thing to do in all situations, but I think it would be useful to at least define one mechanism to do something like that (perhaps even encoding the claims directly in the JWT root). A verifier('s policy) only expects a JWT with some claims; it might not care if they are encoded directly or selectively disclosed from a hash based encoding (or derived from another claim in more advanced systems). Surfacing the calculated claims in the JWT offers the ability for libraries to perform this transformation, and leaving the RP's business logic close to intact.",
          "createdAt": "2022-07-01T19:32:26Z",
          "updatedAt": "2022-07-01T19:32:26Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "from the mailing list, how \"merging\" might look like in the vc-data-model example (also related to Issue #59)\r\n\r\nTake an SD-JWT as below:\r\n```\r\n     \"vc\": {\r\n       \"@context\": [\r\n         \"https://www.w3.org/2018/credentials/v1\",\r\n         \"https://www.w3.org/2018/credentials/examples/v1\"\r\n       ],\r\n       \"type\": [\r\n         \"VerifiableCredential\",\r\n         \"UniversityDegreeCredential\"\r\n       ]\r\n     },\r\n     \"sd_digests\": {\r\n       \"vc\":{\r\n           \"given_name\": \"fUMdn88aaoyKTHrvZd6AuLmPraGhPJ0zF5r_JhxCVZs\",\r\n           \"family_name\": \"9h5vgv6TpFV6GmnPtugiMLl5tHetHeb5X_2cKHjN7cw\",\r\n           \"birthdate\": \"fvLCnDm3r4VSYcBF3pIlXP4ulEoHuHOfG_YmFZEuxpQ\"\r\n        }\r\n     }\r\n   }\r\n```\r\nAnd merge it into\r\n```\r\n     \"vc\": {\r\n       \"@context\": [\r\n         \"https://www.w3.org/2018/credentials/v1\",\r\n         \"https://www.w3.org/2018/credentials/examples/v1\"\r\n       ],\r\n       \"type\": [\r\n         \"VerifiableCredential\",\r\n         \"UniversityDegreeCredential\"\r\n       ],\r\n         \"given_name\": \"fUMdn88aaoyKTHrvZd6AuLmPraGhPJ0zF5r_JhxCVZs\",\r\n         \"family_name\": \"9h5vgv6TpFV6GmnPtugiMLl5tHetHeb5X_2cKHjN7cw\",\r\n         \"birthdate\": \"fvLCnDm3r4VSYcBF3pIlXP4ulEoHuHOfG_YmFZEuxpQ\"\r\n     }\r\n```",
          "createdAt": "2022-07-05T22:40:59Z",
          "updatedAt": "2022-07-05T22:40:59Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "@Sakurann I'd prefer the adoption of the claim `sd_digests` \r\n\r\nthe hashed claims values are not the claims values and I think it's important giving, in a way or another, a clear type for each value, the container sd_digests and sd_releases do a good job for that.\r\n\r\nin alternative I wonder if we may adopt a VC scheme defining a new type like\r\n\r\n````\r\n       \"type\": [\r\n         \"VerifiableSelectiveDisclosableCredential\",\r\n         \"UniversityDegreeCredential\"\r\n       ],\r\n````\r\nand VerifiableSelectiveDisclosableCredential comes with its own schema where the digests would have their place without any other specification\r\n",
          "createdAt": "2022-07-23T23:40:28Z",
          "updatedAt": "2022-07-23T23:41:06Z"
        },
        {
          "author": "Muthurajj",
          "authorAssociation": "NONE",
          "body": "We have to merge the context and type in the claims ?\r\n\r\n",
          "createdAt": "2022-09-20T04:49:08Z",
          "updatedAt": "2022-09-20T04:49:08Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "no, there is only one `@context` and `type` claims in this SD-JWT-VC/SD-JWT-R",
          "createdAt": "2022-09-20T05:16:00Z",
          "updatedAt": "2022-09-20T05:16:00Z"
        },
        {
          "author": "Muthurajj",
          "authorAssociation": "NONE",
          "body": "I have mailed you doubts regarding VC can you pls respond ?",
          "createdAt": "2022-09-20T05:43:05Z",
          "updatedAt": "2022-09-20T05:43:05Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "sorry, don't think we've received them?",
          "createdAt": "2022-09-20T06:53:01Z",
          "updatedAt": "2022-09-20T06:53:01Z"
        },
        {
          "author": "Muthurajj",
          "authorAssociation": "NONE",
          "body": "1.Can we generate VC using SD-JWT?\r\n\r\n2.What is the verification_process and sub that you have mentioned in example yml file\r\n\r\n3.If we can generate VC what should we change?\r\n\r\n4. How to generate context and type like you have mentioned in document example 4?\r\n\r\n5.Openid connect include in this library?",
          "createdAt": "2022-09-20T07:20:05Z",
          "updatedAt": "2022-09-20T07:20:05Z"
        },
        {
          "author": "Muthurajj",
          "authorAssociation": "NONE",
          "body": "I am new to python pls help me\r\n",
          "createdAt": "2022-09-21T05:08:03Z",
          "updatedAt": "2022-09-21T05:08:03Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "1.Can we generate VC using SD-JWT?\r\n-> yes. we are in the process of defining how\r\n\r\n2.What is the verification_process and sub that you have mentioned in example yml file\r\n-> verification_process might be ekyc-ida claim, `sub` is a registered JWT claim\r\n\r\n3.If we can generate VC what should we change?\r\n-> being discussed, please see example 4 for the current approach\r\n\r\n4. How to generate context and type like you have mentioned in document example 4?\r\n-> that is a vc-data-model issue\r\n\r\n6.Openid connect include in this library?\r\n-> not sure I understand the question, but no, SD-JWT code has nothing to do with OIDC\r\n\r\nCan you please open a new issue with your questions? this issue is not a place to discuss it.",
          "createdAt": "2022-09-21T17:41:36Z",
          "updatedAt": "2022-09-21T17:41:36Z"
        },
        {
          "author": "Muthurajj",
          "authorAssociation": "NONE",
          "body": "thank you so much \r\n\r\n> 1.Can we generate VC using SD-JWT? -> yes. we are in the process of defining how\r\n> \r\n> 2.What is the verification_process and sub that you have mentioned in example yml file -> verification_process might be ekyc-ida claim, `sub` is a registered JWT claim\r\n> \r\n> 3.If we can generate VC what should we change? -> being discussed, please see example 4 for the current approach\r\n> \r\n> 4. How to generate context and type like you have mentioned in document example 4?\r\n>    -> that is a vc-data-model issue\r\n> \r\n> 6.Openid connect include in this library? -> not sure I understand the question, but no, SD-JWT code has nothing to do with OIDC\r\n> \r\n> Can you please open a new issue with your questions? this issue is not a place to discuss it.\r\n\r\n",
          "createdAt": "2022-09-22T08:44:54Z",
          "updatedAt": "2022-09-22T08:44:54Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Addressed in PR #146 ",
          "createdAt": "2022-09-30T10:10:56Z",
          "updatedAt": "2022-09-30T10:10:56Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "The PR has been merged.",
          "createdAt": "2022-10-17T07:30:50Z",
          "updatedAt": "2022-10-17T07:30:50Z"
        }
      ]
    },
    {
      "number": 106,
      "id": "I_kwDOHTmVzM5M13xZ",
      "title": "Proposal for blinding claim names",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/106",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [
        "danielfett"
      ],
      "labels": [],
      "body": "I would like to propose a very simple and easy-to-implement approach to blinding claim names.\r\n\r\nThe idea is to add a new, optional, third element to the SD releases. Let's assume that there is a privacy-sensitive claims, that might show up in the SD-JWT, say `secret_club_membership_number`, and its mere existence should not be revealed to verifiers.\r\n\r\nThe issuer could create an SD-JWT as follows:\r\n\r\n```json\r\n{\r\n  \"iss\": \"https://example.com/issuer\",\r\n  \"iat\": 1516239022,\r\n  \"exp\": 1516247022,\r\n  \"sd_digests\": {\r\n    \"sub\": \"LbnhkOr5oS7KjeUrxezAu8TG0CpWz0jSixy6tffuo04\",\r\n    \"given_name\": \"fUMdn88aaoyKTHrvZd6AuLmPraGhPJ0zF5r_JhxCVZs\",\r\n    \"family_name\": \"9h5vgv6TpFV6GmnPtugiMLl5tHetHeb5X_2cKHjN7cw\",\r\n    \"G1fjh8hpWNnb\": \"Ia1Tc6_Xnt5CJc2LtKcu6Wvqr42glBGGcjGOye8Zf3U\"\r\n  },\r\n  \"hash_alg\": \"sha-256\"\r\n}\r\n```\r\n\r\nThe issuer has replaced the claim name `secret_club_membership_number` with an arbitrary string. \r\n\r\nOnly the SVC (and later the SD-JWT-R) would release the claim name:\r\n\r\n```json\r\n{\r\n  \"sd_release\": {\r\n    \"sub\": \"[\\\"eluV5Og3gSNII8EYnsxA_A\\\", \\\"6c5c0a49-b589-431d-bae7-219122a9ec2c\\\"]\",\r\n    \"given_name\": \"[\\\"6Ij7tM-a5iVPGboS5tmvVA\\\", \\\"John\\\"]\",\r\n    \"family_name\": \"[\\\"eI8ZWm9QnKPpNPeNenHdhQ\\\", \\\"Doe\\\"]\",\r\n    \"G1fjh8hpWNnb\": \"[\\\"G02NSrQfjFXQ7Io09syajA\\\", \\\"1940-01-01\\\", \\\"secret_club_membership_number\\\"]\"\r\n  }\r\n}\r\n```\r\nNotice the third element in the release JSON. It signals to the verifier that the real claim name is different from how the claim was called in the SD-JWT.\r\n\r\nThe verifier would, during the verification step, replace the claim name `G1fjh8hpWNnb` with the now learned correct claim name `secret_club_membership_number`.\r\n\r\nInstead of random string as claim names, anything that is unique works:\r\n \r\n * just numbering all hidden claims: `secret_claim_1`, `secret_claim_1`,...\r\n * random numbers, string, etc.\r\n * also real-looking but fake claim names: `public_club_membership_number`, `birthdate` (security by obscurity?!)\r\n\r\nThis does not hide the number of secret claim names or that a claim at a certain position in a maybe more complex structure exists. @peppelinux proposal on anonymous claims seems to cover that, but if I understand it correctly, it is less fine-grained: https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/80\r\n\r\nWDYAT? @b---c @Sakurann ",
      "createdAt": "2022-06-29T19:23:16Z",
      "updatedAt": "2022-10-17T08:01:06Z",
      "closedAt": "2022-10-17T08:01:06Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "My note about #80 is not correct. The approach is actually quite similar. Besides the differences in the encoding (discussed in more detail in https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/27), the differences are that in my approach, the SD-JWT structure stays untouched (but may not contain claim names that are not actually the real claim names), whereas in @peppelinux approach, the SD-JWT is changed to contain an array of blinded claim digests.",
          "createdAt": "2022-06-30T08:45:16Z",
          "updatedAt": "2022-06-30T08:45:16Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "There is a wide variety of interesting features once you go down the privacy route: hiding the claim names, event hiding the issuer itself (which can be argued as sensitive as the claim name in some scenarios). I however think that issuers with a well-known public and fixed issuance schema is a far more common scenario, for which our proposed selective disclosure feature offers a simple and useful solution. I can also imagine scenarios as described in this issue, but I'm not sure how realistic/common they are. I'd be in favor of keeping the spec simple, and explore this extra features in subsequent specs or profiles.\r\n\r\nA solution to the hidden claim name (and value!) is to issue multiple credentials containing various subsets of the available claims. It then helps to know how commonly one is expected to hide the existence of such claims to balance the pain of managing multiple credentials vs. holding one with this selective disclosure feature.",
          "createdAt": "2022-07-01T19:25:39Z",
          "updatedAt": "2022-07-01T19:25:39Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "NONE",
          "body": "I don't really know but suspect that one or just a few claim names being hidden still reveals quite a lot. The optionality is nice from some perspectives but also adds complexity in participants having to be able to handle both cases. I honestly don't know if obscuring the claim names is needed or legitimately valuable. But my sense is that it should be an all or nothing thing.  ",
          "createdAt": "2022-07-01T21:15:17Z",
          "updatedAt": "2022-07-01T21:15:17Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "I really appreciated this proposal Daniel\r\n\r\nHowever, from an implementer point of view it's heavy to handle both cases\r\n\r\nI vote for obscuring the claim names and start working on this new schema\r\n\r\nI wont show to a rp how many claims I have in my VCs, even if these are linked to well knows schemas we know that the same claims can be adopetd by many schemas, at the same time\r\n",
          "createdAt": "2022-07-01T22:15:41Z",
          "updatedAt": "2022-07-01T22:15:41Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Considering what we discussed during the last meeting, we can consider [this issue](https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/80) not of interest anymore and this current proposal can be the only one that may be developed.\r\n\r\nI believe that for an extendibility of SD-JWT in the future we should consider to abandon the dumped array, eg: `\"[\\\"G02NSrQfjFXQ7Io09syajA\\\", \\\"1940-01-01\\\", \\\"secret_club_membership_number\\\"]\"` in favor of a dumped json object like this\r\n\r\n`\"{\\\"salt\\\":\\\"G02NSrQfjFXQ7Io09syajA\\\", \\\"value\\\":\\\"1940-01-01\\\", \\\"name\\\":\\\"secret_club_membership_number\\\"}\"`\r\n\r\n\r\n",
          "createdAt": "2022-07-11T21:11:14Z",
          "updatedAt": "2022-07-11T21:11:14Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Thanks @peppelinux, that's what I did (with one-letter keys for brevity).\r\n\r\nSee https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/124 for my draft code on this issue (no spec text yet).\r\n\r\nThese are the examples now in the spec - please review:\r\n\r\n\r\n## Example 5: Some Blinded Claims\r\n\r\nUser claims:\r\n\r\n{#example-simple_structured_some_blinded-user_claims}\r\n```json\r\n{\r\n  \"sub\": \"6c5c0a49-b589-431d-bae7-219122a9ec2c\",\r\n  \"given_name\": \"John\",\r\n  \"family_name\": \"Doe\",\r\n  \"email\": \"johndoe@example.com\",\r\n  \"phone_number\": \"+1-202-555-0101\",\r\n  \"secret_club_membership_no\": \"23\",\r\n  \"other_secret_club_membership_no\": \"42\",\r\n  \"address\": {\r\n    \"street_address\": \"123 Main St\",\r\n    \"locality\": \"Anytown\",\r\n    \"region\": \"Anystate\",\r\n    \"country\": \"US\"\r\n  },\r\n  \"birthdate\": \"1940-01-01\"\r\n}\r\n```\r\n\r\n\r\nSD-JWT Payload:\r\n\r\n{#example-simple_structured_some_blinded-sd_jwt_payload}\r\n```json\r\n{\r\n  \"iss\": \"https://example.com/issuer\",\r\n  \"sub_jwk\": {\r\n    \"kty\": \"RSA\",\r\n    \"n\": \"pm4bOHBg-oYhAyPWzR56AWX3rUIXp11_ICDkGgS6W3ZWLts-hzwI3x65659kg4hVo9dbGoCJE3ZGF_eaetE30UhBUEgpGwrDrQiJ9zqprmcFfr3qvvkGjtth8Zgl1eM2bJcOwE7PCBHWTKWYs152R7g6Jg2OVph-a8rq-q79MhKG5QoW_mTz10QT_6H4c7PjWG1fjh8hpWNnbP_pv6d1zSwZfc5fl6yVRL0DV0V3lGHKe2Wqf_eNGjBrBLVklDTk8-stX_MWLcR-EGmXAOv0UBWitS_dXJKJu-vXJyw14nHSGuxTIK2hx1pttMft9CsvqimXKeDTU14qQL1eE7ihcw\",\r\n    \"e\": \"AQAB\"\r\n  },\r\n  \"iat\": 1516239022,\r\n  \"exp\": 1516247022,\r\n  \"hash_alg\": \"sha-256\",\r\n  \"sd_digests\": {\r\n    \"sub\": \"OMdwkk2HPuiInPypWUWMxot1Y2tStGsLuIcDMjKdXMU\",\r\n    \"given_name\": \"AfKKH4a0IZki8MFDythFaFS_Xqzn-wRvAMfiy_VjYpE\",\r\n    \"family_name\": \"eUmXmry32JiK_76xMasagkAQQsmSVdW57Ajk18riSF0\",\r\n    \"email\": \"-Rcr4fDyjwlM_itcMxoQZCE1QAEwyLJcibEpH114KiE\",\r\n    \"phone_number\": \"Jv2nw0C1wP5ASutYNAxrWEnaDRIpiF0eTUAkUOp8F6Y\",\r\n    \"h:5a2W0_NrlEZzfqmk_7Pq-w\": \"gc8VzGTImYRXzP6j7q5RomXt2C_wtsOJ3hAHJdTuEIY\",\r\n    \"other_secret_club_membership_no\": \"IirAwgN-MubteYvJ4fmq04p9PnpRTf7hqg0dzSWRboA\",\r\n    \"address\": {\r\n      \"street_address\": \"o_yJIdfhKuKVzOF7i1EuakzC5ghd99CX8_nitm-DsRM\",\r\n      \"locality\": \"ogNqsvRqK0-ZPZc9C3Z4_6APvywm-lrm0oF2gcVtl_4\",\r\n      \"region\": \"8kFihRLSkEheK0zbEsQ3zKXt8csE6OXJE_jv3032BbU\",\r\n      \"country\": \"11IMcoA18LrFSpbysx-uqe7N3I3-QZKwCJqYeQuOUY4\"\r\n    },\r\n    \"birthdate\": \"PNtcyxm0Q5PyiBuG4f6eAbK6h4tF2FffwG3xqknZ_5A\"\r\n  }\r\n}\r\n```\r\n\r\nSVC:\r\n\r\n\r\n{#example-simple_structured_some_blinded-svc_payload}\r\n```json\r\n{\r\n  \"sd_release\": {\r\n    \"sub\": \"{\\\"s\\\": \\\"2GLC42sKQveCfGfryNRN9w\\\", \\\"v\\\": \\\"6c5c0a49-b589-431d-bae7-219122a9ec2c\\\"}\",\r\n    \"given_name\": \"{\\\"s\\\": \\\"6Ij7tM-a5iVPGboS5tmvVA\\\", \\\"v\\\": \\\"John\\\"}\",\r\n    \"family_name\": \"{\\\"s\\\": \\\"Qg_O64zqAxe412a108iroA\\\", \\\"v\\\": \\\"Doe\\\"}\",\r\n    \"email\": \"{\\\"s\\\": \\\"Pc33JM2LchcU_lHggv_ufQ\\\", \\\"v\\\": \\\"johndoe@example.com\\\"}\",\r\n    \"phone_number\": \"{\\\"s\\\": \\\"lklxF5jMYlGTPUovMNIvCA\\\", \\\"v\\\": \\\"+1-202-555-0101\\\"}\",\r\n    \"h:5a2W0_NrlEZzfqmk_7Pq-w\": \"{\\\"s\\\": \\\"5bPs1IquZNa0hkaFzzzZNw\\\", \\\"v\\\": \\\"23\\\", \\\"n\\\": \\\"secret_club_membership_no\\\"}\",\r\n    \"other_secret_club_membership_no\": \"{\\\"s\\\": \\\"y1sVU5wdfJahVdgwPgS7RQ\\\", \\\"v\\\": \\\"42\\\"}\",\r\n    \"address\": {\r\n      \"street_address\": \"{\\\"s\\\": \\\"C9GSoujviJquEgYfojCb1A\\\", \\\"v\\\": \\\"123 Main St\\\"}\",\r\n      \"locality\": \"{\\\"s\\\": \\\"H3o1uswP760Fi2yeGdVCEQ\\\", \\\"v\\\": \\\"Anytown\\\"}\",\r\n      \"region\": \"{\\\"s\\\": \\\"M0Jb57t41ubrkSuyrDT3xA\\\", \\\"v\\\": \\\"Anystate\\\"}\",\r\n      \"country\": \"{\\\"s\\\": \\\"eK5o5pHfgupPpltj1qhAJw\\\", \\\"v\\\": \\\"US\\\"}\"\r\n    },\r\n    \"birthdate\": \"{\\\"s\\\": \\\"WpxJrFuX8uSi2p4ht09jvw\\\", \\\"v\\\": \\\"1940-01-01\\\"}\"\r\n  }\r\n}\r\n```\r\n\r\nSD-JWT-R:\r\n\r\n{#example-simple_structured_some_blinded-sd_jwt_release_payload}\r\n```json\r\n{\r\n  \"nonce\": \"XZOUco1u_gEPknxS78sWWg\",\r\n  \"aud\": \"https://example.com/verifier\",\r\n  \"sd_release\": {\r\n    \"given_name\": \"{\\\"s\\\": \\\"6Ij7tM-a5iVPGboS5tmvVA\\\", \\\"v\\\": \\\"John\\\"}\",\r\n    \"family_name\": \"{\\\"s\\\": \\\"Qg_O64zqAxe412a108iroA\\\", \\\"v\\\": \\\"Doe\\\"}\",\r\n    \"birthdate\": \"{\\\"s\\\": \\\"WpxJrFuX8uSi2p4ht09jvw\\\", \\\"v\\\": \\\"1940-01-01\\\"}\",\r\n    \"address\": {\r\n      \"region\": \"{\\\"s\\\": \\\"M0Jb57t41ubrkSuyrDT3xA\\\", \\\"v\\\": \\\"Anystate\\\"}\",\r\n      \"country\": \"{\\\"s\\\": \\\"eK5o5pHfgupPpltj1qhAJw\\\", \\\"v\\\": \\\"US\\\"}\"\r\n    },\r\n    \"h:5a2W0_NrlEZzfqmk_7Pq-w\": \"{\\\"s\\\": \\\"5bPs1IquZNa0hkaFzzzZNw\\\", \\\"v\\\": \\\"23\\\", \\\"n\\\": \\\"secret_club_membership_no\\\"}\"\r\n  }\r\n}\r\n```\r\n\r\nVerified Released Claims:\r\n\r\n\r\n{#example-simple_structured_some_blinded-verified_contents}\r\n```json\r\n{\r\n  \"given_name\": \"John\",\r\n  \"family_name\": \"Doe\",\r\n  \"birthdate\": \"1940-01-01\",\r\n  \"address\": {\r\n    \"region\": \"Anystate\",\r\n    \"country\": \"US\"\r\n  },\r\n  \"secret_club_membership_no\": \"23\"\r\n}\r\n```\r\n## Example 6: All Claim Names Blinded\r\n\r\nUser claims:\r\n\r\n{#example-simple_structured_all_blinded-user_claims}\r\n```json\r\n{\r\n  \"sub\": \"6c5c0a49-b589-431d-bae7-219122a9ec2c\",\r\n  \"given_name\": \"John\",\r\n  \"family_name\": \"Doe\",\r\n  \"email\": \"johndoe@example.com\",\r\n  \"phone_number\": \"+1-202-555-0101\",\r\n  \"secret_club_membership_no\": \"23\",\r\n  \"address\": {\r\n    \"street_address\": \"123 Main St\",\r\n    \"locality\": \"Anytown\",\r\n    \"region\": \"Anystate\",\r\n    \"country\": \"US\"\r\n  },\r\n  \"birthdate\": \"1940-01-01\"\r\n}\r\n```\r\n\r\n\r\nSD-JWT Payload:\r\n\r\n{#example-simple_structured_all_blinded-sd_jwt_payload}\r\n```json\r\n{\r\n  \"iss\": \"https://example.com/issuer\",\r\n  \"sub_jwk\": {\r\n    \"kty\": \"RSA\",\r\n    \"n\": \"pm4bOHBg-oYhAyPWzR56AWX3rUIXp11_ICDkGgS6W3ZWLts-hzwI3x65659kg4hVo9dbGoCJE3ZGF_eaetE30UhBUEgpGwrDrQiJ9zqprmcFfr3qvvkGjtth8Zgl1eM2bJcOwE7PCBHWTKWYs152R7g6Jg2OVph-a8rq-q79MhKG5QoW_mTz10QT_6H4c7PjWG1fjh8hpWNnbP_pv6d1zSwZfc5fl6yVRL0DV0V3lGHKe2Wqf_eNGjBrBLVklDTk8-stX_MWLcR-EGmXAOv0UBWitS_dXJKJu-vXJyw14nHSGuxTIK2hx1pttMft9CsvqimXKeDTU14qQL1eE7ihcw\",\r\n    \"e\": \"AQAB\"\r\n  },\r\n  \"iat\": 1516239022,\r\n  \"exp\": 1516247022,\r\n  \"hash_alg\": \"sha-256\",\r\n  \"sd_digests\": {\r\n    \"h:eluV5Og3gSNII8EYnsxA_A\": \"bvPLqohL5ROmk2UsuNffH8C1wx9o-ipm-G4SkUwrpAE\",\r\n    \"h:eI8ZWm9QnKPpNPeNenHdhQ\": \"pCtjs0hC2Klhsnpe7BIqnGAsXlyXXC-lAEgX6isoYVM\",\r\n    \"h:AJx-095VPrpTtN4QMOqROA\": \"HS1Ht-bTrXsSTw9JdcHIbTFDkEI_IY52_cmzUgxWZ0k\",\r\n    \"h:G02NSrQfjFXQ7Io09syajA\": \"M2YQ_j8OPPBK3ZLhPPP6_AdSa2-rug2urYjgk_ML_QM\",\r\n    \"h:nPuoQnkRFq3BIeAm7AnXFA\": \"-Brzrp2cs-8nLs7rQI89YJ76s3PrbVe3n_5hlYCy1cE\",\r\n    \"h:5a2W0_NrlEZzfqmk_7Pq-w\": \"gc8VzGTImYRXzP6j7q5RomXt2C_wtsOJ3hAHJdTuEIY\",\r\n    \"address\": {\r\n      \"h:HbQ4X8srVW3QDxnIJdqyOA\": \"39o5dKobVi8c0dLpg4sjd7zW18UONRra0ht9mgu4hec\",\r\n      \"h:kx5kF17V-x0JmwUx9vgvtw\": \"wqueD5ABJ3bTyGSckOMpzI7YUvcCO2l-40vi6JMYsYY\",\r\n      \"h:OBKlTVlvLg-AdwqYGbP8ZA\": \"S11dsdFN97YtrA2o3yZ0eBbf1zn-izejORU-fyMtynI\",\r\n      \"h:DsmtKNgpV4dAHpjrcaosAw\": \"-0XEQHSNzMu244QaOpLmPD3JkdZN8SrqbEQ4VDufu9A\"\r\n    },\r\n    \"h:j7ADdb0UVb0Li0ciPcP0ew\": \"X_v1hrkQIH_0LBM8TncMMTBzYN9UJc8FmJRda7yfY8g\"\r\n  }\r\n}\r\n```\r\n\r\nSVC:\r\n\r\n\r\n{#example-simple_structured_all_blinded-svc_payload}\r\n```json\r\n{\r\n  \"sd_release\": {\r\n    \"h:eluV5Og3gSNII8EYnsxA_A\": \"{\\\"s\\\": \\\"2GLC42sKQveCfGfryNRN9w\\\", \\\"v\\\": \\\"6c5c0a49-b589-431d-bae7-219122a9ec2c\\\", \\\"n\\\": \\\"sub\\\"}\",\r\n    \"h:eI8ZWm9QnKPpNPeNenHdhQ\": \"{\\\"s\\\": \\\"6Ij7tM-a5iVPGboS5tmvVA\\\", \\\"v\\\": \\\"John\\\", \\\"n\\\": \\\"given_name\\\"}\",\r\n    \"h:AJx-095VPrpTtN4QMOqROA\": \"{\\\"s\\\": \\\"Qg_O64zqAxe412a108iroA\\\", \\\"v\\\": \\\"Doe\\\", \\\"n\\\": \\\"family_name\\\"}\",\r\n    \"h:G02NSrQfjFXQ7Io09syajA\": \"{\\\"s\\\": \\\"Pc33JM2LchcU_lHggv_ufQ\\\", \\\"v\\\": \\\"johndoe@example.com\\\", \\\"n\\\": \\\"email\\\"}\",\r\n    \"h:nPuoQnkRFq3BIeAm7AnXFA\": \"{\\\"s\\\": \\\"lklxF5jMYlGTPUovMNIvCA\\\", \\\"v\\\": \\\"+1-202-555-0101\\\", \\\"n\\\": \\\"phone_number\\\"}\",\r\n    \"h:5a2W0_NrlEZzfqmk_7Pq-w\": \"{\\\"s\\\": \\\"5bPs1IquZNa0hkaFzzzZNw\\\", \\\"v\\\": \\\"23\\\", \\\"n\\\": \\\"secret_club_membership_no\\\"}\",\r\n    \"address\": {\r\n      \"h:HbQ4X8srVW3QDxnIJdqyOA\": \"{\\\"s\\\": \\\"y1sVU5wdfJahVdgwPgS7RQ\\\", \\\"v\\\": \\\"123 Main St\\\", \\\"n\\\": \\\"street_address\\\"}\",\r\n      \"h:kx5kF17V-x0JmwUx9vgvtw\": \"{\\\"s\\\": \\\"C9GSoujviJquEgYfojCb1A\\\", \\\"v\\\": \\\"Anytown\\\", \\\"n\\\": \\\"locality\\\"}\",\r\n      \"h:OBKlTVlvLg-AdwqYGbP8ZA\": \"{\\\"s\\\": \\\"H3o1uswP760Fi2yeGdVCEQ\\\", \\\"v\\\": \\\"Anystate\\\", \\\"n\\\": \\\"region\\\"}\",\r\n      \"h:DsmtKNgpV4dAHpjrcaosAw\": \"{\\\"s\\\": \\\"M0Jb57t41ubrkSuyrDT3xA\\\", \\\"v\\\": \\\"US\\\", \\\"n\\\": \\\"country\\\"}\"\r\n    },\r\n    \"h:j7ADdb0UVb0Li0ciPcP0ew\": \"{\\\"s\\\": \\\"eK5o5pHfgupPpltj1qhAJw\\\", \\\"v\\\": \\\"1940-01-01\\\", \\\"n\\\": \\\"birthdate\\\"}\"\r\n  }\r\n}\r\n```\r\n\r\nSD-JWT-R:\r\n\r\n{#example-simple_structured_all_blinded-sd_jwt_release_payload}\r\n```json\r\n{\r\n  \"nonce\": \"XZOUco1u_gEPknxS78sWWg\",\r\n  \"aud\": \"https://example.com/verifier\",\r\n  \"sd_release\": {\r\n    \"h:eI8ZWm9QnKPpNPeNenHdhQ\": \"{\\\"s\\\": \\\"6Ij7tM-a5iVPGboS5tmvVA\\\", \\\"v\\\": \\\"John\\\", \\\"n\\\": \\\"given_name\\\"}\",\r\n    \"h:AJx-095VPrpTtN4QMOqROA\": \"{\\\"s\\\": \\\"Qg_O64zqAxe412a108iroA\\\", \\\"v\\\": \\\"Doe\\\", \\\"n\\\": \\\"family_name\\\"}\",\r\n    \"h:j7ADdb0UVb0Li0ciPcP0ew\": \"{\\\"s\\\": \\\"eK5o5pHfgupPpltj1qhAJw\\\", \\\"v\\\": \\\"1940-01-01\\\", \\\"n\\\": \\\"birthdate\\\"}\",\r\n    \"address\": {\r\n      \"h:OBKlTVlvLg-AdwqYGbP8ZA\": \"{\\\"s\\\": \\\"H3o1uswP760Fi2yeGdVCEQ\\\", \\\"v\\\": \\\"Anystate\\\", \\\"n\\\": \\\"region\\\"}\",\r\n      \"h:DsmtKNgpV4dAHpjrcaosAw\": \"{\\\"s\\\": \\\"M0Jb57t41ubrkSuyrDT3xA\\\", \\\"v\\\": \\\"US\\\", \\\"n\\\": \\\"country\\\"}\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nVerified Released Claims:\r\n\r\n\r\n{#example-simple_structured_all_blinded-verified_contents}\r\n```json\r\n{\r\n  \"given_name\": \"John\",\r\n  \"family_name\": \"Doe\",\r\n  \"birthdate\": \"1940-01-01\",\r\n  \"address\": {\r\n    \"region\": \"Anystate\",\r\n    \"country\": \"US\"\r\n  }\r\n}\r\n```\r\n\r\n\r\n",
          "createdAt": "2022-07-14T09:36:44Z",
          "updatedAt": "2022-07-14T09:36:44Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett you got it in the super right way!\r\ndefinitively my hero",
          "createdAt": "2022-07-14T23:46:16Z",
          "updatedAt": "2022-07-14T23:46:16Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "change it to \"using the same salt to generate a digest of a claim name when blinded\"",
          "createdAt": "2022-09-29T15:46:17Z",
          "updatedAt": "2022-09-29T15:46:17Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "The choice for names for blinded claim names is discussed in Issue #132. Since the rest has been merged, I'll close this issue.",
          "createdAt": "2022-10-17T08:01:06Z",
          "updatedAt": "2022-10-17T08:01:06Z"
        }
      ]
    },
    {
      "number": 110,
      "id": "I_kwDOHTmVzM5NXvce",
      "title": "[WIP] SD-JWT as a W3C VC-DATA-MODEL",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/110",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Current proposal is here: https://datatracker.ietf.org/doc/html/draft-fett-oauth-selective-disclosure-jwt-01#appendix-A.3\r\nAlternative proposal is here: https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/103#issuecomment-1175572062\r\n\r\nGuess yet another alternative would be:\r\n```\r\n     \"vc\": {\r\n       \"@context\": [\r\n         \"https://www.w3.org/2018/credentials/v1\",\r\n         \"https://www.w3.org/2018/credentials/examples/v1\"\r\n       ],\r\n       \"type\": [\r\n         \"VerifiableCredential\",\r\n         \"UniversityDegreeCredential\"\r\n       ],\r\n     \"credentialSubject\": {\r\n      \"given_name\": \"Alice\",\r\n      \"sd_digests\": {\r\n         \"given_name\": \"fUMdn88aaoyKTHrvZd6AuLmPraGhPJ0zF5r_JhxCVZs\",\r\n         \"family_name\": \"9h5vgv6TpFV6GmnPtugiMLl5tHetHeb5X_2cKHjN7cw\",\r\n         \"birthdate\": \"fvLCnDm3r4VSYcBF3pIlXP4ulEoHuHOfG_YmFZEuxpQ\"\r\n        }\r\n     }\r\n  }\r\n```",
      "createdAt": "2022-07-07T20:39:31Z",
      "updatedAt": "2022-11-23T12:42:07Z",
      "closedAt": "2022-11-23T12:42:06Z",
      "comments": [
        {
          "author": "nikosft",
          "authorAssociation": "NONE",
          "body": "I believe that this alternative violates the definition of SD-JWT in [section 4.1](https://datatracker.ietf.org/doc/html/draft-fett-oauth-selective-disclosure-jwt-01#section-4.1). In particular, I uderestand that this alternative is not of the form \r\n\r\n```\r\nSD-JWT-DOC = (METADATA, SD-CLAIMS)\r\n```",
          "createdAt": "2022-07-18T18:43:50Z",
          "updatedAt": "2022-07-18T18:43:50Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "yes, the idea was to add a sentence in the SD-JWT specification that profiles of the specification MAY define other places to include `sd_digests`.",
          "createdAt": "2022-07-19T06:03:50Z",
          "updatedAt": "2022-07-19T06:03:50Z"
        },
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "Just a thought: Should this issue turn in to an extension spec `vc-sd-jwt` to separate out the responsibility of mapping something foundational (sd-jwt) to something intermediate (vc datamodel)? ",
          "createdAt": "2022-09-22T14:41:06Z",
          "updatedAt": "2022-09-22T14:41:34Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #162",
          "createdAt": "2022-10-24T18:56:07Z",
          "updatedAt": "2022-10-24T18:56:07Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This has been superseded by the changes we made in PR #174. An example for a W3C VC is contained in the appendix.",
          "createdAt": "2022-11-23T12:42:06Z",
          "updatedAt": "2022-11-23T12:42:06Z"
        }
      ]
    },
    {
      "number": 111,
      "id": "I_kwDOHTmVzM5NYNsv",
      "title": "defining the SD-JWT claims family namespace",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/111",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "in this draft we found as well defined the claims `sd_digests` and `sd_release` and then the claim `hash_alg`.\r\nIf this hash_alg belongs only to SD-JWT it wound't be better to rename it `sd_hash_alg`?",
      "createdAt": "2022-07-07T22:32:19Z",
      "updatedAt": "2022-07-14T20:56:40Z",
      "closedAt": "2022-07-14T20:56:40Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I would be fine with `sd_hash_alg`. It makes sense since the hash is used for the core functionality of the SD-JWT.",
          "createdAt": "2022-07-11T10:34:59Z",
          "updatedAt": "2022-07-11T10:34:59Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Me or someone of us on a PR for this?\r\n@Sakurann your comments are important",
          "createdAt": "2022-07-11T12:34:43Z",
          "updatedAt": "2022-07-11T12:34:43Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I am ok with `sd_hash_alg`, though it is already only present in SD-JWT.",
          "createdAt": "2022-07-12T01:14:44Z",
          "updatedAt": "2022-07-12T01:14:44Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, if you agree we may merge https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/115 and then https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/117 and a PR with this change will follow ",
          "createdAt": "2022-07-12T06:30:17Z",
          "updatedAt": "2022-07-12T06:30:17Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "did it here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/123",
          "createdAt": "2022-07-14T00:10:37Z",
          "updatedAt": "2022-07-14T00:10:37Z"
        }
      ]
    },
    {
      "number": 114,
      "id": "I_kwDOHTmVzM5NgpAf",
      "title": "[SD-JWT aggregation during Presentation] SD-JWT-R for multiple SD-JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/114",
      "state": "OPEN",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "discuss-first"
      ],
      "body": "An Holder has two different JWT VCs issued by two different issuers and wants to disclose part of the attributes contained in these VCs in in a single Presentation.\r\n\r\nUsing Combined Presentation only a single SD-JWT with a single SD-JWT-R can be submitted (if I'm not mistaken).\r\n\r\nCan we consider a way to redefine the Combined Presentation to allow multiple SD-JWTs to be submitted with a single SD-JWT-R? ",
      "createdAt": "2022-07-11T08:49:42Z",
      "updatedAt": "2022-10-13T17:17:09Z",
      "closedAt": null,
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This is a relevant use case, but may also be addressed by the protocol used for presentation. @tlodderstedt What's your opinion on this?",
          "createdAt": "2022-07-11T10:32:24Z",
          "updatedAt": "2022-07-11T10:32:24Z"
        },
        {
          "author": "tlodderstedt",
          "authorAssociation": "NONE",
          "body": "There are protocols for carrying multiple presentation in the same exchange, so this use case can be solved on the protocol level.\r\n\r\nHowever, I think there is some beauty in combined presentations. Combined presentation reduces the number of signatures to be created and checked for holder authentication/cryptographic holder binding and also requires the verifier to check audience restriction and transaction integrity once. On the other hand, it requires binding of both (or all) credentials to the same key material. So it seems to be an attractive feature, I cannot assess how relevant it is in practice and whether it causes complexity in other places.  ",
          "createdAt": "2022-07-11T11:10:28Z",
          "updatedAt": "2022-07-11T11:10:28Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "good points. Starting from a pure creative approach I'd think to a nesting strategy, The SD-JWT would be enveloped in an aggregated JWT defined for this\r\n\r\n````\r\n{\r\n  \"alg\": none, \r\n  \"typ\": \"sd+jwt-combined\"\r\n}\r\n.\r\n{\r\n  \"sd_credentials\": [\r\n    ... one or more SD-JWTs here ...\r\n  ],\r\n  \"sd_release\": JWT-SD-R\r\n}\r\n````\r\n\r\nThis approach would propose again the nested approach and I'm wondering if it's time to abandon the Combined Presentation structure based on appendend jwts, separated by period, with a typed JWT object",
          "createdAt": "2022-07-11T12:33:07Z",
          "updatedAt": "2022-07-11T12:33:07Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I would make it simpler, <SD-JWT-1 (3 parts)>.<...>.<SD-JWT-n>.<SD-JWT-R> without any nesting.\r\nso the key would be to define how to include sd_digests for multiple SD-JWTs in one SD-JWT-R\r\nand it should be made clear that this is the case when SD-JWT-R is not signed - ie, there is no holder binding; or, SD-JWT-R is signed but SD-JWTs are bound to the same holder key.",
          "createdAt": "2022-07-12T07:55:04Z",
          "updatedAt": "2022-07-12T07:55:04Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "@Sakurann if I understand well your proposal:\r\n\r\n> I would make it simpler, <SD-JWT-1 (3 parts)>.<...>.. without any nesting.\r\n\r\nthis is referred to the Combined Presentation content-type. Can we define a content-type for this, like `application/sd-jwt-combined`? This would enable an auto consistent validation scheme in a HTTP response\r\n\r\n> so the key would be to define how to include sd_digests for multiple SD-JWTs in one SD-JWT-R\r\n\r\nIf I'm not mistaken this point is in contraddiction with the first point. If I understand well this is a proposal to make a SD-JWT-R an envelope for one or many SD-JWT and these should be nested in a SD-JWT-R object. If this is right I really like this proposal, the new structure of a SD-JWT-R would be something like the following example\r\n\r\n````\r\n{\r\n  \"alg\": \"RS256\", \r\n  \"kid\": \"ANBKFdOKy5t-1m2Km4X22n7DEj553yjGJVdprbOjR52\",\r\n  \"x5c\": [ \u2026 ],\r\n  \"typ\": \"sd-jwt+release\"\r\n}\r\n.\r\n{\r\n    \"iss\": \"uid of a EUIDW, obfuscated or not\",\r\n    \"sub\": \"uid of the user, public or pairwised or randomic to enable anonymous auth on top of LoA high with any disclosed claims\",\r\n    \"nonce\": \"tmi-LjQDh2qnl2wC9XJCqw\",\r\n    \"aud\": \"https://example.com/verifier\",\r\n    \"sd_joses\": [ ... one or more SD-JWT ...],\r\n    \"sd_release\": {\r\n        \"given_name\": \"[\\\"lklxF5jMYlGTPUovMNIvCA\\\", \\\"John\\\"]\",\r\n        \"family_name\": \"[\\\"nPuoQnkRFq3BIeAm7AnXFA\\\", \\\"Doe\\\"]\"\r\n    }\r\n}\r\n````",
          "createdAt": "2022-07-12T09:50:08Z",
          "updatedAt": "2022-07-13T18:28:21Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "What I meant by the second comment was multiple \u201csd_release\u201ds in on SD-JWT-R. Which is sent separately from SD-JWTs. \u201csd_digests\u201d was a typo, sorry",
          "createdAt": "2022-07-12T23:38:41Z",
          "updatedAt": "2022-07-12T23:38:41Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> What I meant by the second comment was multiple \u201csd_release\u201ds in on SD-JWT-R. Which is sent separately from SD-JWTs. \u201csd_digests\u201d was a typo, sorry\r\n\r\nyes, a SD-JWT-R which contains multiple SD-JWT in an array, I think that's the key!",
          "createdAt": "2022-07-13T18:29:45Z",
          "updatedAt": "2022-07-13T18:29:45Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "but than we would need to include `id` or something inside `sd_release`s so that the verifier knows which release to use with which  SD-JWT...\r\n\r\n+ for a general direction I am not suggesting to put SD-JWTs inside Releases, Release is still sent separately.. Though SD-JWT-VCs will be inside SD-JWT-R-VPs",
          "createdAt": "2022-07-24T18:39:17Z",
          "updatedAt": "2022-07-24T18:39:17Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, my concern Is that implementing a parser of multiple concatenated jwts can be a pain and this solution sounds more like a compromise\r\n\r\nConsider that a jwt could be encrypted, having more thank 3strings separated by a period char\r\n\r\nFor this reason I'd prefer a jwt that contains One or more sd-jwt, in an intellegibile claim, and a single sd_release\r\n\r\n",
          "createdAt": "2022-07-24T20:48:17Z",
          "updatedAt": "2022-07-24T20:49:02Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> Consider that a jwt could be encrypted, having more thank 3strings separated by a period char\r\n\r\nThat's why I proposed to introduce a generic character to separate concatenated JWT in the very beginning of this work. As I mentioned in the chat, `~` might be a good choice. We would also use this to concatenate the SD-JWT and SVC when they are sent to the client.\r\n\r\nThis avoids the overhead that nested JWTs bring, which can be important for QR code and NFC use cases.",
          "createdAt": "2022-07-25T11:21:26Z",
          "updatedAt": "2022-07-25T11:21:26Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> That's why I proposed to introduce a generic character to separate concatenated JWT in the very beginning of this work. As I mentioned in the chat, `~` might be a good choice. We would also use this to concatenate the SD-JWT and SVC when they are sent to the client.\r\n\r\nit sounds resonable to me!",
          "createdAt": "2022-07-25T12:27:49Z",
          "updatedAt": "2022-07-25T12:27:49Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "So the options we have now are:\r\n1. concatenating multiple SD-JWTs using `~` + Release\r\n2. including multiple SD-JWTs inside a JWT + Release\r\n3. including SD-JWTs inside a Release\r\n\r\nwhat is the benefit of 2 over 3?",
          "createdAt": "2022-09-05T06:50:36Z",
          "updatedAt": "2022-09-05T06:50:36Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "also, if SD-JWT-R contains multiple `sd_releases`, we need to introduce the mapping which `sd_release` maps to which SD-JWT, a feature provided `presentation_submission` in Presentation Exchange v.2.0. \r\n\r\nI wonder how we draw a line with what is defined in a transport protocol - for example, OpenID4VP mandates using `presentation_submission` for this purpose, so if another mechanism is chosen by SD-JWT, what would implementers do?",
          "createdAt": "2022-09-05T06:54:06Z",
          "updatedAt": "2022-09-05T06:54:06Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "I'd be for including one or more SD-JWTs inside a Release in JWT format, because this create a consolidated presentation with a specific content-type.\r\n\r\nthe mapping could be made using jti if present in the SD-JWT, anyway even without a mapping an implementation will iterate all the values to find witch matches, \r\n\r\nissuing a jti in SD-JWT would confirm the adoption of a BCP and not a mandatory requirement",
          "createdAt": "2022-09-05T09:07:03Z",
          "updatedAt": "2022-09-05T09:07:03Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "editors want to propose switching to including base64url encoded SD-JWTs in the SD-JWT-Release (vc-data-model approach), from the current approach of passing Release and SD-JWT as separate objects.\r\nthis would be extensible to allow multiple SD-JWTs in one Release without going into specifying how to do multiple release\r\nwe agree that defying multiple releases itself is out of scop efor sd-jwt but the current approach prevents that altogether because the verifier will receive as many release obejects as sd-jwts and will not know which one's which.",
          "createdAt": "2022-10-04T17:08:03Z",
          "updatedAt": "2022-10-04T17:08:03Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "potentially add a text that this spec defines one way to send an SD-JWT-R, but profiles can define alternative ways (like in VC-DATA-MODEL)",
          "createdAt": "2022-10-13T17:17:09Z",
          "updatedAt": "2022-10-13T17:17:09Z"
        }
      ]
    },
    {
      "number": 118,
      "id": "I_kwDOHTmVzM5Nkbc-",
      "title": "[Tracking resistance] Nesting an encrypted SD-JWT combined presentation",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/118",
      "state": "OPEN",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Considering that SD-JWT makes selective disclosure and many privacy features possibile in the data format level, without any costraint in the transport protocol adopted during the exchange, I was wondering how to make a combined presentation unique and not trackable in environment where that can be the risk of eavesdropping (NFC, BT, QR codes, any other link of proximity ...)\r\n\r\nAdopting a JWE and also a nesting strategy to a combined presentation can make the SD-JWT completely not trackable during the transport.\r\n\r\nat first sight nesting a combined presentation in an encrypted JWT that MUST changes at every exchange makes the need to create an envelope JWT. It's a trade off, I know but an envelope JWT can cover also other aspects, like this\r\n\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/114\r\n",
      "createdAt": "2022-07-12T00:45:00Z",
      "updatedAt": "2022-11-23T17:41:00Z",
      "closedAt": null,
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Could you elaborate a little more what is being suggested? Is the idea to put multiple SD-JWT-Rs and SD-JWTs inside one JWE as claims?\r\n{header}.{\r\n\"SD-JWT-R-1\": <...>\r\n\"SD-JWT-1\": <...>\r\n\"SD-JWT-2\": <...>\r\n}.{signature}\r\nkind of?",
          "createdAt": "2022-07-12T16:45:43Z",
          "updatedAt": "2022-07-12T16:45:56Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, on each submission the JWE will be different (due to jti, iat) making it non trackable.\r\nan adversary can't track how many time an SD-JWT have been submitted to an endpoint or on the wire, because the JWE will be alway unique\r\n\r\nthe proposal of a nested structure for a combined presentation have been proposed here\r\n\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/114#issuecomment-1181556044\r\n",
          "createdAt": "2022-07-12T23:10:58Z",
          "updatedAt": "2022-07-12T23:10:58Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> Could you elaborate a little more what is being suggested? Is the idea to put multiple SD-JWT-Rs and SD-JWTs inside one JWE as claims? {header}.{ \"SD-JWT-R-1\": <...> \"SD-JWT-1\": <...> \"SD-JWT-2\": <...> }.{signature} kind of?\r\n\r\na simple array in a claim defined for this scope\r\n\r\n````\r\n\"sd_joses\": [ ... one or more SD-JWT ...],\r\n````",
          "createdAt": "2022-07-13T08:48:53Z",
          "updatedAt": "2022-07-13T18:28:03Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We discussed this at the IETF meeting in London. I think it is clear that we will not support multiple SD-JWTs in the format itself, as this opens up a whole new layer. For example, we would need to talk about relationships between SD-JWTs, what happens if only single credentials fail validation, etc.; all of this is not strictly related to the credential format and is much better handled on the transport protocol layer, e.g., OIDC4VC.",
          "createdAt": "2022-11-23T12:40:27Z",
          "updatedAt": "2022-11-23T12:40:27Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I actually have a new perspective. I think instead of defining holder binding JWT as a separate object we should define it as an envelope for SD-JWT+ Disclosures. This will have better alignment with VCs and will address multiple SD-JWTs request from Giuseppe. now that disclosures are separate from the holder binding JWT, I think it makes more sense to go in this direction",
          "createdAt": "2022-11-23T17:41:00Z",
          "updatedAt": "2022-11-23T17:41:00Z"
        }
      ]
    },
    {
      "number": 125,
      "id": "I_kwDOHTmVzM5NwY6i",
      "title": "Change title to 'Selective Disclosure for JWT'",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/125",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "needs-PR"
      ],
      "body": "> It's subtle but this isn't exactly a type of JWT and the title 'Selective Disclosure JWT' is potentially misleading. The document is more defining some structures/claims for use in JWT that can (help) accomplish selective disclosure.  'Selective Disclosure with JWT' or 'Selective Disclosure for JWT' might be more appropriate.\r\n\r\n_Originally posted by @bc-pi in https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/60#issuecomment-1167782800_\r\n\r\nI have come across this also while preparing the presentation for IETF. I think 'Selective Disclosure for JWT' would make more sense than the current title.",
      "createdAt": "2022-07-14T09:42:13Z",
      "updatedAt": "2022-08-04T19:48:03Z",
      "closedAt": "2022-08-04T19:48:03Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "NONE",
          "body": "Concur (obviously). ",
          "createdAt": "2022-07-14T22:53:59Z",
          "updatedAt": "2022-07-14T22:53:59Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Makes sense",
          "createdAt": "2022-07-18T14:34:10Z",
          "updatedAt": "2022-07-18T14:34:10Z"
        }
      ]
    },
    {
      "number": 129,
      "id": "I_kwDOHTmVzM5OrGOd",
      "title": "verifier ignoring holder's keys",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/129",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "@tplooker pointed out that verifiers who do not understand `cnf` (or any other claim used to pass holder's key info), verifier will ignore it per JWT's extensibility model. So the attacker takes an issuer-signed item out of a holder-signed item and only sends issuer-signed to the verifier. issuer's signature will pass, and verifier will ignore holder's key info.\r\nJWT's extensibility model backfiring on attacked removing holder binding.",
      "createdAt": "2022-07-27T18:15:38Z",
      "updatedAt": "2022-10-24T16:49:22Z",
      "closedAt": "2022-10-24T16:49:22Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Not exactly sure how the attack works. Whatever is signed by the issuer contains the `cnf` claim (or doesn't). The attacker cannot remove that claim. \r\n\r\nBut even if we assume that the  attacker can remove the claim, that would mean that the verifier bases its decision whether to require holder binding or not on information solely defined by the issuer - that is strange, it should be defined by the use case in general. There might also be instances where the issuer let's the user decide whether to include `cnf` (or any other claim for the user key). The verifier must not rely on the presence of that claim.",
          "createdAt": "2022-07-27T19:35:40Z",
          "updatedAt": "2022-07-27T19:35:40Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that the proof of possession in terms of Holder's publick key bounded in the SD-JWT should be defined in the trust framework. The verifier should (or not) prove the possession of the holder.\r\n\r\nhow this can be achieved?\r\n\r\nJWT gives some liberties but cnf is a standard claim and if it's regulated by the rules of a federation the Verifier should verify the cnf value in conformance of the PoP requirement.\r\n\r\nif an adversary removes the cnf, the signature validation of the SD-JWT fails.\r\nif the verifier doesn't check the PoP in the way that it has been defined in the technical specs of a trust framework well, it will be banned.",
          "createdAt": "2022-07-27T20:14:25Z",
          "updatedAt": "2022-07-27T20:14:25Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> I think that the proof of possession in terms of Holder's publick key bounded in the SD-JWT should be defined in the trust framework. \r\n\r\nAgree, if the spec is used within a trust framework, the requirement for PoP would probably defined there.\r\n\r\n> The verifier should (or not) prove the possession of the holder.\r\n\r\nIt's the holder proving possession, the verifier checks the proof.",
          "createdAt": "2022-07-27T20:24:36Z",
          "updatedAt": "2022-07-27T20:24:36Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "yes, my english hits again",
          "createdAt": "2022-07-27T20:35:02Z",
          "updatedAt": "2022-07-27T20:35:02Z"
        },
        {
          "author": "tplooker",
          "authorAssociation": "NONE",
          "body": "> Not exactly sure how the attack works. Whatever is signed by the issuer contains the cnf claim (or doesn't). The attacker cannot remove that claim.\r\n\r\nYep you're correct, let me try to explain it a little further\r\n\r\nThe underlying extensibility model for JWT payloads relies on parties ignoring values they don't understand. Therefore layering in new security related parameters like the `cnf` claim which is optional in the context of general JWTs (e.g un-profiled) which means that a risk does exist that a JWT containing a `cnf` claim could be sent to a verifying party that does not understand it and therefore verifying it as an ordinary JWT without and holder PoP signature present.",
          "createdAt": "2022-07-28T03:09:31Z",
          "updatedAt": "2022-07-28T03:09:31Z"
        },
        {
          "author": "tplooker",
          "authorAssociation": "NONE",
          "body": "I realise this isn't the first/only example of where the general nature of JWT's can mean cross contextual use (e.g cross profile) can lead to these sorts of issues, however it does appear different in the PoP case given that it affects the cryptographic verification process. For instance could it not be plausible that an implementation of SD-JWT only supports the non-holder bound variation?",
          "createdAt": "2022-07-28T03:40:09Z",
          "updatedAt": "2022-07-28T03:40:09Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I added new text during my last review that addresses this topic. Please review!\r\nhttps://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/155/files#diff-40bc3800dd9a7d4411799637caf0b01f82a01242d57264a2e4beb408c3835704R986-R1026",
          "createdAt": "2022-10-19T16:21:33Z",
          "updatedAt": "2022-10-19T16:21:33Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #155",
          "createdAt": "2022-10-24T16:27:53Z",
          "updatedAt": "2022-10-24T16:27:53Z"
        }
      ]
    },
    {
      "number": 131,
      "id": "I_kwDOHTmVzM5Owbr1",
      "title": "rename SD-JWT-Release to SVC-Release?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/131",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "Sakurann"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "Some have asked what is \"Release\"? In short it's a subset of SVC that contains only those claims that the user has consented to share.\r\nmaybe SVC -Release is better? (I am also perfectly fine keeping it as is)",
      "createdAt": "2022-07-28T18:17:26Z",
      "updatedAt": "2022-10-19T18:02:11Z",
      "closedAt": "2022-10-19T18:02:10Z",
      "comments": [
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "Should it just be called `Disclosure`?",
          "createdAt": "2022-09-21T00:04:22Z",
          "updatedAt": "2022-09-21T00:04:22Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I would be ok with `Disclosure`, WDYT @danielfett ?",
          "createdAt": "2022-09-29T04:58:12Z",
          "updatedAt": "2022-09-29T04:58:21Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #148 \r\nJust Disclosure was confusing with Disclosure Document (renamed from SVC per #134) so chose SD-JWT-Disclosure/SD-JWT-D",
          "createdAt": "2022-10-01T05:07:19Z",
          "updatedAt": "2022-10-01T05:07:19Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "renamed to\r\n> Holder-Selected Disclosures JWT (HS-Disclosures JWT)\r\n:  A JWT created by the Holder that contains the Disclosures from an Issuer-Issued Disclosures Object that the Holder is disclosing to the Verifier. In addition to the Disclosures, it can contain other properties and may be signed by the Holder.\r\n",
          "createdAt": "2022-10-19T18:02:10Z",
          "updatedAt": "2022-10-19T18:02:10Z"
        }
      ]
    },
    {
      "number": 132,
      "id": "I_kwDOHTmVzM5OwdPs",
      "title": "add guidance on how the issuers choose how to blind claim names",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/132",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "user has 2 SD-JWTs from the same issuer, same blinded claim names can be used to correlate the user.\r\nadvice to have a fresh blinded claim name for each credential.",
      "createdAt": "2022-07-28T18:24:19Z",
      "updatedAt": "2022-10-24T16:49:12Z",
      "closedAt": "2022-10-24T16:49:12Z",
      "comments": [
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "Instead of opening a new issue from our conversation this morning - here is the excerpt & suggestion from the document we discussed:\r\n## blinding the attribute name\r\nFirst off, maybe it's informational or maybe it's specified - issuers should not include \"secrets\" in claim labels. If a label for something is actually a secret, it should be treated as such. That said, I get that this scenario must be addressed. Sensitive predicates or graduated disclosure contexts can benefit from this capability. \r\n\r\nIt seems to me that the most useful and easy algorithm to implement is to use the same hash algorithm + salt for the node value to blind the label where: SALTED LABEL = HASH_ALGO(LABEL + SALT)\r\nOf course, this assumes that specific guidance is included for best practice salt generation (fresh entropy gathering for each attribute block salt, sufficient bits of entropy, etc.) for strong cryptographic outcomes.\r\n```\r\n\"_sd\": {\r\n  \"9-J2445a_p91...\": {\r\n    \"h\": \"Y823Kowek92...\", // b64url\r\n    \"l\": \"name\"\r\n    \"s\": \"H82leq3!4...\", // re-use salt\r\n    \"id\": \"did:jwk:894fa94hg10AOEe82\u2026#0\", //claim specific DID URL binding\r\n    \"v\": \"Slim Shady\"\r\n  }\r\n}\r\n```\r\nIn this representation, the salted hash of the label's value (\"name\") \"9-J2445a_p91...\" can be addressed directly by the digest \"h\" value in compact form: \r\n```\r\n\"_sd\": {\r\n  \"9-J2445a_p91...\": \"Y823Kowek92...\"\r\n}\r\n```\r\nSide-note:\r\nInformative statements that recommend large sd-jwt claim sets should be 'broken down' into much smaller sets, or individual claims, then wrapped and sealed as a JWP may be better than including too many claims in an sd-jwt.\r\n\r\n",
          "createdAt": "2022-09-21T00:01:26Z",
          "updatedAt": "2022-09-21T00:01:51Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Right now, it is RECOMMENDED that a random string is chosen for the blinded claim name. HMAC(salt, claim-name) and HASH_ALGO(LABEL + SALT) would be fine as well, but there's more room for errors, especially as holders/verifiers might expect a specific format and then reject an SD-JWT when, e.g., the issuer chose a wrong encoding or similar.\r\n\r\nI don't see a real advantage of using HMAC/HASH_ALGO for the blinded claim name. \r\n\r\nI therefore propose to stick with the current recommendation. We should stress that a fresh random value must be chosen for each claim in each issued credential.",
          "createdAt": "2022-10-17T07:42:23Z",
          "updatedAt": "2022-10-17T07:42:23Z"
        },
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "@danielfett it's not super clear to me how: \r\n```\r\nSD-CLAIMS = (\r\n    CLAIM-NAME-PLACEHOLDER: DIGEST-DERIVATION(SALT, CLAIM-VALUE, CLAIM-NAME)\r\n)*\r\n```\r\nwould alleviate your concerns here: _\"but there's more room for errors, especially as holders/verifiers might expect a specific format and then reject an SD-JWT when, e.g., the issuer chose a wrong encoding or similar\"_\r\n\r\nMaybe I'm missing something obvious but I don't see much difference in how holders & verifiers would treat these various approaches. They still have to reconcile with the encoding and/or hashing algorithms expressed in the security envelope. ",
          "createdAt": "2022-10-19T18:52:17Z",
          "updatedAt": "2022-10-19T18:52:17Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "My point was about the selection of the blinded clame name (or 'placeholder claim name' as it is called in the current draft). We have two options on the table:\r\n\r\n1. Select a random string as the placeholder\r\n2. Select the placeholder as some function of the original claim name (the label in your proposal) and the salt\r\n\r\nWhat I wanted to express is that I think option 1 is better. From a security perspective, both are equivalent. There is no need to choose the placeholder claim name in a particular way, we just need to ensure that it does not leak information about the original claim name. Just numbering all placeholder claim names would be fine as well (as long as the numbering does not reveal anything, e.g., the position of the original claim in the list of claims.) \r\n\r\nBut for option 2, I see two drawbacks:\r\n\r\n - We need to explain more, in particular how to assemble the input for the function, similar to the discussion we had about the hidden claim values. For example, we need to define how the original claim name and the salt are concatenated such that there can be no prefix collisions. \r\n - A verifier receiving an SD-JWT with blinded claim names according to option 2 may be tempted to (needlessly) check that the claim name was created in a particular way by recalculating the hash. If the issuer has made a mistake when calculating the hash or the verifier makes a mistake, this check will fail. Since such a check is not needed, it would be better if we don't set this trap in the first place.\r\n\r\nI see no advantages of option 2 over option 1, so I propose to go for option 1.",
          "createdAt": "2022-10-20T07:28:19Z",
          "updatedAt": "2022-10-20T07:28:19Z"
        },
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "I see, thanks for explaining that. I'm fine with option 1 if the goal is to reduce cognitive complexity for the application developers - it makes sense. ",
          "createdAt": "2022-10-20T15:09:19Z",
          "updatedAt": "2022-10-20T15:09:19Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #155 and PR #158",
          "createdAt": "2022-10-24T16:27:08Z",
          "updatedAt": "2022-10-24T16:27:08Z"
        }
      ]
    },
    {
      "number": 133,
      "id": "I_kwDOHTmVzM5QF7r6",
      "title": "Clarify SD-JWT and SVC is different",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/133",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "has-PR"
      ],
      "body": "Received feedback from Vittorio that this text is confusing: \"The structure of sd_release object in the SD-JWT-R is the same as in SD-JWT\" - whether SD-JWT and SVC are different objects or are different. Need to paraphrase/clarify",
      "createdAt": "2022-08-18T22:57:13Z",
      "updatedAt": "2022-09-21T17:26:00Z",
      "closedAt": "2022-09-21T17:26:00Z",
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "yes, when we moved from `sd` to `sd_release` we probably introduced this kind of typo.",
          "createdAt": "2022-08-18T23:25:16Z",
          "updatedAt": "2022-08-18T23:25:16Z"
        },
        {
          "author": "vibronet",
          "authorAssociation": "NONE",
          "body": "New release didn't fix it tho :)",
          "createdAt": "2022-08-25T22:58:06Z",
          "updatedAt": "2022-08-25T22:58:06Z"
        }
      ]
    },
    {
      "number": 134,
      "id": "I_kwDOHTmVzM5QjrSw",
      "title": "rename \"SVC\" to \"Disclosure document\"?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/134",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "Sakurann"
      ],
      "labels": [
        "has-PR"
      ],
      "body": "feedback from @bifurcation that term \"SVC\" too specific to the approach, and does not capture the purpose - suggestion to rename it to \"disclose document\"",
      "createdAt": "2022-08-25T23:04:15Z",
      "updatedAt": "2022-10-19T18:03:39Z",
      "closedAt": "2022-10-19T18:03:38Z",
      "comments": [
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "+1",
          "createdAt": "2022-09-21T00:04:34Z",
          "updatedAt": "2022-09-21T00:04:34Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "can do a PR, if you agree @danielfett ",
          "createdAt": "2022-09-29T04:59:02Z",
          "updatedAt": "2022-09-29T04:59:02Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR #148",
          "createdAt": "2022-10-01T04:53:53Z",
          "updatedAt": "2022-10-01T04:53:53Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Tried a PR, \"disclosure document\" and it does not sound clear enough.. \r\n\r\n> \"SVC\" too specific to the approach, and does not capture the purpose\r\n\r\nthe purpose is for the issuer to tell the holder the mapping of salts, claim names, claim values, (and optionally blinded claim values), that the holder uses to create a SD-JWT-Disclosure.\r\n\r\nAny better suggestions?",
          "createdAt": "2022-10-04T16:59:21Z",
          "updatedAt": "2022-10-04T16:59:21Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "renamed to \r\n> Issuer-Issued Disclosures Object (II-Disclosures Object)\r\n:  A JSON object created by the issuer that contains mapping between \r\n   raw claim values contained in the SD-JWT and the salts for each claim value.",
          "createdAt": "2022-10-19T18:03:38Z",
          "updatedAt": "2022-10-19T18:03:38Z"
        }
      ]
    },
    {
      "number": 137,
      "id": "I_kwDOHTmVzM5RRVLT",
      "title": "Python Code Incomplete Implementation of cnf",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/137",
      "state": "CLOSED",
      "author": "fabian-hk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The Python code puts the holder key directly into the ``cnf`` field:\r\n```\r\n\"cnf\": {\r\n        \"kty\": \"RSA\",\r\n        \"n\": \"pm4bOHBg-oYhAyPWzR56AWX3rUIXp11_ICDkGgS6W3ZWLts-hzwI3x65659kg4hVo9dbGoCJE3ZGF_eaetE30UhBUEgpGwrDrQiJ9zqprmcFfr3qvvkGjtth8Zgl1eM2bJcOwE7PCBHWTKWYs152R7g6Jg2OVph-a8rq-q79MhKG5QoW_mTz10QT_6H4c7PjWG1fjh8hpWNnbP_pv6d1zSwZfc5fl6yVRL0DV0V3lGHKe2Wqf_eNGjBrBLVklDTk8-stX_MWLcR-EGmXAOv0UBWitS_dXJKJu-vXJyw14nHSGuxTIK2hx1pttMft9CsvqimXKeDTU14qQL1eE7ihcw\",\r\n        \"e\": \"AQAB\"\r\n    },\r\n```\r\nbut in the draft examples there is a ``jwk`` sub key:\r\n```\r\n\"cnf\": {\r\n    \"jwk\" : {\r\n        \"kty\": \"RSA\",\r\n        \"n\": \"pm4bOHBg-oYhAyPWzR56AWX3rUIXp11_ICDkGgS6W3ZWLts-hzwI3x65659kg4hVo9dbGoCJE3ZGF_eaetE30UhBUEgpGwrDrQiJ9zqprmcFfr3qvvkGjtth8Zgl1eM2bJcOwE7PCBHWTKWYs152R7g6Jg2OVph-a8rq-q79MhKG5QoW_mTz10QT_6H4c7PjWG1fjh8hpWNnbP_pv6d1zSwZfc5fl6yVRL0DV0V3lGHKe2Wqf_eNGjBrBLVklDTk8-stX_MWLcR-EGmXAOv0UBWitS_dXJKJu-vXJyw14nHSGuxTIK2hx1pttMft9CsvqimXKeDTU14qQL1eE7ihcw\",\r\n        \"e\": \"AQAB\"\r\n    }\r\n  },\r\n```\r\nAfter RFC7800 the draft examples should be correct. So do we have to update the Python code?",
      "createdAt": "2022-09-06T15:52:49Z",
      "updatedAt": "2022-09-27T23:27:00Z",
      "closedAt": "2022-09-27T23:27:00Z",
      "comments": []
    },
    {
      "number": 139,
      "id": "I_kwDOHTmVzM5SA6Ag",
      "title": "Regarding  VC and VP generation",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/139",
      "state": "CLOSED",
      "author": "Muthurajj",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Does this library support for generating VC and VP?\r\n\r\nIf so can we integerate and pass claims from java ?",
      "createdAt": "2022-09-16T13:41:13Z",
      "updatedAt": "2022-09-29T14:47:43Z",
      "closedAt": "2022-09-29T14:47:42Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "See Issue #142 ",
          "createdAt": "2022-09-29T14:47:42Z",
          "updatedAt": "2022-09-29T14:47:42Z"
        }
      ]
    },
    {
      "number": 140,
      "id": "I_kwDOHTmVzM5SG6ve",
      "title": "Pls responed for this-How to include this in example simple ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/140",
      "state": "CLOSED",
      "author": "Muthurajj",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "  \"vc\": {\r\n    \"@context\": [\r\n      \"https://www.w3.org/2018/credentials/v1\",\r\n      \"https://www.w3.org/2018/credentials/examples/v1\"\r\n    ],\r\n    \"type\": [\r\n      \"VerifiableCredential\",\r\n      \"UniversityDegreeCredential\"\r\n    ],",
      "createdAt": "2022-09-19T07:46:50Z",
      "updatedAt": "2022-09-29T14:43:34Z",
      "closedAt": "2022-09-29T14:43:34Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "See Issue #142.",
          "createdAt": "2022-09-29T14:43:34Z",
          "updatedAt": "2022-09-29T14:43:34Z"
        }
      ]
    },
    {
      "number": 141,
      "id": "I_kwDOHTmVzM5SQGWW",
      "title": "SD-JWT Proposed alternative to inline, escaped JSON values",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/141",
      "state": "CLOSED",
      "author": "sbutterfield",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "## Problem statement\r\n\r\nCurrently, in sd-jwt spec, the recommended representation for JSON property values is to embed escaped JSON that represents a salted hash of the value. This seems to add complexity, room for error, and superfluous verbosity. Instead, specifying that claims in an \"_sd\" container are themselves ONE OF the following: \r\n(a) simple plain-text values\r\n(b) an object of specified properties supporting blinded property values\r\n(c) an object with specified properties supporting a blinded graph\r\n\r\nThere's a good balance of specificity and flexibility here (IMHO) for implementors to accommodate many different scenarios - as opposed to having to unescape and then detect the contents of an attribute's values. With strict conventions on certain attributes of an attribute block, relying parties are guaranteed some properties right away that can be validated before the actual values are read into memory - increasing reliability, security, and permitting faster failure sequences. In addition, writing unit and functional test automation suites for escaped stringified JSON is problematical at best and prone to some of the same formatting problems of concern with structured JSON values. It can also give way to new inconsistent ordering problems during serialized representation testing.\r\n\r\nHowever, per issue 27 - and other discussions that I could uncover, there is ongoing concern over c18n for hash reproducibility. I completely understand why. What I\u2019m proposing might be radioactive, but in this implementor's opinion, is unburdening: I do not think that it\u2019s the SD-JWT spec\u2019s problem to solve data format representation compatibility across all languages and libraries. Furthermore, I don\u2019t think that SD-JWT spec needs to solve for all extended/intermediate representations of claim values - especially when it comes to VC use-cases. In the spirit of good interface building and abstraction, I propose that it\u2019s possible to think of SD-JWT as foundational for other more opinionated specifications.\r\n\r\nIf statements put in attribute values need interpretation, then I\u2019d suggest other means for doing so like metadata encoding specific sections, SD-JWT issuer documentation, JSON Schema, JCS (as an example: RFC 8785 has guidelines for int64 strict encoding). I humbly warn that normatively specifying that values for properties should be escaped JSON AND that you should stuff other important and specified k<>v  pairs in the escaped JSON - is a mistake and will damage adoption for the spec. I don\u2019t think that taking ownership over the shape of claim values should be part of this spec, especially if the goal of a claim is to be \u201canything you want\u201d\u2026\r\n\r\nBoling down the problem of canonicalizing some value(s) - it seems most important to address bitwise value compatibility issues and the way that serialization libraries might handle non-primitive types (as opposed to distressing about ordering). Perhaps there are ways through this that don\u2019t involve incomplete or burdensome canonicalization libraries. Several libraries responsible for producing consistent hashes over JSON (ie: node.js `object-hash`) internally detect and encode incompatible datatypes. Would it be possible for SD-JWT to specify that prior to salting and hashing the attribute - its value must be: \r\nFully compacted (in the case of a JSON graph)\r\nEncoded using utf-8 octal, base64, base64url, hex, or some other specific encoding scheme\r\nThen salted and hashed?\r\n\r\nOn the whole, escaped stringified JSON values as the basis for SVC should probably be rethought. This issue aims to try and start that conversation with some meaningful solutions\r\n\r\nBy way of examples, you could instead represent SD-JWTs as:\r\n\r\n## blinded attribute block\r\n```\r\n\"_sd\": {\r\n  \"name\": {\r\n    \"h\": \"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIDEzIGxhenkgZG9ncy4=\", // base64url\r\n    \"s\": \"6YCYrdrSxs7q6dlO562YI6GhAktsBExFe6rcCZ+OX9I=\", // base64url\r\n    \"id\": \"did:jwk:894fa94hg10AOEe82\u2026#0\", //claim specific DID URL binding\r\n    \"v\": \"Slim Shady\"\r\n  }\r\n}\r\n```\r\nExample generation:\r\nHash over the compact form node for \"name\", without the \"h\" property present. Encode the resulting digest in base64url encoding. Insert the digest as property \"h\" into the \"name\" attribute block.\r\n\r\nEnables compact blinded presentation form of \r\n{\"name\": \"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIDEzIGxhenkgZG9ncy4=\"}\r\n\r\nThe underlying salt, which is never revealed unless the \"name\" property value is revealed, disables direct attack on the property - even with the label, type, and validation procedure for the value data of the property is known.\r\n\r\nBy letting JSON be JSON in the entire document structure, you enable an issuer to (optionally) be very specific about the structure of the value entered for an attribute. This further enhances security - especially if the signature (or even simply a hash) of the schema for the SD-JWT is described in the signed-over envelope (in a VC-SD-JWT).\r\n\r\n## blinded, nested eKYC graph\r\n\r\nThe standardized definition of what an eKYC data model is supposed to look like is a bit ambiguous, so I assume what you\u2019re concerned with is something like OIDC...\r\n```\r\n\"_sd\": {\r\n  \"oidc_req\": {\r\n    \"h\": \"...\",\r\n    \"s\": \"...\",\r\n    \"v\": {\r\n      \"scope\": [..., ..., ...],\r\n      \"response_type\": \"code\",\r\n      \"client_id\": \"...\",\r\n      \"redirect_uri\": \"...\",\r\n      \"nonce\": \"...\"\r\n    }\r\n  }\r\n}\r\n```\r\nthe \"v\" of the claim is valid, and validatable JSON. The semantic meaning of the outer, securely disclosable, claim name can be either domain-specific or use a JSON-LD context.\r\n",
      "createdAt": "2022-09-20T20:23:25Z",
      "updatedAt": "2022-10-17T07:30:07Z",
      "closedAt": "2022-10-17T07:30:06Z",
      "comments": [
        {
          "author": "OR13",
          "authorAssociation": "NONE",
          "body": "```\r\n\"id\": \"did:jwk:894fa94hg10AOEe82\u2026#0\"\r\n```\r\n\r\nI wonder if these are `iss` or `kid` or both (as is the current example).",
          "createdAt": "2022-09-20T20:57:31Z",
          "updatedAt": "2022-09-20T20:57:31Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "NONE",
          "body": "Do you even need canonicalization? are these serialized formats ever stored in a \"decoded\" form?\r\n\r\nFor example, in JWTs.\r\n\r\n{ header, payload, signature } is a fine way to store a token, if you are assured member ordering of header and payload are preserved, and whitespace is trimmed.\r\n\r\nIf you are worried about that, you store the entire thing encoded as a `jwt`... I don't know enough about sd-jwt, but its possible that cannonicalization can be accomplished in a \"light mode\" with normative statements, similar to the instructions for https://www.rfc-editor.org/rfc/rfc7638#section-3.2",
          "createdAt": "2022-09-20T21:02:32Z",
          "updatedAt": "2022-09-20T21:02:37Z"
        },
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "> ```\r\n> \"id\": \"did:jwk:894fa94hg10AOEe82\u2026#0\"\r\n> ```\r\n> \r\n> I wonder if these are `iss` or `kid` or both (as is the current example).\r\n\r\nIt's a really good question, Orie. The way I thought of it was the identifier `kid` - but it's something I just happened to add here for consideration. Instead of `did:jwk`, could it be any DID method URL allowing issuer-specific claim binding? or \"any party\" specific claim binding?\r\nMaybe putting `did:` there is the wrong idea altogether. I'd love to iterate on it. ",
          "createdAt": "2022-09-20T21:06:00Z",
          "updatedAt": "2022-09-20T21:06:00Z"
        },
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "> Do you even need canonicalization? are these serialized formats ever stored in a \"decoded\" form?\r\n\r\nI think this is a key question I'm poking at here. Could sd-jwt be better off not **_over-specifying_** a canonicalized form, allowing room for implementation specs unique to the domain of use for the sd-jwt spec?",
          "createdAt": "2022-09-20T21:10:02Z",
          "updatedAt": "2022-09-20T21:10:02Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "As discussed on our call with Shawn yesterday, it is important to separate the representation of values in the credential (SD-JWT) from the actual values of properties that are resolved after the verification of the presentation (SD-JWT and SD-JWT-Release). The use of the escaped JSON in the credential is what allows SD-JWT to support any type, including objects, for property values. Ideally, anything that builds on top of SD-JWT will not need to handle the escaped JSON format, as (for example) the verification algorithm outputs a JSON without any JSON escaped values for further processing by the application. I'm therefore not convinced that the \"unusual\" format for property values in the credential is a problem.\r\n\r\nThat said, the escaped JSON is not a great solution and raises a lot of eyebrows. But we think that it is the best solution we have. It is trivially easy to implement correctly, using any JSON library out there. The issue we're addressing is not solvable by prescribing a certain JSON schema (as it works on a higher layer). JCS would solve the problem, but increase implementation complexity. Even just compacting objects, as proposed below, is a relatively complex operation requiring a full JSON parser.\r\n",
          "createdAt": "2022-09-21T07:29:57Z",
          "updatedAt": "2022-09-21T07:29:57Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "NONE",
          "body": "Sometimes you can avoid escaping by translating... I've used https://www.npmjs.com/package/json-pointer do do selective disclosure with merkle proofs before... I would rather have JSON Pointer as a dependency than see escaped JSON payloads or have to manage transforms that were only defined in the sd-jwt spec.\r\n\r\n```ts\r\nimport pointer from 'json-pointer';\r\n\r\nconst objectToMessages = (obj: any) => {\r\n  const dict = pointer.dict(obj);\r\n  const messages = Object.keys(dict).map(key => {\r\n    return `{\"${key}\": \"${dict[key]}\"}`;\r\n  });\r\n  return messages;\r\n};\r\n\r\nconst messagesToObject = (messages: string[]) => {\r\n  const obj = {};\r\n  messages\r\n    .map(m => {\r\n      return JSON.parse(m);\r\n    })\r\n    .forEach(m => {\r\n      const [key] = Object.keys(m);\r\n      const value = m[key];\r\n      pointer.set(obj, key, value);\r\n    });\r\n  return obj;\r\n};\r\n\r\nexport { objectToMessages, messagesToObject };\r\n```\r\n\r\nThere are other approaches considered here: https://github.com/w3c-ccg/Merkle-Disclosure-2021/tree/main/packages/linked-data-proof/src/merkle/normalization\r\n\r\nConsider building blocks that are widely available in substitute for more normative spec definitions.",
          "createdAt": "2022-09-21T13:17:48Z",
          "updatedAt": "2022-09-21T13:22:19Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I'm not following - can you give an example how JSON pointers or the code above would solve the hashing problem? ",
          "createdAt": "2022-09-21T13:34:14Z",
          "updatedAt": "2022-09-21T13:34:14Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> Do you even need canonicalization? are these serialized formats ever stored in a \"decoded\" form?\r\n> \r\n> For example, in JWTs.\r\n\r\nInterestingly, JWTs are an example where normalization was avoided by just encoding the whole body into the token without any normalization, not unlike what we're doing in SD-JWT. (The ~~header~~ _edit: JWK Thumbprint_ data is treated differently, but that is a very controlled and small data set.) ",
          "createdAt": "2022-09-21T13:37:19Z",
          "updatedAt": "2022-09-26T14:42:30Z"
        },
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "@danielfett, not sure if you saw this new bit from my write-up: \r\n\r\n> Would it be possible for SD-JWT to specify that prior to salting and hashing the attribute - its value must be:\r\nFully compacted (in the case of a JSON graph)\r\nEncoded using utf-8 octal, base_xyz_, hex, or some other specific encoding scheme\r\nThen salted and hashed?\r\n\r\nSimilar to the JWP spec, pre-encoding the value using utf-8 octal byte array (or something else, I don't care), then salting and hashing (JWP generates a proof instead).",
          "createdAt": "2022-09-21T15:24:33Z",
          "updatedAt": "2022-09-21T15:24:33Z"
        },
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "I _think_ what you want to ensure is that the issuer's intended data format is assured and therefore the hash is always reproducible. With a byte-level encoding, to my knowledge, I cannot think of a language or library that screws this up (although I'm sure one exists), which is why many universal \"XYZ to hash\" producer libraries reify values in some encoded byte format.",
          "createdAt": "2022-09-21T15:37:01Z",
          "updatedAt": "2022-09-21T15:37:01Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "NONE",
          "body": "> I'm not following - can you give an example how JSON pointers or the code above would solve the hashing problem?\r\n\r\nhttps://github.com/w3c-ccg/Merkle-Disclosure-2021/blob/main/packages/linked-data-proof/src/merkle/normalization/__tests__/json-pointer.test.ts\r\n\r\nhttps://github.com/transmute-industries/verifiable-data/tree/main/packages/merkle-proof#custom-hash-functions\r\n\r\nNormalize to a set of messages which are built from json pointer.\r\n\r\nThen use any multi-message scheme on those messages. (such as bbs+ signatures OR merkle set membership proofs)\r\n\r\nThats what we did to create merkle proofs for selective disclosure of object tree subsets.\r\n\r\n",
          "createdAt": "2022-09-21T21:48:31Z",
          "updatedAt": "2022-09-21T21:49:07Z"
        },
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "@OR13, \r\nIf I try and catch your drift here, your approach would be to process the value sub-graph into JSON pointers and then generate merkle set membership proofs for each fragment - is that right? Then, use the concatenation of the merkle proofs as the value for the salted attribute? ",
          "createdAt": "2022-09-22T14:38:26Z",
          "updatedAt": "2022-09-22T14:38:26Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "NONE",
          "body": "I showed how to convert an object to a set of messages.\r\n\r\nYou would want to apply the blinding to the messages.\r\n\r\nThe approach I showed is similar in that it relies on JSON encoding as strings... and then selective disclosure of those strings... which is then converted back to a selectively disclosed object.\r\n\r\nJust sharing the approach, not sure how exactly it might map to sd-jwt.",
          "createdAt": "2022-09-22T17:19:20Z",
          "updatedAt": "2022-09-22T17:20:22Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "@sbutterfield: Are you thinking about putting the pre-encoded value into the document produced by the issuer and then sent to the holder (what we call SVC in SD-JWT)?\r\n\r\n@OR13: I don't see how this approach would reduce complexity or make life easier for implementers. Why is an intermediate representation as a set of messages better than one where some values are JSON strings? In both cases, anybody working with the contents of the credential would need to apply some algorithms to convert it back into the original representation. With both approaches, the same data can be transported.\r\n\r\nOne of the main goals of SD-JWT is simplicity, which is why we have a fully working spec and four running implementations after only a couple of months of development. Right now, all that is needed to implement SD-JWT is a JSON library and a hash function. ",
          "createdAt": "2022-09-23T07:31:04Z",
          "updatedAt": "2022-09-23T07:31:04Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "NONE",
          "body": "The aesthetics of the string values with escaped JSON are not great, at best. But it obviates the need to do c18n/normalization with a straightforward approach that doesn't come with other baggage. I believe the draft should do a better job explaining that rational but stick with the current approach.  ",
          "createdAt": "2022-09-23T20:52:29Z",
          "updatedAt": "2022-09-23T20:52:29Z"
        },
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "@danielfett \r\nBasically, yes. Let me try and clarify with some examples to see if it makes sense. The encoding methodology employed here is similar to what some standards already employ and seems to be normatively used in JPT. \r\n\r\nFirst for a property value that we want to blind (let's use some arbitrary JSON): \r\n```\r\n{\r\n  \"array\": [\r\n    1,\r\n    2,\r\n    3\r\n  ],\r\n  \"boolean\": true,\r\n  \"color\": \"gold\",\r\n  \"null\": null,\r\n  \"number\": 123,\r\n  \"object\": {\r\n    \"a\": \"b\",\r\n    \"c\": \"d\"\r\n  },\r\n  \"string\": \"Hello World\"\r\n}\r\n```\r\n\r\nMust first be in compact form (normatively): \r\n```\r\n{\"array\":[1,2,3],\"boolean\":true,\"color\":\"gold\",\"null\":null,\"number\":123,\"object\":{\"a\":\"b\",\"c\":\"d\"},\"string\":\"Hello World\"}\r\n```\r\n\r\nNext, using a natively available json library function, or an easily supported polyfill - uint8array the value: \r\n```\r\nlet uc1 = '{\"array\":[1,2,3],\"boolean\":true,\"color\":\"gold\",\"null\":null,\"number\":123,\"object\":{\"a\":\"b\",\"c\":\"d\"},\"string\":\"Hello World\"}';\r\nlet encoder = new TextEncoder();\r\nlet uc1Uint8Array = encoder.encode(uc1);\r\nconsole.log(\"uc1: \", uc1Uint8Array.toString());\r\n//\"uc1: \", \"123,34,97,114,114,97,121,34,58,91,49,44,50,44,51,93,44,34,98,111,111,108,101,97,110,34,58,116,114,117,101,44,34,99,111,108,111,114,34,58,34,103,111,108,100,34,44,34,110,117,108,108,34,58,110,117,108,108,44,34,110,117,109,98,101,114,34,58,49,50,51,44,34,111,98,106,101,99,116,34,58,123,34,97,34,58,34,98,34,44,34,99,34,58,34,100,34,125,44,34,115,116,114,105,110,103,34,58,34,72,101,108,108,111,32,87,111,114,108,100,34,125\"\r\n```\r\n\r\nNow, it's possible to go in a number of directions in the representation... the uint8array string is quite simple and leaves little room for misinterpretation by an application during reproduction.\r\nUsing the hashing algorithm specified in the security envelope, salt & hash the string to get your digest. I have not had any problems reproducing the hash locally using different languages and libraries. I've added arbitrary whitespace, kanji, etc. No issues getting the same representation back out\r\n```\r\n\"_sd\": {\r\n  \"myjson\": {\r\n    \"h\": \"OGI2OTUzNjEwNDg0MmFiY2QzYjFiNWJmMTgzYTE2ZjZmOWNiYjU5MWFkYzI2ZDJjNzE4YjM1MmZkYzMzNTRhNg==\",\r\n    \"s\": \"6YCYrdrSxs7q6dlO562YI6GhAktsBExFe6rcCZ+OX9I=\",\r\n    \"v\": \"123,34,97,114,114,97,121,34,58,91,49,44,50,44,51,93,44,34,98,111,111,108,101,97,110,34,58,116,114,117,101,44,34,99,111,108,111,114,34,58,34,103,111,108,100,34,44,34,110,117,108,108,34,58,110,117,108,108,44,34,110,117,109,98,101,114,34,58,49,50,51,44,34,111,98,106,101,99,116,34,58,123,34,97,34,58,34,98,34,44,34,99,34,58,34,100,34,125,44,34,115,116,114,105,110,103,34,58,34,72,101,108,108,111,32,87,111,114,108,100,34,125\"\r\n  }\r\n}\r\n```\r\n",
          "createdAt": "2022-09-27T19:19:39Z",
          "updatedAt": "2022-09-27T19:19:39Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "So the string\r\n`123,34,97,114,114,97,121,34,58,91,49,44,50,44,51,93,44,34,98,111,111,108,101,97,110,34,58,116,114,117,101,44,34,99,111,108,111,114,34,58,34,103,111,108,100,34,44,34,110,117,108,108,34,58,110,117,108,108,44,34,110,117,109,98,101,114,34,58,49,50,51,44,34,111,98,106,101,99,116,34,58,123,34,97,34,58,34,98,34,44,34,99,34,58,34,100,34,125,44,34,115,116,114,105,110,103,34,58,34,72,101,108,108,111,32,87,111,114,108,100,34,125`\r\nis sent from the issuer to the wallet and then on to the verifier for the selectively disclosed claims, if I understand your proposal correctly. How does this improve on the current solution, which would be sending the string\r\n`{\\\"array\\\": [1, 2, 3], \\\"boolean\\\": true, \\\"color\\\": \\\"gold\\\", \\\"null\\\": null, \\\"number\\\": 123, \\\"object\\\": {\\\"a\\\": \\\"b\\\", \\\"c\\\": \\\"d\\\"}, \\\"string\\\": \\\"Hello World\\\"}`?\r\n`",
          "createdAt": "2022-09-28T06:54:22Z",
          "updatedAt": "2022-09-28T06:54:22Z"
        },
        {
          "author": "sbutterfield",
          "authorAssociation": "NONE",
          "body": "> How does this improve on the current solution, which would be sending the string\r\n\r\nIt's not inline escaped json",
          "createdAt": "2022-09-28T19:46:19Z",
          "updatedAt": "2022-09-28T19:46:19Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We have added an explanation why we have chosen JSON encoding here: https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#the-challenge-of-canonicalization\r\n\r\nI still consider escaped JSON the most simple, most robust, and an extremely easy-to-implement solution. We will certainly not invent our own way of encoding bytes just to avoid unusually-looking strings in a document most applications will never even deal with. (To this point, please also take a look at the [proposed processing model](https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#processing_model) and the examples in the appendix.)",
          "createdAt": "2022-10-17T07:30:06Z",
          "updatedAt": "2022-10-17T07:30:06Z"
        }
      ]
    },
    {
      "number": 142,
      "id": "I_kwDOHTmVzM5SR41M",
      "title": "Can we achieve this structure ??",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/142",
      "state": "CLOSED",
      "author": "Muthurajj",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "{\r\n  \"sub\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\",\r\n  \"jti\": \"http://example.edu/credentials/3732\",\r\n  \"iss\": \"https://example.com/keys/foo.jwk\",\r\n  \"nbf\": 1541493724,\r\n  \"iat\": 1541493724,\r\n  \"exp\": 1573029723,\r\n  \"vc\": {\r\n    \"@context\": [\r\n      \"https://www.w3.org/2018/credentials/v1\",\r\n      \"https://www.w3.org/2018/credentials/examples/v1\"\r\n    ],\r\n    \"type\": [\r\n      \"VerifiableCredential\",\r\n      \"UniversityDegreeCredential\"\r\n    ]\r\n  },\r\n  \"sd_digests\": {\r\n    \"given_name\": \"fUMdn88aaoyKTHrvZd6AuLmPraGhPJ0zF5r_JhxCVZs\",\r\n    \"family_name\": \"9h5vgv6TpFV6GmnPtugiMLl5tHetHeb5X_2cKHjN7cw\",\r\n    \"birthdate\": \"fvLCnDm3r4VSYcBF3pIlXP4ulEoHuHOfG_YmFZEuxpQ\"\r\n  }\r\n}\r\n\r\n\r\nThis python code support for VC generation?\r\nAny changes require for achieving this structure?\r\nPls respond i am  new to python..\r\n ",
      "createdAt": "2022-09-21T06:54:21Z",
      "updatedAt": "2022-11-23T12:37:12Z",
      "closedAt": "2022-11-23T12:37:12Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "current python code supports only example 1 and not VCs as in example 4",
          "createdAt": "2022-09-29T05:17:54Z",
          "updatedAt": "2022-09-29T05:17:54Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "there are also 3 other implementations in different languages jfyi\r\n",
          "createdAt": "2022-09-29T05:18:21Z",
          "updatedAt": "2022-09-29T05:18:21Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We added an example in the document with PR #174 that shows a W3C VC. The example is generated from the python code.",
          "createdAt": "2022-11-23T12:37:12Z",
          "updatedAt": "2022-11-23T12:37:12Z"
        }
      ]
    },
    {
      "number": 143,
      "id": "I_kwDOHTmVzM5SYLFC",
      "title": "VC generation in sd-jwt",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/143",
      "state": "CLOSED",
      "author": "Muthurajj",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "1.Can we generate VC using SD-JWT?\r\n\r\n2.What is the verification_process and sub that you have mentioned in example yml file\r\n\r\n3.If we can generate VC what should we change?\r\n\r\n4.How to generate context and type like you have mentioned in document example 4?\r\n5.Openid connect include in this library?",
      "createdAt": "2022-09-22T08:43:59Z",
      "updatedAt": "2022-09-29T14:47:11Z",
      "closedAt": "2022-09-29T14:47:11Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "1: See Issue #142 \r\n2: See the eKYC spec for the verification_process, but the value here is only an example\r\n3/4: The aim of the current python code is not to generate VCs, but to generate (more general) SD-JWTs.\r\n5: I don't understand this question.",
          "createdAt": "2022-09-29T14:47:04Z",
          "updatedAt": "2022-09-29T14:47:04Z"
        }
      ]
    },
    {
      "number": 144,
      "id": "I_kwDOHTmVzM5S6bdC",
      "title": "Add an example of ISO 18013-5 data model as SD-JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/144",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "Sakurann"
      ],
      "labels": [
        "needs-PR"
      ],
      "body": "",
      "createdAt": "2022-09-29T15:15:43Z",
      "updatedAt": "2022-10-18T15:57:29Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 156,
      "id": "I_kwDOHTmVzM5UU1Zm",
      "title": "typo in python code after #149",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/156",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "bug"
      ],
      "body": "        @Sakurann sorry for the late revision\r\n\r\nit seems that here we have merge conflicts exposed\r\nhttps://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/149/files#diff-ce646751295775c4b20fb384cedc0e3374a9c288cc7c93c345f227a422979f46R12\r\n\r\n_Originally posted by @peppelinux in https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/149#issuecomment-1283809439_\r\n      ",
      "createdAt": "2022-10-19T10:52:04Z",
      "updatedAt": "2022-10-19T13:53:16Z",
      "closedAt": "2022-10-19T13:53:16Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I think this was fixed in a later revision. I don't see it in master.",
          "createdAt": "2022-10-19T11:12:31Z",
          "updatedAt": "2022-10-19T11:12:31Z"
        }
      ]
    },
    {
      "number": 159,
      "id": "I_kwDOHTmVzM5UlKK-",
      "title": "A section summarizing features ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/159",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I think we need a section summarizing what kind of claims SD-JWT can consist of...\r\n\r\n- claims in SD-JWT can all be selectively disclosable claims, or can also include always-disclosed claims\r\n- claim names in SD-JWT can all be blinded, or can include non-blinded claim names\r\n- claim structure can be simple or complex and claims in the complex structure can be blinded/not-blinded and disclosable/not-disclosable\r\n- same claim names can appear within multiple complex claim structures and can be blinded/not-blinded and disclosable/not-disclosable...",
      "createdAt": "2022-10-22T01:56:47Z",
      "updatedAt": "2022-10-24T16:25:58Z",
      "closedAt": "2022-10-24T16:25:58Z",
      "comments": []
    },
    {
      "number": 165,
      "id": "I_kwDOHTmVzM5VdMrL",
      "title": "missing word -01",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/165",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-01.html#section-5.8-3 \r\n\r\n\"For each claim, a JSON literal that decodes to an object with the and the claim value (plus optionally the claim name) is contained in the sd_hs_disclosures object.\" -> \"... decodes to an object with the *salt* and the claim value (plus ...\" or something about the salt I think. \r\n\r\n",
      "createdAt": "2022-11-02T20:04:37Z",
      "updatedAt": "2022-11-06T18:24:33Z",
      "closedAt": "2022-11-06T18:24:33Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "It has been fixed - you can see in the latest editor's version - will be in -02\r\nhttps://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#section-5.8-3\r\n",
          "createdAt": "2022-11-06T18:24:33Z",
          "updatedAt": "2022-11-06T18:24:33Z"
        }
      ]
    },
    {
      "number": 166,
      "id": "I_kwDOHTmVzM5VdfyD",
      "title": "validate what? -01 ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/166",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://www.ietf.org/archive/id/draft-ietf-oauth-selective-disclosure-jwt-01.html#section-6.2-3.5.1 has, \"Validate the HS-Disclosures JWT: ... If Holder Binding is required, validate the signature over the SD-JWT using the same steps as for the SD-JWT plus the following steps:\", which can't be right with both mentions of SD-JWT.  \r\n\r\nFurthermore I'd strongly suggest that validation steps for the HS-Disclosures JWT be described independently.  Things like \"using the same steps as for the SD-JWT\" seem likely to lead to confusion and/or require extrapolation (which steps exactly? the issuer step above is kinda about the signature but not really needed in HS-Disclosures).  ",
      "createdAt": "2022-11-02T21:13:49Z",
      "updatedAt": "2022-11-23T12:32:57Z",
      "closedAt": "2022-11-23T12:32:57Z",
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I would be strongly in favor of saying HS-DIsclosures is an object - always unsigned - that includes only `sd_hs_disclosures`. and that part is absolutely normative in SD-JWT spec. \r\n\r\nthis would allow us to define an optional Holder binding mechanism that requires a signed JWT - that includes nonce, aud, etc.\r\nmeaning if NO holder binding - 4 `.` separated parts like issuance. if yes holder binding - 7 `.` separated parts\r\n\r\nthe benefits of this approach include an easier alignment with other credential formats",
          "createdAt": "2022-11-07T14:31:16Z",
          "updatedAt": "2022-11-07T14:31:16Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm sure this is no surprise but I'm very much in favor of moving in that direction, @Sakurann. It's a bigger scope than was intended by this issue. But is exactly where I was hoping the conversations in London this week would lead.  \r\n\r\nThe HS-DIsclosures object could drop the sd_hs_disclosures key too and have one less level of nesting (simpler and smaller). \r\n\r\ni.e. just,\r\n\r\n```\r\n{\r\n \"given_name\": \"{\\\"s\\\": \\\"6Ij7tM-a5iVPGboS5tmvVA\\\", \\\"v\\\": \\\"John\\\"}\",\r\n \"family_name\": \"{\\\"s\\\": \\\"Qg_O64zqAxe412a108iroA\\\", \\\"v\\\": \\\"Doe\\\"}\",\r\n \"address\": \"{\\\"s\\\": \\\"5bPs1IquZNa0hkaFzzzZNw\\\", \\\"v\\\": {\\\"street_address\\\": \\\"123 Main St\\\", \\\"locality\\\": \\\"Anytown\\\", \\\"region\\\": \\\"Anystate\\\", \\\"country\\\": \\\"US\\\"}}\"\r\n}\r\n```\r\n\r\nSimilarly, the Issuer-Issued Disclosures could do without the outer sd_ii_disclosures layer.  \r\n\r\n",
          "createdAt": "2022-11-07T14:53:05Z",
          "updatedAt": "2022-11-08T08:26:29Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "(This is also larger than this issue, but) With this new approach, the combined formats could be expressed with each component being separated by the tilda and if there are multiple SD-JWTs (w/ HSD objects) being presented with one Holder Disclosure JWT, they can be separated with two tildas:\r\n\u201csd-jwt~hsd-object~~sd-jwt~hsd-object~~sd-jwt~hsd-object~~HD JWT\u201d\r\n\r\nIf hsd-object is absolutely one per as-JWT it might make sense dropping \u2018sd_hs_disclosures\u201d, which means \u2018sd_ii_disclosures\u2019 is also dropped. Not sure yet if we are limiting future extensibility here.. probably not ",
          "createdAt": "2022-11-08T08:21:20Z",
          "updatedAt": "2022-11-08T08:21:20Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This has been solved in the PR for the new format, PR #174.",
          "createdAt": "2022-11-23T12:32:57Z",
          "updatedAt": "2022-11-23T12:32:57Z"
        }
      ]
    },
    {
      "number": 169,
      "id": "I_kwDOHTmVzM5V0uxm",
      "title": "digest algorithm agility needs refinement",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/169",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As discussed during IETF 115, the approach to hash algorithm agility in -01 is problematic and needs some refinement. *Some* of the issues that jumped out at me are listed below. But I *think* that simplifying to just the hashes might be the way to go.\r\n\r\n- Where does the HMAC key come from? The salt value that would conceptually/presumably be the HMAC key is part of the string literal value that the digest is computed over, which is awkward. But also not explicitly defined. So it's an exercise left up to the reader, which isn't great for interoperability. \r\n- The JOSE alg registry doesn't seem appropriate for the HMAC algs in this different context. And isn't sufficient (see point above) for interoperability.\r\n- Allowing the value to come from two different unrelated registries or \"another specification and/or profile of this specification\" without a registry seems problematic on a number of fronts \r\n- The name `sd_digest_derivation_alg` is longer than typical JWT names (sha 256 could also potentially be a default if the thing isn't present to make things smaller in the common MTI case) \r\n- digest derivation function doesn't seem like a commonly used term\r\n- seems like the alg indicator could/should go under the `sd_digests` rather than being an independent claim at the same level (unless `sd_digests` goes away, which I'm starting to think it should based on conversations with Dr. @danielfett on Tues, in which case this point is moot) \r\n",
      "createdAt": "2022-11-08T10:10:51Z",
      "updatedAt": "2022-12-07T18:54:42Z",
      "closedAt": "2022-12-07T18:54:42Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "mostly done with f044eae6bb714e1423056e91940c3a71a548cdb9 and e9cea2ccf1dd164759f9d135797321fc16686768\r\n\r\na bit more tracked with #183",
          "createdAt": "2022-12-07T18:54:42Z",
          "updatedAt": "2022-12-07T18:54:42Z"
        }
      ]
    },
    {
      "number": 170,
      "id": "I_kwDOHTmVzM5WEu0e",
      "title": "Avoid leaking information with number of digests.",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/170",
      "state": "CLOSED",
      "author": "cobward",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In order to prevent the number of digests leaking any information, ISO-18013-5 suggests adding additional digests that do not correlate to any of the hidden elements. The recently suggested format of sd-jwt would mean you would have to add these at every level that hidden elements are defined:\r\n\r\n```diff\r\n     \"family_name\": \"M\u00f6bius\",\r\n     \"sd|<real-digest>\": \"\",\r\n+    \"sd|<fake-digest-1>\": \"\",\r\n+    \"sd|<fake-digest-2>\": \"\",\r\n+    \"sd|<fake-digest-3>\": \"\"\r\n     \"address\": {\r\n       \"street_address\": \"Schulstr. 12\",\r\n       \"locality\": \"Schulpforta\",\r\n       \"sd|<real-digest>\": \"\",\r\n+      \"sd|<fake-digest-4>\": \"\",\r\n+      \"sd|<fake-digest-5>\": \"\",\r\n+      \"sd|<fake-digest-6>\": \"\"\r\n     }\r\n```\r\n\r\nThis obviously adds a lot of bloat. A better alternative for this would be for all selective-disclosures to be defined in a top-level array.\r\n\r\n```json\r\n     \"family_name\": \"M\u00f6bius\",\r\n     \"address\": {\r\n       \"street_address\": \"Schulstr. 12\",\r\n       \"locality\": \"Schulpforta\",\r\n     }\r\n     \"sd\": [\r\n       \"<real-digest-1>\",\r\n       \"<real-digest-2>\",\r\n       \"<fake-digest-1>\",\r\n       \"<fake-digest-2>\",\r\n       \"<fake-digest-3>\"\r\n     ]\r\n```",
      "createdAt": "2022-11-10T15:13:11Z",
      "updatedAt": "2022-11-23T12:32:06Z",
      "closedAt": "2022-11-23T12:31:55Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This has been solved in the recently merged PR #174. We did not, however, pull the sd hashes to the top level, as the structured approach encourages secure implementations (see \"Verification by the Verifier\" and \"Manipulation of Disclosures\" sections in the updated document).",
          "createdAt": "2022-11-23T12:31:55Z",
          "updatedAt": "2022-11-23T12:32:06Z"
        }
      ]
    },
    {
      "number": 171,
      "id": "I_kwDOHTmVzM5WJZaI",
      "title": "Refactor the spec text and the code to the approach agreed in IETF 115:",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/171",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "danielfett"
      ],
      "labels": [],
      "body": "Refactor the spec text and the code to the approach agreed in IETF 115 described here:\r\nhttps://docs.google.com/presentation/d/1Hc3xBNN2RL9usCJQKQetrCRk7nYFw6OSLMZPvs1fh_Q/edit?usp=sharing\r\n\r\n`+ probably add Justin's suggestion to put hashes in an array as opposed to having them as separate top-level items.",
      "createdAt": "2022-11-11T10:57:34Z",
      "updatedAt": "2022-11-23T12:30:02Z",
      "closedAt": "2022-11-23T12:30:02Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This was done in PR #174 which has been merged.",
          "createdAt": "2022-11-23T12:30:02Z",
          "updatedAt": "2022-11-23T12:30:02Z"
        }
      ]
    },
    {
      "number": 172,
      "id": "I_kwDOHTmVzM5WJZfQ",
      "title": "add Brian as an editor",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/172",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-11-11T10:57:51Z",
      "updatedAt": "2022-11-23T17:38:39Z",
      "closedAt": "2022-11-23T17:38:39Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "PR in #179 ",
          "createdAt": "2022-11-23T13:11:33Z",
          "updatedAt": "2022-11-23T13:11:33Z"
        }
      ]
    },
    {
      "number": 173,
      "id": "I_kwDOHTmVzM5WigGr",
      "title": "Talk about language tags in claims",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/173",
      "state": "OPEN",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [
        "danielfett"
      ],
      "labels": [],
      "body": "- Add example\r\n- Holder has to release all necessary language tags\r\n",
      "createdAt": "2022-11-16T16:15:35Z",
      "updatedAt": "2022-11-16T16:17:54Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 175,
      "id": "I_kwDOHTmVzM5XC-Js",
      "title": "Location of \"Challenge of Canonicalization Section\"",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/175",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Suggest we move this section lower, as with the new encoding approach I anticipate less questions regarding canonicalization, while this is a good clarification.\r\n\r\nhttps://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/174/files#r1028969018\r\n",
      "createdAt": "2022-11-22T18:52:06Z",
      "updatedAt": "2022-11-22T18:52:06Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 176,
      "id": "I_kwDOHTmVzM5XC-hE",
      "title": "terminology \"Source String hardening\"",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/176",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Might be clear enough, or might need alternative suggestion.\r\n\r\nhttps://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/174/files#r1028968119",
      "createdAt": "2022-11-22T18:53:20Z",
      "updatedAt": "2022-12-02T20:07:00Z",
      "closedAt": null,
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "\"armoring\" is also often used. Let's summon the native speaker to guide us! @bc-pi ",
          "createdAt": "2022-11-28T14:24:30Z",
          "updatedAt": "2022-11-28T14:24:30Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Offhand, I think going back to just \"encoding\" is probably the way to go in this context. ",
          "createdAt": "2022-11-28T18:06:38Z",
          "updatedAt": "2022-11-28T18:06:38Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "On reading it again, \"hardening\" seems okay too. I feel like \"armoring\" is mostly used in a different context so don't like that here. ",
          "createdAt": "2022-12-02T20:07:00Z",
          "updatedAt": "2022-12-02T20:07:00Z"
        }
      ]
    },
    {
      "number": 177,
      "id": "I_kwDOHTmVzM5XDEKY",
      "title": "\"structured data\" or \"nested data\"?",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/177",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "+1 to nested data re conversation here: https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/174/files#r1029001951",
      "createdAt": "2022-11-22T19:11:47Z",
      "updatedAt": "2022-11-22T19:12:15Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 178,
      "id": "I_kwDOHTmVzM5XDFIm",
      "title": "editorial",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/178",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "add a text somewhere before \"combined format for presentation\" saying that \"how to send disclosures alongside SD-JWT\" will be described later in the text.\r\nhttps://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/174/files#r1029003793",
      "createdAt": "2022-11-22T19:15:08Z",
      "updatedAt": "2022-11-22T19:15:17Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 180,
      "id": "I_kwDOHTmVzM5XLrgg",
      "title": "separate sd-jwt and Disclosures using `.` and not `~`",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/180",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "separation between sd-jwt and Disclosures should be ., not ~ for consistency and mental model wise. so `<SD-JWT>.<Disclosure 1>~<Disclosure 2>~...~<Disclosure N>`, instead of `<SD-JWT>~<Disclosure 1>~<Disclosure 2>~...~<Disclosure N>`. ",
      "createdAt": "2022-11-24T02:59:06Z",
      "updatedAt": "2022-12-08T09:56:23Z",
      "closedAt": "2022-12-08T09:56:22Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I guess this depends on the mental model :-)\r\n\r\nFor me, the SD-JWT is primarily a normal JWT. When sending it, some things (the Disclosures) are attached to it. There needs to be a separator different from the ones in the JWT itself for distinguishing the JWT from the \"attachment\". So these two would work in that mental model:\r\n`<SD-JWT>~<Disclosure 1>~<Disclosure 2>~...~<Disclosure N>`\r\nor\r\n`<SD-JWT>~<Disclosure 1>.<Disclosure 2>.<...>.<Disclosure N>`\r\n\r\nI assume that your and the devs' mental model is that the whole thing that is being sent is a special form of JWT that consists of four instead of three parts:\r\n`<Header>.<Payload>.<Signature>.<Attachment>` where the Attachment is the `~`-separated Disclosures.\r\n\r\nThat would mean, however, that the whole Combined Format is a special kind of JWT with four parts. I don't see it that way. The Combined Format is just a means of sending a JWT and some extra data. ",
          "createdAt": "2022-11-24T09:09:45Z",
          "updatedAt": "2022-11-24T09:09:45Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Also, isn't it much easier to separate the document by `~` and then to process the individual parts, instead of splitting by `.` and then re-assembling the JWT?",
          "createdAt": "2022-11-24T09:52:55Z",
          "updatedAt": "2022-11-24T09:52:55Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the concern was that some libraries will take received string and process everything after the last \u2018.\u2019 as a signature, which in SD-JWT case includes disclosures.\n________________________________\nFrom: Daniel Fett ***@***.***>\nSent: Thursday, November 24, 2022 1:53:05 AM\nTo: oauth-wg/oauth-selective-disclosure-jwt ***@***.***>\nCc: Kristina Yasuda ***@***.***>; Author ***@***.***>\nSubject: Re: [oauth-wg/oauth-selective-disclosure-jwt] separate sd-jwt and Disclosures using `.` and not `~` (Issue #180)\n\n\nAlso, isn't it much easier to separate the document by ~ and then to process the individual parts, instead of splitting by . and then re-assembling the JWT?\n\n\u2014\nReply to this email directly, view it on GitHub<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Foauth-wg%2Foauth-selective-disclosure-jwt%2Fissues%2F180%23issuecomment-1326209633&data=05%7C01%7Ckristina.yasuda%40microsoft.com%7C350ba78360eb426828d808dace01afac%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C638048803898080811%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=lwGYrWXo8sV%2FnLlxtme7cCN37MGG5MpIptAYirOQnnM%3D&reserved=0>, or unsubscribe<https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAMTNZUYUHYARAKQOZXW3CALWJ43IDANCNFSM6AAAAAASJUPQUY&data=05%7C01%7Ckristina.yasuda%40microsoft.com%7C350ba78360eb426828d808dace01afac%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C638048803898080811%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=wefrc90v3DXGw0qftPZSFOsxgftEddNbQcan5CTKoCw%3D&reserved=0>.\nYou are receiving this because you authored the thread.Message ID: ***@***.***>\n",
          "createdAt": "2022-11-25T03:51:20Z",
          "updatedAt": "2022-11-25T03:51:20Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I don't understand that. The whole string will fail JWT validation in any case, as it is more than a JWT. Devs need to split it before processing.",
          "createdAt": "2022-11-25T07:36:51Z",
          "updatedAt": "2022-11-25T07:36:51Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "You assume that the JWT Is signed, a JWT May be encrypted and the Number of values separated by . would be 5\r\n\r\nThe libraries used to parse a jwt checks the jwt headers to know if It is signed or encrypted and, where needed, also the typ.\r\n\r\nUsing . would be a pain for the parser libraries (and the implementers). \r\nUsing a typ like `sd+jwt` or `sd+jwt-disclosure` (for an envelope JWT) would be recommended to easy the implementers life.\r\nUsing an envelope jwt (with holder binding claims in It) would be better because this solution represent a self consistent object that could be also encrypted (bringing uniqueness in its presentation and being hard to be tracked on the wire. Its encrypted format would change during each presentation due to claims nonce/aud/iat/ext).\r\n\r\nWe have an issue on the envelope format (cryptable) and a PR for the typ header claim.\r\n\r\nhttps://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/118\r\n\r\nInstead of dealing with separation chars I'm in favor of an envelope schema encoded in JWT, signed or encrypted (nested)\r\n\r\n",
          "createdAt": "2022-11-27T00:19:57Z",
          "updatedAt": "2022-11-28T09:13:21Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "This issue is also related to this thread\r\n\r\nhttps://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/114#issuecomment-1193920626",
          "createdAt": "2022-11-27T00:31:00Z",
          "updatedAt": "2022-11-27T00:31:00Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "IMHO `~` is a more appropriate model.",
          "createdAt": "2022-11-28T13:17:52Z",
          "updatedAt": "2022-11-28T13:17:52Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Let's discuss in our call later.\r\n\r\nSome initial thoughts:\r\n\r\n- If we use the `~` format, Giuseppe makes a good point with the number of dots.\r\n- An envelope increases the size of the data that needs to be transferred.\r\n- An envelope also means we need to think about `alg=none` again in case no signature/encryption is needed.\r\n- It adds two new JWTs that we need to describe and distinguish from existing ones (one JWT at issuance time, one at presentation time)\r\n- How does the envelope and a W3C VP work together?",
          "createdAt": "2022-11-28T13:29:01Z",
          "updatedAt": "2022-11-28T13:29:01Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "`Let's discuss in our call later.` +1 ",
          "createdAt": "2022-11-28T14:35:54Z",
          "updatedAt": "2022-11-28T14:35:54Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": ">     * An envelope increases the size of the data that needs to be transferred.\r\n\r\nOnly if you don't have the optional Holder binding attestation, otherwise it would be quite similar in size.\r\n \r\n>     * An envelope also means we need to think about `alg=none` again in case no signature/encryption is needed.\r\n\r\nthe Holder binding should consider to not use alg=none, otherwise it would be as without the holder binding attestation.\r\n \r\n>     * It adds two new JWTs that we need to describe and distinguish from existing ones (one JWT at issuance time, one at presentation time)\r\n\r\nyes, one is the envelope of another, and the first should have a `typ` claim in the header attesting its scope (combined disclosure)\r\n\r\n>     * How does the envelope and a W3C VP work together?\r\n\r\ngood question, SD-JWT-Combined-Disclosure  and W3C VP are self consistent formats, they should be agnostic and avulse each other. We may use SD-JWT even outside W3C vc-data-model. Anyway the SD-JWT disclosure envelope would be submitted in the W3C VP as it is.\r\n",
          "createdAt": "2022-11-28T14:54:07Z",
          "updatedAt": "2022-11-28T14:54:07Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> > ```\r\n> > * An envelope increases the size of the data that needs to be transferred.\r\n> > ```\r\n> \r\n> Only if you don't have the optional Holder binding attestation, otherwise it would be quite similar in size.\r\n\r\nThere is a size increase due to the added layer of Base64. \r\n\r\nThis is an SD-JWT with Holder Binding according to the current draft in the repo:\r\n\r\n```\r\neyJhbGciOiAiUlMyNTYiLCAia2lkIjogImNBRUlVcUowY21MekQxa3pHemhlaUJhZzBZUkF6VmRsZnhOMjgwTmdIYUEifQ.eyJfc2QiOiBbIk5ZQ29TUktFWXdYZHBlNXlkdUpYQ3h4aHluRVU4ei1iNFR5TmlhcDc3VVkiLCAiU1k4bjJCYmtYOWxyWTNleEhsU3dQUkZYb0QwOUdGOGE5Q1BPLUc4ajIwOCIsICJUUHNHTlBZQTQ2d21CeGZ2MnpuT0poZmRvTjVZMUdrZXpicGFHWkNUMWFjIiwgIlprU0p4eGVHbHVJZFlCYjdDcWtaYkpWbTB3MlY1VXJSZU5UekFRQ1lCanciLCAibDlxSUo5SlRRd0xHN09MRUlDVEZCVnhtQXJ3OFBqeTY1ZEQ2bXRRVkc1YyIsICJvMVNBc0ozM1lNaW9POXBYNVZlQU0xbHh1SEY2aFpXMmtHZGtLS0JuVmxvIiwgInFxdmNxbmN6QU1nWXg3RXlrSTZ3d3RzcHl2eXZLNzkwZ2U3TUJiUS1OdXMiXSwgImlzcyI6ICJodHRwczovL2V4YW1wbGUuY29tL2lzc3VlciIsICJpYXQiOiAxNTE2MjM5MDIyLCAiZXhwIjogMTUxNjI0NzAyMiwgInNkX2RpZ2VzdF9kZXJpdmF0aW9uX2FsZyI6ICJzaGEtMjU2IiwgImNuZiI6IHsiandrIjogeyJrdHkiOiAiUlNBIiwgIm4iOiAicG00Yk9IQmctb1loQXlQV3pSNTZBV1gzclVJWHAxMV9JQ0RrR2dTNlczWldMdHMtaHp3STN4NjU2NTlrZzRoVm85ZGJHb0NKRTNaR0ZfZWFldEUzMFVoQlVFZ3BHd3JEclFpSjl6cXBybWNGZnIzcXZ2a0dqdHRoOFpnbDFlTTJiSmNPd0U3UENCSFdUS1dZczE1MlI3ZzZKZzJPVnBoLWE4cnEtcTc5TWhLRzVRb1dfbVR6MTBRVF82SDRjN1BqV0cxZmpoOGhwV05uYlBfcHY2ZDF6U3daZmM1Zmw2eVZSTDBEVjBWM2xHSEtlMldxZl9lTkdqQnJCTFZrbERUazgtc3RYX01XTGNSLUVHbVhBT3YwVUJXaXRTX2RYSktKdS12WEp5dzE0bkhTR3V4VElLMmh4MXB0dE1mdDlDc3ZxaW1YS2VEVFUxNHFRTDFlRTdpaGN3IiwgImUiOiAiQVFBQiJ9fX0.rV7UrCdR64tA-G0_rjqYaKYukzIJi1RPgvX4eGSk5HHYWPl3-j8LEUnePSX-OlQXe5RgsOqPo9DCj7-CLvKKxam-PbEQZurYX4qEzFyCJUOTMbOTQSLdsSe9tf1pD_yIrJhIscjXiq_mtJww_abdT8fIiS4h8kir2ClZifjNnLkKzqceVgrCipjbt76iZ6m_DGO2jFhU8Zzrat3UZALacw4fRD0l5MGIGHdQcipouhhvVBnWyl6lH8gtcOFMl4YSSoWP9ytFLoahCSRrF5mCo1tSFg3I70v4mk2U59GfcU94GaEB0q6uF__fbEmOClUPX9yOrYryeqjJR0bBRUK_NA~WyIweEd6bjNNaXFzY3RaSV9PcERsQWJRIiwgImFkZHJlc3MiLCB7InN0cmVldF9hZGRyZXNzIjogIjEyMyBNYWluIFN0IiwgImxvY2FsaXR5IjogIkFueXRvd24iLCAicmVnaW9uIjogIkFueXN0YXRlIiwgImNvdW50cnkiOiAiVVMifV0~WyJxUVdtakpsMXMxUjRscWhFTkxScnJ3IiwgImZhbWlseV9uYW1lIiwgIkRvZSJd~WyIzanFjYjY3ejl3a3MwOHp3aUs3RXlRIiwgImdpdmVuX25hbWUiLCAiSm9obiJd~eyJhbGciOiAiUlMyNTYiLCAia2lkIjogIkxkeVRYd0F5ZnJpcjRfVjZORzFSYzEwVThKZExZVHJFQktKaF9oNWlfclUifQ.eyJub25jZSI6ICJYWk9VY28xdV9nRVBrbnhTNzhzV1dnIiwgImF1ZCI6ICJodHRwczovL2V4YW1wbGUuY29tL3ZlcmlmaWVyIiwgImlhdCI6IDE2NjkxOTM3MDR9.Y5xmEip11zOmZR1xvgdbi9IanCNQ4ODJDNW8JKpNvBNOCP2j_DbsCMoYAv6RrOYSzEPZplJ8MlfiZzC9ldcvByiAjWeJbMStZ1vf_K-AJnyNLwnA_v0zVwA0d8rkrIqSQomS5-GqN3zJtUpl2BslLa799UpdCwg7Rfow2wFSfL6S2J9j2mb5Q5UVxTcU27OXcLUn0aN8slIr5AmYd-EcoAqWe8feV6plkHnYac6M9LclgInE5IzwFJTezNmERocADNB7ZGGoy9FzdNdepjnzjFVjazYT0gtR0XgOg5epZoTeOrJwdYT0d5VFwO4ep9_Q591bxnNHfPbr5AhdYALCGg\r\n```\r\nIt has ~2440 chars.\r\n\r\nWith an envelope, the envelope JWT is as follows (quickly put together in jwt.io):\r\n\r\n```\r\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZC1qd3QiOiJleUpoYkdjaU9pQWlVbE15TlRZaUxDQWlhMmxrSWpvZ0ltTkJSVWxWY1Vvd1kyMU1la1F4YTNwSGVtaGxhVUpoWnpCWlVrRjZWbVJzWm5oT01qZ3dUbWRJWVVFaWZRLmV5SmZjMlFpT2lCYklrNVpRMjlUVWt0RldYZFlaSEJsTlhsa2RVcFlRM2g0YUhsdVJWVTRlaTFpTkZSNVRtbGhjRGMzVlZraUxDQWlVMWs0YmpKQ1ltdFlPV3h5V1RObGVFaHNVM2RRVWtaWWIwUXdPVWRHT0dFNVExQlBMVWM0YWpJd09DSXNJQ0pVVUhOSFRsQlpRVFEyZDIxQ2VHWjJNbnB1VDBwb1ptUnZUalZaTVVkclpYcGljR0ZIV2tOVU1XRmpJaXdnSWxwclUwcDRlR1ZIYkhWSlpGbENZamREY1d0YVlrcFdiVEIzTWxZMVZYSlNaVTVVZWtGUlExbENhbmNpTENBaWJEbHhTVW81U2xSUmQweEhOMDlNUlVsRFZFWkNWbmh0UVhKM09GQnFlVFkxWkVRMmJYUlJWa2MxWXlJc0lDSnZNVk5CYzBvek0xbE5hVzlQT1hCWU5WWmxRVTB4YkhoMVNFWTJhRnBYTW10SFpHdExTMEp1Vm14dklpd2dJbkZ4ZG1OeGJtTjZRVTFuV1hnM1JYbHJTVFozZDNSemNIbDJlWFpMTnprd1oyVTNUVUppVVMxT2RYTWlYU3dnSW1semN5STZJQ0pvZEhSd2N6b3ZMMlY0WVcxd2JHVXVZMjl0TDJsemMzVmxjaUlzSUNKcFlYUWlPaUF4TlRFMk1qTTVNREl5TENBaVpYaHdJam9nTVRVeE5qSTBOekF5TWl3Z0luTmtYMlJwWjJWemRGOWtaWEpwZG1GMGFXOXVYMkZzWnlJNklDSnphR0V0TWpVMklpd2dJbU51WmlJNklIc2lhbmRySWpvZ2V5SnJkSGtpT2lBaVVsTkJJaXdnSW00aU9pQWljRzAwWWs5SVFtY3RiMWxvUVhsUVYzcFNOVFpCVjFnemNsVkpXSEF4TVY5SlEwUnJSMmRUTmxjeldsZE1kSE10YUhwM1NUTjROalUyTlRsclp6Um9WbTg1WkdKSGIwTktSVE5hUjBaZlpXRmxkRVV6TUZWb1FsVkZaM0JIZDNKRWNsRnBTamw2Y1hCeWJXTkdabkl6Y1haMmEwZHFkSFJvT0ZwbmJERmxUVEppU21OUGQwVTNVRU5DU0ZkVVMxZFpjekUxTWxJM1p6WktaekpQVm5Cb0xXRTRjbkV0Y1RjNVRXaExSelZSYjFkZmJWUjZNVEJSVkY4MlNEUmpOMUJxVjBjeFptcG9PR2h3VjA1dVlsQmZjSFkyWkRGNlUzZGFabU0xWm13MmVWWlNUREJFVmpCV00yeEhTRXRsTWxkeFpsOWxUa2RxUW5KQ1RGWnJiRVJVYXpndGMzUllYMDFYVEdOU0xVVkhiVmhCVDNZd1ZVSlhhWFJUWDJSWVNrdEtkUzEyV0VwNWR6RTBia2hUUjNWNFZFbExNbWg0TVhCMGRFMW1kRGxEYzNaeGFXMVlTMlZFVkZVeE5IRlJUREZsUlRkcGFHTjNJaXdnSW1VaU9pQWlRVkZCUWlKOWZYMC5yVjdVckNkUjY0dEEtRzBfcmpxWWFLWXVreklKaTFSUGd2WDRlR1NrNUhIWVdQbDMtajhMRVVuZVBTWC1PbFFYZTVSZ3NPcVBvOURDajctQ0x2S0t4YW0tUGJFUVp1cllYNHFFekZ5Q0pVT1RNYk9UUVNMZHNTZTl0ZjFwRF95SXJKaElzY2pYaXFfbXRKd3dfYWJkVDhmSWlTNGg4a2lyMkNsWmlmak5uTGtLenFjZVZnckNpcGpidDc2aVo2bV9ER08yakZoVThaenJhdDNVWkFMYWN3NGZSRDBsNU1HSUdIZFFjaXBvdWhodlZCbld5bDZsSDhndGNPRk1sNFlTU29XUDl5dEZMb2FoQ1NSckY1bUNvMXRTRmczSTcwdjRtazJVNTlHZmNVOTRHYUVCMHE2dUZfX2ZiRW1PQ2xVUFg5eU9yWXJ5ZXFqSlIwYkJSVUtfTkEiLCJkaXNjbG9zdXJlcyI6WyJXeUl3ZUVkNmJqTk5hWEZ6WTNSYVNWOVBjRVJzUVdKUklpd2dJbUZrWkhKbGMzTWlMQ0I3SW5OMGNtVmxkRjloWkdSeVpYTnpJam9nSWpFeU15Qk5ZV2x1SUZOMElpd2dJbXh2WTJGc2FYUjVJam9nSWtGdWVYUnZkMjRpTENBaWNtVm5hVzl1SWpvZ0lrRnVlWE4wWVhSbElpd2dJbU52ZFc1MGNua2lPaUFpVlZNaWZWMCIsIld5SnhVVmR0YWtwc01YTXhValJzY1doRlRreFNjbkozSWl3Z0ltWmhiV2xzZVY5dVlXMWxJaXdnSWtSdlpTSmQiLCJXeUl6YW5GallqWTNlamwzYTNNd09IcDNhVXMzUlhsUklpd2dJbWRwZG1WdVgyNWhiV1VpTENBaVNtOW9iaUpkIl0sIm5vbmNlIjoiYWJjZCIsImF1ZCI6Imh0dHBzOi8vZXhhbXBsZS5jb20ifQ.0T47qH5qwRsWiAVN1JQVdhWAFfD4BIgDCSoJmapd92M\r\n```\r\nThis has ~2700 chars.\r\n\r\n> \r\n> > ```\r\n> > * An envelope also means we need to think about `alg=none` again in case no signature/encryption is needed.\r\n> > ```\r\n> \r\n> the Holder binding should consider to not use alg=none, otherwise it would be as without the holder binding attestation.\r\n\r\nHow would you do HB with an envelope but without alg=none? Just a JSON document?\r\n\r\n> \r\n> > ```\r\n> > * It adds two new JWTs that we need to describe and distinguish from existing ones (one JWT at issuance time, one at presentation time)\r\n> > ```\r\n> \r\n> yes, one is the envelope of another, and the first should have a `typ` claim in the header attesting its scope (combined disclosure)\r\n\r\nIgnoring the inner SD-JWT, two envelopes are needed: One during issuance (no Holder Binding, but maybe encrypted?), one during presentation (with optional HB).\r\n\r\n",
          "createdAt": "2022-11-28T15:14:22Z",
          "updatedAt": "2022-11-28T15:14:22Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "\r\n> There is a size increase due to the added layer of Base64.\r\n\r\nthank you for this empiric analysis, we have roughly the 10% of additional weight using an envelope JWT.\r\n\r\nThe benefit is that an envelope JWT can be encrypted and be tracking resistant on the wire (in short/raw RF links), because the sequence of the bytes would always be different (thanks to variable claims like iat, exp, nonce ...). The disclosure object in the raw concatenation we already have are transmitted in plain b64 encoded text. The potential, and optional, encryption of the envelope JWT (sd-disclosure+jwt or whatever typ) wouldn't be a useless and exceeding security device I believe, it would concretely protect the confidentiality at the data format level.\r\n\r\n> How would you do HB with an envelope but without alg=none? Just a JSON document?\r\n\r\nNot sure to get this, I'm sorry. I mean that I wouldn't support alg=none for HB.\r\n\r\n> Ignoring the inner SD-JWT, two envelopes are needed: One during issuance (no Holder Binding, but maybe encrypted?), one during presentation (with optional HB).\r\n\r\nWell, probably it would be a necessary work of normalization between the two flows and I agree. For the issuance the holder binding would be in the inned SD-JWT (cnf, for example). But probably I'm missing something, my excuses again.\r\n\r\n",
          "createdAt": "2022-11-28T23:52:57Z",
          "updatedAt": "2022-11-28T23:52:57Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> > There is a size increase due to the added layer of Base64.\r\n> \r\n> thank you for this empiric analysis, we have roughly the 10% of additional weight using an envelope JWT.\r\n\r\nThe size increase should be (in the generalized case) around 33%.\r\n\r\n\r\n> The benefit is that an envelope JWT can be encrypted and be tracking resistant on the wire (in short/raw RF links), because the sequence of the bytes would always be different (thanks to variable claims like iat, exp, nonce ...). The disclosure object in the raw concatenation we already have are transmitted in plain b64 encoded text. The potential, and optional, encryption of the envelope JWT (sd-disclosure+jwt or whatever typ) wouldn't be a useless and exceeding security device I believe, it would concretely protect the confidentiality at the data format level.\r\n\r\nI do see the benefit of the encryption, but I think that this should be handled by a lower layer, e.g., BLE encryption. In many cases, there is no benefit from the encryption or signing. In fact, if BLE is used, the 33% increase in size is certainly not desirable.\r\n\r\n> > How would you do HB with an envelope but without alg=none? Just a JSON document?\r\n> \r\n> Not sure to get this, I'm sorry. I mean that I wouldn't support alg=none for HB.\r\n\r\nCan you please provide a full example of what you imaging an SD-JWT issuance and presentation with and without HB look like for the benefit of the discussion? I'd like to avoid that we're talking about different things here.\r\n\r\n> > Ignoring the inner SD-JWT, two envelopes are needed: One during issuance (no Holder Binding, but maybe encrypted?), one during presentation (with optional HB).\r\n> \r\n> Well, probably it would be a necessary work of normalization between the two flows and I agree. For the issuance the holder binding would be in the inned SD-JWT (cnf, for example). But probably I'm missing something, my excuses again.\r\n\r\nAgain, a full example would be helpful to continue this discussion.",
          "createdAt": "2022-11-29T08:04:55Z",
          "updatedAt": "2022-11-29T08:04:55Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> I do see the benefit of the encryption, but I think that this should be handled by a lower layer, e.g., BLE encryption. In many cases, there is no benefit from the encryption or signing. In fact, if BLE is used, the 33% increase in size is certainly not desirable.\r\n\r\nthis implies that the security of the data format is dependant of the transport protocol. I'd prefer to keep it self-consistent also in this aspect\r\n\r\n> Can you please provide a full example of what you imaging an SD-JWT issuance and presentation with and without HB look like for the benefit of the discussion? I'd like to avoid that we're talking about different things here.\r\n\r\ntrue, I should have done that sooner!\r\n\r\nHere a Combined issuance:\r\n````\r\n{\r\n  \"alg\": \"RS256\", \r\n  \"kid\": \"TGBKFdOKy5t-1m2Km4X22n7DEj553yjGJVdprbOjR6c\",\r\n  \"typ\": \"sd+jwt-combined-issuance\"\r\n}\r\n.\r\n{\r\n  \"iss\": \"https://example.com/issuer\",\r\n  \"sub\": \"subject-id\",\r\n  \"iat\": \"unix-timestamp\",\r\n  \"aud\": \"holder-id\",\r\n  \"nonce\": \"that-unique-and-random-sequence\",\r\n  \"sd_jwt\": $sd-jwt,\r\n  \"sd_disclosures\": {\r\n    \"30jdaA9OfGpa3Tj5XJbtWiVrl4i66my26mOnbIuwY0w\": [\"Lz-3RoXunbH2oLZXNRbqLw\", \"number\", \"154554\"],\r\n    ... others ...\r\n  }\r\n}\r\n````\r\n\r\nWhere $sd-jwt is\r\n````\r\n{\r\n  \"alg\": \"RS256\", \r\n  \"kid\": \"TGBKFdOKy5t-1m2Km4X22n7DEj553yjGJVdprbOjR6c\",\r\n  \"typ\": \"sd+jwt\"\r\n}\r\n.\r\n{\r\n  \"_sd\": [\r\n    \"UxYjx8bYA86RGAHOjRjntztJ16doIL9tAFREFeQCKz0\"\r\n  ],\r\n  \"verified_claims\": {\r\n    \"verification\": {\r\n      \"_sd\": [\r\n        \"OKbpoO_RGyeF1FP_X4RI67ytOW5OO5pj8iAEHPPmGzQ\"\r\n      ],\r\n      \"trust_framework\": \"eidas\",\r\n      \"evidence\": [\r\n        {\r\n          \"_sd\": [\r\n            \"DwtOtYlPczP3j0CAGmwK_sG1PS15BePEWennozJtnc4\",\r\n            \"N5X-cmduA_hEiG-2-TFHWlYFPmuPAhgMSDAd5-_0ANw\"\r\n          ],\r\n          \"document\": {\r\n            \"_sd\": [\r\n              \"30jdaA9OfGpa3Tj5XJbtWiVrl4i66my26mOnbIuwY0w\",\r\n              \"Fsu1XL9NW1tHVpytr44jFbXwdhX1avNlRArOzRRj6FQ\",\r\n              \"PPzuOzIrbneVJ49-K3zgqOPDJvFgbipGcU1Psg2BqPY\",\r\n              \"wnXuBaY3ZVHy7qb8zhyVqGjs5ZywuwfDxJ3pIc1vHQo\"\r\n            ],\r\n            \"issuer\": {\r\n              \"_sd\": [\r\n                \"S-K8XHQ5-TipWeWHZNcKLe4gyqoTW8QPl6XXdmnBPiI\",\r\n                \"VBsVXxKHbC7-6dVZcdFg9kU7yCNsPWob4bDcVbZB4-w\"\r\n              ]\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    \"claims\": {\r\n      \"_sd\": [\r\n        \"9C3BrCMDx2zsqn9IhN7siBJXSyZvvJoDYzGsyHhhnZU\",\r\n        \"QVtNjGpLtd7NpJgfjBTMhKwwef4EE2VuEE-jBKQJueA\",\r\n        \"zXwogmNL4aJrhL7OikfJCpDYpPNSA1SyFciDIcWP14k\"\r\n      ]\r\n    }\r\n  },\r\n  \"iss\": \"https://example.com/issuer\",\r\n  \"iat\": 1516239022,\r\n  \"exp\": 1516247022,\r\n  \"sd_digest_derivation_alg\": \"sha-256\"\r\n}\r\n````\r\n\r\nFor combined presentation the same formula of the issuance but with:\r\n\r\n- iss: different, that's the holder\r\n- sub: a pseudonymization issued by the holder is possibile here (additional feature)\r\n- aud: RP entity id \r\n- nonce: another-one\r\n- sd_jwt: as it is\r\n- sd_disclosure: what the end-users decides to disclose\r\n\r\nregarding the header of the presentation, the `typ` would be `sd+jwt-disclosure`.\r\n\r\nMay we add the JWT envelopes keeping at the same time the raw-combined approach with string concatenation in the draft for embedded implementations where size matters? The `typ` and the `~` help also in this, to understand which kind of format we're dealing with\r\n\r\n",
          "createdAt": "2022-11-29T08:59:29Z",
          "updatedAt": "2022-11-29T08:59:29Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Thank you! In your example above, the disclosure is plain JSON, which will require canonicalization for reproducible hashes. Is that intentional?",
          "createdAt": "2022-11-29T09:01:34Z",
          "updatedAt": "2022-11-29T09:01:34Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> Thank you! In your example above, the disclosure is plain JSON, which will require canonicalization for reproducible hashes. Is that intentional?\r\n\r\ngood point. I think that we can adopt base64 encodings instead of plain json array if you agree.\r\n\r\nan important aspect of the proposed new structure is the mapping between the digest and the disclosure (which would be encoded in base64 following our last comments). This better explains the mapping between hashed _sd and related disclosure\r\n\r\nalso the disclosure would be resistant to reply attacks by default",
          "createdAt": "2022-11-29T11:42:55Z",
          "updatedAt": "2022-11-29T11:44:40Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This mapping is a bit dangerous - it allows a verifier to extract the claim contents without verifying the hash. This means that a malicious holder can modify the disclosures and a verifier might not notice it. In the current draft, this mapping is omitted on purpose - it forces verifiers to hash before they can use the contents.",
          "createdAt": "2022-11-29T12:27:22Z",
          "updatedAt": "2022-11-29T12:27:22Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> This mapping is a bit dangerous - it allows a verifier to extract the claim contents without verifying the hash. This means that a malicious holder can modify the disclosures and a verifier might not notice it. In the current draft, this mapping is omitted on purpose - it forces verifiers to hash before they can use the contents.\r\n\r\nwell, in the real world nothing prevents that an implementation simply decodes a JWT without verify its signature and so on, but I got the point and I agree with your strategy. So the mapping can be abandoned and a json array would be applied.",
          "createdAt": "2022-11-29T13:40:03Z",
          "updatedAt": "2022-11-29T13:40:03Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I thought about this a little more and I'm still convinced we're entering a whole new protocol layer with the envelope.\r\n\r\nWith the current proposal, we have:\r\n\r\n- Two byte-level interoperable string formats as output of Issuer and Holder and input to Holder and Verifier.\r\n- These strings can be packed into other objects as necessary.\r\n\r\nWith the envelope we have:\r\n\r\n- Another JWT that we need to explain and distinguish from the inner SD-JWT.\r\n- Fuzzy boundaries between the contents: E.g., we may have two `iat` claims.\r\n- A size increase due to double base64 encoding.\r\n- This may be my main concern: we default to a JWT for presentation, so if we want to skip holder binding, it's either:\r\n  - a deviation from the default by using a base64 encoded JSON, or\r\n  - a JWT with alg=none.\r\n\r\nThe only real advantage that I see for the envelope is the encryption.\r\n\r\nWhat about this?\r\n\r\n- Issuance combined format remains as-is, i.e., `<SD-JWT>~<Disclosure 1>~<Disclosure 2>~...~<Disclosure N>` (`<SD-JWT>~<Disclosure 1>.<Disclosure 2>.<...>.<Disclosure N>` would be fine for me as well)\r\n- Presentation combined format remains as-is, but\r\n- we highlight that the implementers that want to do holder binding using an envelope JWT can do so, and\r\n- implementers that need encryption should use an outer JWT.\r\n\r\nWe will define a claim, e.g., `_sd_jwt_presentation` that contains the presentation combined format in the envelope JWT.  ",
          "createdAt": "2022-12-01T12:47:34Z",
          "updatedAt": "2022-12-01T12:47:34Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> we highlight that the implementers that want to do holder binding using an envelope JWT can do so\r\n\r\nOk\r\n\r\n> implementers that need encryption should use an outer JWT.\r\n\r\nOk\r\n\r\n> We will define a claim, e.g., _sd_jwt_presentation that contains the presentation combined format in the envelope JWT.\r\n\r\nFair enough!",
          "createdAt": "2022-12-06T06:37:54Z",
          "updatedAt": "2022-12-06T06:37:54Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I tried to capture the results of this discussion in a PR. Please review! \r\n\r\nhttps://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/184",
          "createdAt": "2022-12-06T08:44:29Z",
          "updatedAt": "2022-12-06T08:44:29Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This has been addressed with PR #184. We agreed that there is no need for further discussion on the initial suggestion (`.` vs. `~`). I'll therefore close this issue.",
          "createdAt": "2022-12-08T09:56:22Z",
          "updatedAt": "2022-12-08T09:56:22Z"
        }
      ]
    },
    {
      "number": 183,
      "id": "I_kwDOHTmVzM5X0cOL",
      "title": "truncated hashes",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/183",
      "state": "OPEN",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "> Do we need to say anything about truncated hashes here? I think probably so. The [registry](https://www.iana.org/assignments/named-information/named-information.xhtml) has several including sha-256-128, which is probably okay security-wise and even useful as a space saving device. But it also has sha-256-32, which is probably never okay in this context. And a few in between those two that I'm not sure about.\r\n\r\nfrom this PR https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/181#pullrequestreview-1195712714",
      "createdAt": "2022-12-02T19:47:49Z",
      "updatedAt": "2022-12-02T19:47:49Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 185,
      "id": "I_kwDOHTmVzM5YNXmj",
      "title": "more context/background WRT JWT & OAuth ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/185",
      "state": "OPEN",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In response to comments/questions from the WG co-chair (thread: https://mailarchive.ietf.org/arch/msg/oauth/1FBNpziHxR0Y8qHWIY0XYnZ2Q9U/) and the anticipation of maybe seeing similarish lines of questions: Try and add a little more context/background about the indented applicability of SD-JWT and it's relation to JWT and OAuth. But without going too far into the weeds and keeping it appropriate for readers coming in with a variety of prior knowledge and preconceptions or lack thereof. \r\n   \r\n",
      "createdAt": "2022-12-06T18:52:30Z",
      "updatedAt": "2022-12-06T18:52:30Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 188,
      "id": "I_kwDOHTmVzM5YUg5J",
      "title": "Use EC crypto to generate shorter examples",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/188",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [
        "danielfett"
      ],
      "labels": [],
      "body": "Per @bc-pi's comment",
      "createdAt": "2022-12-07T12:13:39Z",
      "updatedAt": "2022-12-15T17:15:06Z",
      "closedAt": "2022-12-15T17:15:05Z",
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "See PR #192 ",
          "createdAt": "2022-12-08T10:38:10Z",
          "updatedAt": "2022-12-08T10:38:10Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "PR merged",
          "createdAt": "2022-12-15T17:15:05Z",
          "updatedAt": "2022-12-15T17:15:05Z"
        }
      ]
    },
    {
      "number": 189,
      "id": "I_kwDOHTmVzM5YUjCG",
      "title": "salt is too short",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/issues/189",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "bc-pi"
      ],
      "labels": [],
      "body": "in https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#name-creating-disclosures ",
      "createdAt": "2022-12-07T12:17:29Z",
      "updatedAt": "2022-12-07T18:51:45Z",
      "closedAt": "2022-12-07T18:51:45Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/commit/88cd058e2bb5813e2d4a2979601656bde08e7900",
          "createdAt": "2022-12-07T18:51:45Z",
          "updatedAt": "2022-12-07T18:51:45Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDOHTmVzM43pGiL",
      "title": "editing introduction",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/1",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "first pass, will cover other sections later",
      "createdAt": "2022-05-11T11:18:30Z",
      "updatedAt": "2022-05-31T19:29:01Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "608a1880f1969d1226bc42ac55129ebfa225f053",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "ky-first",
      "headRefOid": "529d411024cb1b010d86ee0a6de1fcd3b2d03e77",
      "closedAt": "2022-05-31T19:29:01Z",
      "mergedAt": "2022-05-31T19:29:01Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "80d31d9771b77188f392ec064aee6380de4e4b58"
      },
      "comments": [
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I approve of the content in this PR.  (I would use the GitHub \"Approve\" function, but it appears that I may need write or contributor access to the repository to be able to do so.  Could that be added for me?)",
          "createdAt": "2022-05-26T15:22:30Z",
          "updatedAt": "2022-05-26T15:22:30Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM46VXMj",
          "commit": {
            "abbreviatedOid": "4a35c81"
          },
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-19T14:21:36Z",
          "updatedAt": "2022-05-19T14:45:15Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "As discussed, should we extend it to any JSON?",
              "createdAt": "2022-05-19T14:21:37Z",
              "updatedAt": "2022-05-19T14:45:15Z"
            },
            {
              "originalPosition": 45,
              "body": "The same mechanism can be used for\r\n- JWS\r\n- LD-proofs\r\n- JAdES\r\nsignatures.\r\n\r\nMaybe something in a sense:\r\nHowever, in use cases involving verifiable credentials that are long-lived, shared with multiple Clients over a period of time, and are signed so that the validation requires the whole verifiable credential, the user's ability to choose which claims are revealed to a certain Client becomes critical.\r\n\r\nRemark: we should describe that we have (at least) two types of signatures\r\n- conventional signatures that ensure integrity and non-repudiation of an electronic document\r\n- group signatures, multi-message signing protocols, zero-knowledge-proofs that allow proving that a certain claim is an element of the credential (and ensuring the integrity and non-repudiation of the credential)",
              "createdAt": "2022-05-19T14:33:59Z",
              "updatedAt": "2022-05-19T14:45:15Z"
            },
            {
              "originalPosition": 61,
              "body": "I agree to keep the holder binding and SD separate and not go into details here.",
              "createdAt": "2022-05-19T14:37:50Z",
              "updatedAt": "2022-05-19T14:45:15Z"
            },
            {
              "originalPosition": 103,
              "body": "Should the information about the hash function be in the metadata?",
              "createdAt": "2022-05-19T14:39:45Z",
              "updatedAt": "2022-05-19T14:45:15Z"
            },
            {
              "originalPosition": 185,
              "body": "No, if the randomness is of good quality.\r\nWe usually suggest using uuidv4 (and truncating it if it is too big for the use case) -- this way we know people won't think of using function random with seed=0 or seed=timestamp ;)\r\n\r\nIn the security considerations sections we could suggest to use: uuidv4 or something that's standardised",
              "createdAt": "2022-05-19T14:45:01Z",
              "updatedAt": "2022-05-19T14:45:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM46zIA7",
          "commit": {
            "abbreviatedOid": "4a35c81"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "These changes are all worthwhile improvements.",
          "createdAt": "2022-05-26T16:26:18Z",
          "updatedAt": "2022-05-26T16:26:18Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM468wDY",
          "commit": {
            "abbreviatedOid": "4a35c81"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-30T08:47:44Z",
          "updatedAt": "2022-05-30T08:47:44Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Do you mean not limiting claim values to those registered in JWT claims registry? if so, yes, it should not be limited.",
              "createdAt": "2022-05-30T08:47:44Z",
              "updatedAt": "2022-05-30T08:47:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM468ydU",
          "commit": {
            "abbreviatedOid": "4a35c81"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-30T08:54:31Z",
          "updatedAt": "2022-05-30T08:54:32Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "I opened an issue on this, but my 2 cents are...\r\nfrom my understanding, JAdES is close enough to JWS, it should be included. \r\nI do not see the benefit of including LD-Proofs and group signatures, since the whole point of this work was to enable selective disclosure without using those signature formats...",
              "createdAt": "2022-05-30T08:54:31Z",
              "updatedAt": "2022-05-30T08:54:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM468yms",
          "commit": {
            "abbreviatedOid": "4a35c81"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-30T08:54:55Z",
          "updatedAt": "2022-05-30T08:54:55Z",
          "comments": [
            {
              "originalPosition": 103,
              "body": "good point! opened an issue",
              "createdAt": "2022-05-30T08:54:55Z",
              "updatedAt": "2022-05-30T08:56:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM468z5x",
          "commit": {
            "abbreviatedOid": "4a35c81"
          },
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-30T08:58:39Z",
          "updatedAt": "2022-05-30T08:58:40Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Yes. Even more, allowing to use of the approach for any JSON.\r\nWe can add a comment: The approach can be used for any JSON and is not limited to JWT.\r\n\r\nI was even thinking to rename the specs to \"Selective disclosure JSON\"\r\nAs you can use it also with JSON-LD.",
              "createdAt": "2022-05-30T08:58:39Z",
              "updatedAt": "2022-05-30T08:58:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4680WD",
          "commit": {
            "abbreviatedOid": "4a35c81"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-30T08:59:56Z",
          "updatedAt": "2022-05-30T08:59:56Z",
          "comments": [
            {
              "originalPosition": 185,
              "body": "great point, opened an issue",
              "createdAt": "2022-05-30T08:59:56Z",
              "updatedAt": "2022-05-30T08:59:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4680oC",
          "commit": {
            "abbreviatedOid": "b6a8cf4"
          },
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-30T09:00:44Z",
          "updatedAt": "2022-05-30T09:00:44Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM46-f8R",
          "commit": {
            "abbreviatedOid": "4a35c81"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-30T14:53:33Z",
          "updatedAt": "2022-05-30T14:53:33Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "I agree with @Sakurann. ",
              "createdAt": "2022-05-30T14:53:33Z",
              "updatedAt": "2022-05-30T14:53:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM46-izS",
          "commit": {
            "abbreviatedOid": "4a35c81"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-30T15:03:45Z",
          "updatedAt": "2022-05-30T15:03:45Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "@Sakurann Can you please move this into an issue?",
              "createdAt": "2022-05-30T15:03:45Z",
              "updatedAt": "2022-05-30T15:03:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM46-lon",
          "commit": {
            "abbreviatedOid": "4a35c81"
          },
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-30T15:14:19Z",
          "updatedAt": "2022-05-30T15:14:19Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "You're right. See comment: https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/12\r\n\r\nWe can continue using only JWS.",
              "createdAt": "2022-05-30T15:14:19Z",
              "updatedAt": "2022-05-30T15:14:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM47CeeJ",
          "commit": {
            "abbreviatedOid": "b6a8cf4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-31T13:57:17Z",
          "updatedAt": "2022-05-31T13:57:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 6,
      "id": "PR_kwDOHTmVzM44h9oE",
      "title": "Fix JWS versus JWT confusions and introduction wording",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/6",
      "state": "MERGED",
      "author": "selfissued",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #5",
      "createdAt": "2022-05-26T15:58:49Z",
      "updatedAt": "2022-05-30T14:52:04Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "7ec824c6c19ec5ba40d1b05f7d19453837f5a1b0",
      "headRepository": "selfissued/draft-selective-disclosure-jwt",
      "headRefName": "mbj-fix-jws-vs-jwt-and-intro",
      "headRefOid": "dc0cadbc03d652ec873fc763c9ccb333430c179e",
      "closedAt": "2022-05-30T14:52:03Z",
      "mergedAt": "2022-05-30T14:52:03Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "aa9ea1e7c6cd7189b93e6a8d7bf9bab342aa685b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM461T2e",
          "commit": {
            "abbreviatedOid": "dc0cadb"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-27T05:26:07Z",
          "updatedAt": "2022-05-27T05:26:07Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "SD-JWT itself does not have to be signed. That\u2019s why we changed SD-JWS to SD-JWT, right?",
              "createdAt": "2022-05-27T05:26:07Z",
              "updatedAt": "2022-05-27T05:26:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM461T39",
          "commit": {
            "abbreviatedOid": "dc0cadb"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-27T05:26:20Z",
          "updatedAt": "2022-05-27T05:26:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM467zDr",
          "commit": {
            "abbreviatedOid": "dc0cadb"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-30T03:55:05Z",
          "updatedAt": "2022-05-30T03:55:06Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "```suggestion\r\n * A **SD-JWT** is a JWT [@!RFC7519], which can be signed as a JWS [@!RFC7515], that contains claims\r\n```",
              "createdAt": "2022-05-30T03:55:06Z",
              "updatedAt": "2022-05-30T03:55:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4682F6",
          "commit": {
            "abbreviatedOid": "dc0cadb"
          },
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-30T09:04:52Z",
          "updatedAt": "2022-05-30T09:04:53Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "As mentioned in another PR:\r\nShould we add a generic SD-JSON? This way the approach can be also used for JSON-LD or any other JSON object (signed or unsigned).\r\n\r\nThis is a non-blocking comment :)",
              "createdAt": "2022-05-30T09:04:53Z",
              "updatedAt": "2022-05-30T09:05:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4682Qk",
          "commit": {
            "abbreviatedOid": "dc0cadb"
          },
          "author": "alenhorvat",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-30T09:05:22Z",
          "updatedAt": "2022-05-30T09:05:22Z",
          "comments": []
        }
      ]
    },
    {
      "number": 7,
      "id": "PR_kwDOHTmVzM44iGMZ",
      "title": "Change uses of base64url to be consistent with JWS",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/7",
      "state": "MERGED",
      "author": "selfissued",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-05-26T16:36:58Z",
      "updatedAt": "2022-05-31T14:01:22Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "7ec824c6c19ec5ba40d1b05f7d19453837f5a1b0",
      "headRepository": "selfissued/draft-selective-disclosure-jwt",
      "headRefName": "mbj-base64url-consistency",
      "headRefOid": "b1013ca5929ffd7fadc2fc60775e36eb12239851",
      "closedAt": "2022-05-31T14:01:21Z",
      "mergedAt": "2022-05-31T14:01:21Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "e2915f7bf0b252e77a3ce1ae3a32fe74e7cdde1b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM461Jpf",
          "commit": {
            "abbreviatedOid": "b1013ca"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-27T04:00:42Z",
          "updatedAt": "2022-05-27T04:00:43Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Why did you put \u2018-\u2018 only here? \u201cbase64url-encoded\u201d vs \u201cbase64url encoded\u201d",
              "createdAt": "2022-05-27T04:00:43Z",
              "updatedAt": "2022-05-27T04:00:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM461Jsb",
          "commit": {
            "abbreviatedOid": "b1013ca"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Will merge once the \u201c-\u201c comment is resolved ",
          "createdAt": "2022-05-27T04:01:08Z",
          "updatedAt": "2022-05-27T04:01:08Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM47CgHB",
          "commit": {
            "abbreviatedOid": "b1013ca"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-31T14:01:11Z",
          "updatedAt": "2022-05-31T14:01:12Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "This hyphen seems to be correct, actually. https://www.grammarly.com/blog/hyphen/\r\nI'll go ahead with the merge.",
              "createdAt": "2022-05-31T14:01:11Z",
              "updatedAt": "2022-05-31T14:01:12Z"
            }
          ]
        }
      ]
    },
    {
      "number": 15,
      "id": "PR_kwDOHTmVzM44vJMV",
      "title": "not concealing claim names",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/15",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "reflecting conversation in Issuer #3 why we are not hiding claim names",
      "createdAt": "2022-05-31T12:05:25Z",
      "updatedAt": "2022-06-01T11:05:42Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "80d31d9771b77188f392ec064aee6380de4e4b58",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "claim-names",
      "headRefOid": "ea12ed45ebd5f8119418bd21ff0c641e58354eb6",
      "closedAt": "2022-06-01T11:05:41Z",
      "mergedAt": "2022-06-01T11:05:41Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "5f81e4b0fca93e301a47578ec46a46fb626ea8e5"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I propose to move this to the privacy considerations.",
          "createdAt": "2022-06-01T07:24:22Z",
          "updatedAt": "2022-06-01T07:24:22Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "makes sense.",
          "createdAt": "2022-06-01T10:52:03Z",
          "updatedAt": "2022-06-01T10:52:03Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 16,
      "id": "PR_kwDOHTmVzM4410FO",
      "title": "change to SD-JWT-R",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/16",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "addresses issue #10",
      "createdAt": "2022-06-01T11:12:31Z",
      "updatedAt": "2022-06-01T11:54:38Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "5f81e4b0fca93e301a47578ec46a46fb626ea8e5",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "nat-issues",
      "headRefOid": "910692843d96f867763533e41a13faff0f06c15a",
      "closedAt": "2022-06-01T11:54:38Z",
      "mergedAt": "2022-06-01T11:54:38Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "a26474f48d1ea3197c402b878eac28835ef672ea"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 18,
      "id": "PR_kwDOHTmVzM442oOD",
      "title": "Update main.md to fix issue #17",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/18",
      "state": "MERGED",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixing the \"release\" in the sense of a defined term as \"SD-JWT Release\"",
      "createdAt": "2022-06-01T12:57:29Z",
      "updatedAt": "2022-06-01T13:56:19Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "52291dcf97b4c4b84a818d5c0aea16b490b9138e",
      "headRepository": "sakimura/draft-selective-disclosure-jwt",
      "headRefName": "patch-1",
      "headRefOid": "8a8a6db7fce4087cddce9642bcd5d41e26efd694",
      "closedAt": "2022-06-01T13:56:19Z",
      "mergedAt": "2022-06-01T13:56:19Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "68044da35970e5cefe2131a342c46cd7a6c869b1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM47H_DR",
          "commit": {
            "abbreviatedOid": "8a8a6db"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-01T13:13:23Z",
          "updatedAt": "2022-06-01T13:13:23Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\nIn the following section, the concepts of SD-JWTs and SD-JWT-Rs are described at a\r\n```",
              "createdAt": "2022-06-01T13:13:23Z",
              "updatedAt": "2022-06-01T13:13:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM47H_K1",
          "commit": {
            "abbreviatedOid": "8a8a6db"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-01T13:13:41Z",
          "updatedAt": "2022-06-01T13:13:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 19,
      "id": "PR_kwDOHTmVzM445E-B",
      "title": "Some minor edits.",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/19",
      "state": "MERGED",
      "author": "christianpaquin",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Some minor edits:\r\n- consistency of hyphenation in base64url-encode(d)\r\n- use transaction instead of use case in one place because selective might be needed or not within one use case, depending on the interaction with RP\r\n- explicitly called out period character to avoid misinterpreting as missing word\r\n- some typos",
      "createdAt": "2022-06-01T17:42:24Z",
      "updatedAt": "2022-06-09T00:01:19Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "619b426fe981f5ae82273e99ad1bd12a03edd219",
      "headRepository": "christianpaquin/draft-selective-disclosure-jwt",
      "headRefName": "cp-editorial-changes",
      "headRefOid": "f5f3556a10db504887d7dd6faa0fc9d88654fcaa",
      "closedAt": "2022-06-09T00:01:19Z",
      "mergedAt": "2022-06-09T00:01:19Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "70266cf12481638cae0816d3ea62e344c18a2e4e"
      },
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "changed six . separated to four per Christian's separate comment",
          "createdAt": "2022-06-02T04:38:43Z",
          "updatedAt": "2022-06-02T04:38:43Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> changed six . separated to four per Christian's separate comment\r\n\r\nWhat did I miss? The presentation should be six dot separated elements. Three for the SD-JWT, three for the SD-JWT-R.",
          "createdAt": "2022-06-02T08:14:31Z",
          "updatedAt": "2022-06-02T08:14:31Z"
        },
        {
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "body": "> What did I miss? The presentation should be six dot separated elements. Three for the SD-JWT, three for the SD-JWT-R.\r\n\r\nWhy would you need to merge both? I don't understand the proposed flow between issuer, holder, and verifier; perhaps a data flow section would help. I would think the holder gets a 3+1 part JWS with SVC (which can be `.`-concatenated). Then all you need to present to a verifier is the same data, along with some user proof key signature if the JWT is bound to a user key (for which a property is added in the SD-JWT-R, if I understood correctly; more details would be helpful here).\r\n",
          "createdAt": "2022-06-02T12:15:07Z",
          "updatedAt": "2022-06-02T12:15:07Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "creating a separate issue on six vs four period separated elements to merge this editorial PR",
          "createdAt": "2022-06-09T00:01:15Z",
          "updatedAt": "2022-06-09T00:01:15Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM47LtOh",
          "commit": {
            "abbreviatedOid": "9b97e44"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-02T03:02:48Z",
          "updatedAt": "2022-06-02T03:02:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM47L7fe",
          "commit": {
            "abbreviatedOid": "9b97e44"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-02T04:38:01Z",
          "updatedAt": "2022-06-02T04:38:02Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "```suggestion\r\n 2. Check that the presentation consists of four period-separated (`.`) elements; if holder binding is not required, the last element can be empty.\r\n```",
              "createdAt": "2022-06-02T04:38:02Z",
              "updatedAt": "2022-06-02T04:38:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM47hiLr",
          "commit": {
            "abbreviatedOid": "4b012ce"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2022-06-07T18:19:06Z",
          "updatedAt": "2022-06-07T18:19:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM47o5b-",
          "commit": {
            "abbreviatedOid": "4b012ce"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-08T23:58:52Z",
          "updatedAt": "2022-06-08T23:58:52Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "```suggestion\r\n 2. Check that the presentation consists of six period-separated (`.`) elements; if holder binding is not required, the last element can be empty.\r\n```",
              "createdAt": "2022-06-08T23:58:52Z",
              "updatedAt": "2022-06-08T23:58:52Z"
            }
          ]
        }
      ]
    },
    {
      "number": 22,
      "id": "PR_kwDOHTmVzM45Hw4K",
      "title": "clarify SD-JWT-R in the intro",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/22",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Based on the feedback from @b---c\r\n\r\n> https://www.ietf.org/archive/id/draft-fett-oauth-selective-disclosure-jwt-00.html#section-1-2  -> \"This document also defines a format for so-called SD-JWT Releases (SD-JWT-R).\"  - that sentence feels abrupt and doesn't really tell the reader anything. Consider just a bit more about what a SD-JWT-R is/does. Borrowing from https://www.ietf.org/archive/id/draft-fett-oauth-selective-disclosure-jwt-00.html#name-sd-jwt-release-sd-jwt-r maybe \"This document also defines a format for so-called SD-JWT Releases (SD-JWT-R), which conveys a subset of the claim values of an SD-JWT in a verifiable way\" or something along those lines.  Honestly, after reading the doc a few times, I'm unsure whether a SD-JWT-R is the encoded SVC or SD-JWT and SVC Combined Format. Or both. Or something else. And is it for releasing to the holder or the verifier or both? I think there's room for the various terms to be tightened up and clarified. And also in how they are used.",
      "createdAt": "2022-06-05T03:17:11Z",
      "updatedAt": "2022-06-10T18:05:17Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "70266cf12481638cae0816d3ea62e344c18a2e4e",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "clarifying-terms",
      "headRefOid": "78f26ee55b85fee1723169d0aefab88492fd814e",
      "closedAt": "2022-06-10T18:05:16Z",
      "mergedAt": "2022-06-10T18:05:16Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "067ca84759a9d754e60d36c9b7f85c0bb8b72250"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM47hi7w",
          "commit": {
            "abbreviatedOid": "6123a79"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "This review identifies three minor syntax issues.  Once they are addressed, I'll approve.",
          "createdAt": "2022-06-07T18:21:44Z",
          "updatedAt": "2022-06-07T18:25:15Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "convey -> conveys",
              "createdAt": "2022-06-07T18:21:44Z",
              "updatedAt": "2022-06-07T18:25:15Z"
            },
            {
              "originalPosition": 5,
              "body": "SD-JWT -> an SD-JWT (twice)",
              "createdAt": "2022-06-07T18:23:33Z",
              "updatedAt": "2022-06-07T18:25:15Z"
            },
            {
              "originalPosition": 6,
              "body": "mapping -> the mapping",
              "createdAt": "2022-06-07T18:24:02Z",
              "updatedAt": "2022-06-07T18:25:15Z"
            }
          ]
        }
      ]
    },
    {
      "number": 34,
      "id": "PR_kwDOHTmVzM45Wvmn",
      "title": "Binding svc to sd-jwt (Issue #31)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/34",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Issue #31. putting SVC has in SD-JWT to enable holder to match between SD-JWT and SVC",
      "createdAt": "2022-06-08T23:46:43Z",
      "updatedAt": "2022-06-29T00:56:22Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "92d636b7ce337fd5af9714d54d8938f27966d39b",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "binding-svc",
      "headRefOid": "08835dcbf1f09231c9e4514d62b203d9cafb8213",
      "closedAt": "2022-06-29T00:56:22Z",
      "mergedAt": "2022-06-29T00:56:22Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "20a3e05e8e466b6bb8c7cd7b4250a2e1725d145e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM472MrQ",
          "commit": {
            "abbreviatedOid": "6f03ca7"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "\"the ASCII representation of the SVC value\" needs to be more clearly specified.",
          "createdAt": "2022-06-13T09:44:44Z",
          "updatedAt": "2022-06-13T09:45:21Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I have questions about \"the ASCII representation of the SVC value\".  Is this representation the entire SVC, such as in the example at https://www.ietf.org/archive/id/draft-fett-oauth-selective-disclosure-jwt-00.html#section-4.2.2 ?  If so, ASCII should almost certainly be replaced by UTF-8, since JSON can contain non-ASCII characters.  If it's something else, then we also likely need to be more descriptive about what it is.",
              "createdAt": "2022-06-13T09:44:45Z",
              "updatedAt": "2022-06-13T09:45:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48SQIf",
          "commit": {
            "abbreviatedOid": "6f03ca7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-18T12:56:35Z",
          "updatedAt": "2022-06-18T12:56:36Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "UTF-8 contains ASCII, this latter is a subset of the first.\r\nThe hashes are hexadecimal values in ascii format.\r\n\r\nWe may say that the text is good as it is if I'm not missing something @selfissued :)",
              "createdAt": "2022-06-18T12:56:35Z",
              "updatedAt": "2022-06-18T12:56:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48xi4F",
          "commit": {
            "abbreviatedOid": "7acfe61"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-27T05:19:33Z",
          "updatedAt": "2022-06-27T05:19:34Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nThe SVC and SD-JWT are implicitly linked through the hash values of the claims\r\nin the SVC that is included in the SD-JWT. To ensure that the correct SVC and \r\nSD-JWT pairings are being used, the holder should verify the binding between\r\nSVC and SD-JWT, as defined in the Verification Section of this document.\r\n```",
              "createdAt": "2022-06-27T05:19:33Z",
              "updatedAt": "2022-06-27T05:19:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM483rFj",
          "commit": {
            "abbreviatedOid": "cf4efaa"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-28T07:15:53Z",
          "updatedAt": "2022-06-28T07:18:03Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\nSD-JWT pairings are being used, the holder SHOULD verify the binding between\r\n```",
              "createdAt": "2022-06-28T07:15:53Z",
              "updatedAt": "2022-06-28T07:18:03Z"
            },
            {
              "originalPosition": 18,
              "body": "I think this sentence works with and without the comma, but without the comma is probably closer to what we want to say.\r\n\r\n```suggestion\r\nSVC and SD-JWT as defined in the Verification Section of this document.\r\n```",
              "createdAt": "2022-06-28T07:17:57Z",
              "updatedAt": "2022-06-28T07:18:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM487Bhw",
          "commit": {
            "abbreviatedOid": "af30f4e"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Requesting two editorial changes in the Verification section (see comments).",
          "createdAt": "2022-06-28T16:57:44Z",
          "updatedAt": "2022-06-28T17:06:05Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "Replace the first \"following\" with \"perfroming\"\r\n\r\nThe holder SHOULD verify the binding between SD-JWT and SVC by performing the following steps:",
              "createdAt": "2022-06-28T16:57:44Z",
              "updatedAt": "2022-06-28T17:06:05Z"
            },
            {
              "originalPosition": 32,
              "body": "Editorial 0 delete \"and\"\r\n\r\nCheck and that the hashes of the claims in the SVC match those in the SD-JWT",
              "createdAt": "2022-06-28T17:05:18Z",
              "updatedAt": "2022-06-28T17:06:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM488-6R",
          "commit": {
            "abbreviatedOid": "af30f4e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-29T00:55:11Z",
          "updatedAt": "2022-06-29T00:55:11Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "```suggestion\r\nThe holder SHOULD verify the binding between SD-JWT and SVC by performing the following steps:\r\n```",
              "createdAt": "2022-06-29T00:55:11Z",
              "updatedAt": "2022-06-29T00:55:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM488-9u",
          "commit": {
            "abbreviatedOid": "af30f4e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-29T00:55:42Z",
          "updatedAt": "2022-06-29T00:55:43Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "```suggestion\r\n 2. Check that the hashes of the claims in the SVC match those in the SD-JWT\r\n```",
              "createdAt": "2022-06-29T00:55:42Z",
              "updatedAt": "2022-06-29T00:55:43Z"
            }
          ]
        }
      ]
    },
    {
      "number": 35,
      "id": "PR_kwDOHTmVzM45WwtN",
      "title": "adding flow diagram",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/35",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Per [conversation](https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/19#issuecomment-1144794055) in PR #19.\r\nwhat to return to the verifier.",
      "createdAt": "2022-06-08T23:57:36Z",
      "updatedAt": "2022-06-16T10:23:09Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "b9dd05e4c5a5525305a63e10b0661fdbce7c039b",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "flow-diagram",
      "headRefOid": "370ddd991185b6ea9d0358a6d1145b4540444703",
      "closedAt": "2022-06-16T10:23:09Z",
      "mergedAt": "2022-06-16T10:23:09Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "1b3ce71812d78c6da93f29f8cf0967c0d41cb6aa"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM472NNW",
          "commit": {
            "abbreviatedOid": "ec1bb27"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-13T09:46:33Z",
          "updatedAt": "2022-06-13T09:46:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM472NO7",
          "commit": {
            "abbreviatedOid": "ec1bb27"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-13T09:46:37Z",
          "updatedAt": "2022-06-13T09:46:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 38,
      "id": "PR_kwDOHTmVzM45hbpG",
      "title": "security consideration for salt entropy (issue #14)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/38",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Clarifying the requirements for the salt generation and the hash function.",
      "createdAt": "2022-06-12T18:47:00Z",
      "updatedAt": "2022-06-13T15:05:31Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "067ca84759a9d754e60d36c9b7f85c0bb8b72250",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "salt-entropy",
      "headRefOid": "7c85cc440308c794c07e61260782ed46e0e217c6",
      "closedAt": "2022-06-13T15:05:31Z",
      "mergedAt": "2022-06-13T15:05:31Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "dc8212d27010a785fe33b8a300588198f71f4b36"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM472NGQ",
          "commit": {
            "abbreviatedOid": "7c85cc4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-13T09:46:09Z",
          "updatedAt": "2022-06-13T09:46:09Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM472N3f",
          "commit": {
            "abbreviatedOid": "7c85cc4"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2022-06-13T09:48:46Z",
          "updatedAt": "2022-06-13T09:48:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 39,
      "id": "PR_kwDOHTmVzM45hcho",
      "title": "add hash_alg claim to address issue #13",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/39",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "adding `hash_alg` SD-JWT claim \r\n\r\nNote: need to update the examples to include it once we agree this claim is needed (cc @danielfett )",
      "createdAt": "2022-06-12T19:08:31Z",
      "updatedAt": "2022-06-13T16:31:23Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "067ca84759a9d754e60d36c9b7f85c0bb8b72250",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "hash-func",
      "headRefOid": "ac5c4e262c0eac5140d738eaabc82e70c2b95bac",
      "closedAt": "2022-06-13T16:31:23Z",
      "mergedAt": "2022-06-13T16:31:23Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "71ce35be3d7bc0e180951dd64767562fda21c31d"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "We need to say in the checking algorithm that verifiers MUST check the alg and MUST only accept hash_algs they understand and deem secure.",
          "createdAt": "2022-06-13T09:45:21Z",
          "updatedAt": "2022-06-13T09:45:21Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM472Om2",
          "commit": {
            "abbreviatedOid": "c1a0824"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Assuming we're not going to use the trick that OpenID Connect uses to determine the hash algorithm implicitly, then I approve of this approach.",
          "createdAt": "2022-06-13T09:51:12Z",
          "updatedAt": "2022-06-13T09:51:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 40,
      "id": "PR_kwDOHTmVzM45hczt",
      "title": "edit example 1 (Issue #20)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/40",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "removes SVC from the example 1 because it is introduced in the following section (Issue #20)",
      "createdAt": "2022-06-12T19:14:08Z",
      "updatedAt": "2022-06-13T09:41:57Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "067ca84759a9d754e60d36c9b7f85c0bb8b72250",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "example-1",
      "headRefOid": "2dac6b23e0ba0630288b95fe1d2421a4bdb0509d",
      "closedAt": "2022-06-13T09:41:56Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "This should not be merged. The examples are generated from the python code, and here the problem was that this particular example was not properly updated by the python code. I created a fix in PR #46.",
          "createdAt": "2022-06-13T09:41:56Z",
          "updatedAt": "2022-06-13T09:41:56Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 41,
      "id": "PR_kwDOHTmVzM45hnfS",
      "title": "clarify sd-jwt-r format",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/41",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Clarifies text defining SD-JWT-R based on issue #21.",
      "createdAt": "2022-06-12T23:27:37Z",
      "updatedAt": "2022-06-17T05:20:49Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f6d5dc80182979a8417f626718973671e0492790",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "sd-jwt-r",
      "headRefOid": "6f4d445db6f8756666c8b78593addc78e312d298",
      "closedAt": "2022-06-17T05:20:49Z",
      "mergedAt": "2022-06-17T05:20:49Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "82e196b75337bdaa8aace42cc0a7e8884ca5dd68"
      },
      "comments": [
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I approve of @danielfett 's suggested changes.",
          "createdAt": "2022-06-13T10:01:27Z",
          "updatedAt": "2022-06-13T10:01:27Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM472H-U",
          "commit": {
            "abbreviatedOid": "11c13ba"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-06-13T09:29:12Z",
          "updatedAt": "2022-06-13T09:31:47Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "```suggestion\r\nAn SD-JWT-R contains claim values and salts for the claims that the holder \r\nhas consented to release to the Verifier. This enables the Verifier to verify \r\nthe claims received from the holder by computing the hashes of the claim\r\nvalues and the salts revealed in the SD-JWT-R using the hashing algorithm \r\nspecified in the SD-JWT and comparing them to the hash values included in the SD-JWT.\r\n```",
              "createdAt": "2022-06-13T09:29:12Z",
              "updatedAt": "2022-06-13T09:31:47Z"
            },
            {
              "originalPosition": 84,
              "body": "```suggestion\r\nThe following is a non-normative example of an SD-JWT-R for the SD-JWT in Example 2\r\nthat discloses only `region` and `country` of the `address` property:\r\n```",
              "createdAt": "2022-06-13T09:30:03Z",
              "updatedAt": "2022-06-13T09:31:47Z"
            },
            {
              "originalPosition": 96,
              "body": "```suggestion\r\nWhen the holder sends SD-JWT-R to the Verifier, the SD-JWT-R MUST be a base64url-encoded \r\nJWS as described in Section 5.1 of [@!RFC7515]. JWS Compact Serialization and \r\nJWS JSON Serialization can be used.\r\n```",
              "createdAt": "2022-06-13T09:31:05Z",
              "updatedAt": "2022-06-13T09:31:47Z"
            },
            {
              "originalPosition": 104,
              "body": "```suggestion\r\nBelow is a non-normative example of a representation of the SD-JWT-R for the SD-JWT\r\ngiven in Example 1 using JWS Compact Serialization:\r\n```",
              "createdAt": "2022-06-13T09:31:37Z",
              "updatedAt": "2022-06-13T09:31:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM472TBP",
          "commit": {
            "abbreviatedOid": "11c13ba"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "The wording \"base64url-encoded JWS\" needs to be corrected, as described in the PR comments.  Also, the JWS serializations supported need to be explicitly discussed if we're going to support both serializations.",
          "createdAt": "2022-06-13T10:05:42Z",
          "updatedAt": "2022-06-13T10:15:44Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "\"base64url-encode JWS\" is a confusing description.  If the JWS uses the Compact Serialization, its parts are already base64url-encoded, therefore, one wouldn't re-encoded the JWS (which the current wording seems to imply).  Whereas, if it uses the JSON Serialization, then yes, one would need to base64url-encode it.  This should be clarified in the description.",
              "createdAt": "2022-06-13T10:05:42Z",
              "updatedAt": "2022-06-13T10:15:44Z"
            },
            {
              "originalPosition": 95,
              "body": "[5.1](https://datatracker.ietf.org/doc/html/rfc7515#section-5.1).  Message Signature or MAC Computation doesn't seem like the section that you meant to reference.",
              "createdAt": "2022-06-13T10:08:15Z",
              "updatedAt": "2022-06-13T10:15:44Z"
            },
            {
              "originalPosition": 96,
              "body": "Again, \"base64url-encoded JWS\" needs to be corrected, as described in a previous comment.",
              "createdAt": "2022-06-13T10:10:00Z",
              "updatedAt": "2022-06-13T10:15:44Z"
            },
            {
              "originalPosition": 96,
              "body": "Are we saying somewhere why are allowing the use of the JWS JSON Serialization?  On the surface of it, this will surprise people, as JWTs only permit the use of the Compact Serialization - so as to improve interoperability.  Many JWS implementations only support the Compact Serialization.\r\n\r\nThis should be discussed in its own section possibly called \"JWS Serializations Supported\", rather than introduced in passing, as it is in the current PR.",
              "createdAt": "2022-06-13T10:14:02Z",
              "updatedAt": "2022-06-13T10:15:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4721eS",
          "commit": {
            "abbreviatedOid": "11c13ba"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-13T12:14:29Z",
          "updatedAt": "2022-06-13T12:14:30Z",
          "comments": [
            {
              "originalPosition": 96,
              "body": "Also, see my comment https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/12#issuecomment-1153834228 .  I really don't think we should support signing formats other than the JWS Compact Serialization in the core SD-JWT spec.  If we want to define SD-JWT-like data structures using other signing formats, that should happen in different specification(s).",
              "createdAt": "2022-06-13T12:14:29Z",
              "updatedAt": "2022-06-13T12:14:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48IUH-",
          "commit": {
            "abbreviatedOid": "11c13ba"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-16T10:08:19Z",
          "updatedAt": "2022-06-16T10:08:19Z",
          "comments": [
            {
              "originalPosition": 95,
              "body": "thank you, it was 7.1",
              "createdAt": "2022-06-16T10:08:19Z",
              "updatedAt": "2022-06-16T10:08:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48IUTL",
          "commit": {
            "abbreviatedOid": "11c13ba"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-16T10:08:54Z",
          "updatedAt": "2022-06-16T10:08:55Z",
          "comments": [
            {
              "originalPosition": 96,
              "body": "agreed not to allow JWS JSON Serialization in this main profile",
              "createdAt": "2022-06-16T10:08:54Z",
              "updatedAt": "2022-06-16T10:08:55Z"
            }
          ]
        }
      ]
    },
    {
      "number": 42,
      "id": "PR_kwDOHTmVzM45hn1Y",
      "title": "clarify confusion around `_sd`",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/42",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As pointed out in the issuer #25, it is very confusing to have three separate objects that are all called `_sd`:\r\nRenaming them as follows\r\n`_sd` in SD-JWT -> `sd_hashes`\r\n`_sd` in SVC -> `sd_container`\r\n`_sd` in SD-JWT-R -> `_sd_container` ",
      "createdAt": "2022-06-12T23:38:07Z",
      "updatedAt": "2022-06-23T12:51:46Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "c6ef2461089d7787f22e390d1ccec0d22479eec4",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "claims-container",
      "headRefOid": "eabfbdb5bb454f200e40a6ef2eab03e762fb7c1b",
      "closedAt": "2022-06-23T12:51:46Z",
      "mergedAt": "2022-06-23T12:51:46Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "acd6034de1c06c3804cb5bee22dff0c6bfce5eff"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "NONE",
          "body": "What's the reasoning for `_sd_container` and `sd_container`? They are the same thing. Just in different contexts. ",
          "createdAt": "2022-06-13T11:12:01Z",
          "updatedAt": "2022-06-13T11:12:01Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "+1 for the underscore.\r\n\r\n'container' is not very descriptive here, what about `_sd_releases`?",
          "createdAt": "2022-06-13T12:15:28Z",
          "updatedAt": "2022-06-13T12:15:28Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Also, the changes to the examples will not stick, we need to modify the python code.",
          "createdAt": "2022-06-13T12:15:46Z",
          "updatedAt": "2022-06-13T12:15:46Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "NONE",
          "body": "Aggregated and Distributed Claims are a rarely used corner of OIDC so calling that convention is a bit of an overstatement. Using an underscore as a halfhearted qualifier isn't really in the spirit of RFC7519's treatment of claim names either. \r\nUse an underscore if you want. But explain what it is supposed to mean. And register the claim. Don't assume it has special powers. ",
          "createdAt": "2022-06-13T14:41:20Z",
          "updatedAt": "2022-06-13T14:41:20Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "agreed to have two containers only: sd_digests and sd_release.\r\nKristina to investigate wrt the usage of `_` but leaning towards not using it as a starting point.",
          "createdAt": "2022-06-14T07:12:37Z",
          "updatedAt": "2022-06-14T07:12:37Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM472YAC",
          "commit": {
            "abbreviatedOid": "5b070b6"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I agree that we should differentiate between these different claims.  However, per issue #4 , we should follow the convention of using the \"_\" prefix in the names of all meta-claims.  Please apply the prefix, then I will approve.  (That, or convince me that some of them are not meta-claims, and I'll also approve after that discussion.)",
          "createdAt": "2022-06-13T10:23:43Z",
          "updatedAt": "2022-06-13T10:23:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM48NRXH",
          "commit": {
            "abbreviatedOid": "66490a9"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-17T07:32:33Z",
          "updatedAt": "2022-06-17T07:32:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 43,
      "id": "PR_kwDOHTmVzM45hrLC",
      "title": "clarify how a term `payload` is used",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/43",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As pointed out in Issuer #26, a term payload has been used to characterize an object with a set of claims that the Issuer is trying to disclose using SD-JWT. Also clarifies when it is an example of an entire SD-JWT payload or just an `_sd` object.\r\n\r\nNote: I would suggest using only Example 1 of 'flat' SD-JWT in the main text and move Example 2 to the Annex.",
      "createdAt": "2022-06-13T00:38:31Z",
      "updatedAt": "2022-06-16T10:31:58Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "1b3ce71812d78c6da93f29f8cf0967c0d41cb6aa",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "sd-jwt-payload",
      "headRefOid": "b015372a894548d4c22a0af919fab75ebc018bd4",
      "closedAt": "2022-06-16T10:31:58Z",
      "mergedAt": "2022-06-16T10:31:58Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "f6d5dc80182979a8417f626718973671e0492790"
      },
      "comments": [
        {
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with @danielfett 's suggested changes.",
          "createdAt": "2022-06-13T10:55:34Z",
          "updatedAt": "2022-06-13T10:55:34Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM472GLn",
          "commit": {
            "abbreviatedOid": "f9126e0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-06-13T09:23:26Z",
          "updatedAt": "2022-06-13T09:26:02Z",
          "comments": [
            {
              "originalPosition": 115,
              "body": "```suggestion\r\nIn this example, the Issuer is using the following object as a set of claims to issue to the Holder:\r\n```",
              "createdAt": "2022-06-13T09:23:26Z",
              "updatedAt": "2022-06-13T09:26:02Z"
            },
            {
              "originalPosition": 96,
              "body": "```suggestion\r\nAn SVC can consist of the following claims:\r\n```",
              "createdAt": "2022-06-13T09:23:47Z",
              "updatedAt": "2022-06-13T09:26:02Z"
            },
            {
              "originalPosition": 76,
              "body": "```suggestion\r\nis using a flat structure, i.e., all of the values in the `address` claim can only be disclosed in full.\r\n```",
              "createdAt": "2022-06-13T09:24:34Z",
              "updatedAt": "2022-06-13T09:26:02Z"
            },
            {
              "originalPosition": 58,
              "body": "```suggestion\r\nand Example 2 is a non-normative example of an SD-JWT using a 'structured' `_sd` object.\r\n```",
              "createdAt": "2022-06-13T09:25:17Z",
              "updatedAt": "2022-06-13T09:26:02Z"
            },
            {
              "originalPosition": 59,
              "body": "```suggestion\r\nThe difference between the examples is how the `address` claim is disclosed.\r\n```",
              "createdAt": "2022-06-13T09:25:29Z",
              "updatedAt": "2022-06-13T09:26:02Z"
            },
            {
              "originalPosition": 61,
              "body": "```suggestion\r\nBoth examples use the following object as the set of claims that the Issuer is issuing:\r\n```",
              "createdAt": "2022-06-13T09:25:54Z",
              "updatedAt": "2022-06-13T09:26:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM472heE",
          "commit": {
            "abbreviatedOid": "f9126e0"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I'm good to go with this once @danielfett 's suggestions have been incorporated.",
          "createdAt": "2022-06-13T10:59:15Z",
          "updatedAt": "2022-06-13T10:59:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM4720ne",
          "commit": {
            "abbreviatedOid": "f9126e0"
          },
          "author": "selfissued",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Please see the content of my previous approval.  I clicked the wrong part of the page and cleared my \"reviewed\" status.",
          "createdAt": "2022-06-13T12:11:28Z",
          "updatedAt": "2022-06-13T12:11:28Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM47-NE6",
          "commit": {
            "abbreviatedOid": "cd6d387"
          },
          "author": "bc-pi",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-14T16:16:59Z",
          "updatedAt": "2022-06-14T16:16:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 45,
      "id": "PR_kwDOHTmVzM45h0C8",
      "title": "adding an example of a SD-JWT-R as a W3C VP in example 3",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/45",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "per issue #2 ",
      "createdAt": "2022-06-13T01:53:21Z",
      "updatedAt": "2022-09-19T07:17:33Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "71ce35be3d7bc0e180951dd64767562fda21c31d",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "jwt-vp-example",
      "headRefOid": "e3526dca4bac5ebf0e2ddd4785e56acaa044a267",
      "closedAt": "2022-06-14T05:52:12Z",
      "mergedAt": "2022-06-14T05:52:12Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "b9dd05e4c5a5525305a63e10b0661fdbce7c039b"
      },
      "comments": [
        {
          "author": "Muthurajj",
          "authorAssociation": "NONE",
          "body": "Where this file i could find it?\r\n",
          "createdAt": "2022-09-19T07:17:33Z",
          "updatedAt": "2022-09-19T07:17:33Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM472JqH",
          "commit": {
            "abbreviatedOid": "240b735"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "This seems to be based not on master, but to include some changes from other pull requests. I'll review again after the other pull requests are in master.",
          "createdAt": "2022-06-13T09:34:39Z",
          "updatedAt": "2022-06-13T09:34:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 46,
      "id": "PR_kwDOHTmVzM45jFpG",
      "title": "Fix example (Issue #20)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/46",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This replaces PR #40 ",
      "createdAt": "2022-06-13T09:40:55Z",
      "updatedAt": "2022-06-13T15:24:02Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "067ca84759a9d754e60d36c9b7f85c0bb8b72250",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/fix-example",
      "headRefOid": "efe60f50f27b93f88a44c6e5b5cc0c7d5a58cdde",
      "closedAt": "2022-06-13T15:24:02Z",
      "mergedAt": "2022-06-13T15:24:02Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "510e25139ed3fa8dbf6021f2822833234874c2f4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM473_cN",
          "commit": {
            "abbreviatedOid": "efe60f5"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-13T15:23:56Z",
          "updatedAt": "2022-06-13T15:23:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 52,
      "id": "PR_kwDOHTmVzM45xIZl",
      "title": "clarify that signing SD-JWT is mandatory",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/52",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Per Issue #48 and #49\r\n(first draft, needs some elaboration why sign/not sign)",
      "createdAt": "2022-06-16T10:54:43Z",
      "updatedAt": "2022-06-17T07:14:46Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f6d5dc80182979a8417f626718973671e0492790",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "sign-sd-jwt",
      "headRefOid": "9296150c8964e0d3b26507b88d247b659b28ace8",
      "closedAt": "2022-06-17T07:14:45Z",
      "mergedAt": "2022-06-17T07:14:45Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "6e35f2134d87a030ee8913d6bf8499c6e4d85eac"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 54,
      "id": "PR_kwDOHTmVzM45xgQJ",
      "title": "Fixes #53 verifies HOLDER_PUBLIC_KEY from sub_jwk",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/54",
      "state": "MERGED",
      "author": "kushaldas",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We now verify that the HOLDER_PUBLIC_KEY is the same from `sub_jwk` of the *SD-JWT* payload.\r\n\r\nFixes #53. ",
      "createdAt": "2022-06-16T12:39:18Z",
      "updatedAt": "2022-06-17T07:12:27Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f6d5dc80182979a8417f626718973671e0492790",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "update_holder_claim",
      "headRefOid": "57fa8f9212150f78a9020233a3211f4a4c8c11df",
      "closedAt": "2022-06-17T07:12:26Z",
      "mergedAt": "2022-06-17T07:12:26Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "090d31ebd67f857e6368b8c1e7f062c5f670a9ae"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 55,
      "id": "PR_kwDOHTmVzM451Hng",
      "title": "minimum reference to the holder binding.",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/55",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Issue #24 and #23.\r\n\r\nDescribing the concept of holder binding and giving minimum directions on:\r\n- find pubKey in SD-JWT\r\n- Sign SD-JWT-R using privKey bound to a pubKey in SD-JWT\r\n\r\nbut leaving details to the profiles and implementations.",
      "createdAt": "2022-06-17T05:15:08Z",
      "updatedAt": "2022-06-18T04:16:52Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f6d5dc80182979a8417f626718973671e0492790",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "holder-binding",
      "headRefOid": "b7e9124be3ac7761ae31dceb719367d5a96f3f9f",
      "closedAt": "2022-06-18T04:16:51Z",
      "mergedAt": "2022-06-18T04:16:51Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "8958924a2d14f359ccee79110f95832d09d8d2bf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM48O8mc",
          "commit": {
            "abbreviatedOid": "b7e9124"
          },
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-17T14:04:37Z",
          "updatedAt": "2022-06-17T14:04:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 56,
      "id": "PR_kwDOHTmVzM451chm",
      "title": "This adds the hash_alg key as introduced in PR #39",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/56",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-06-17T07:31:53Z",
      "updatedAt": "2022-06-23T08:25:08Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "0806868914604aa4e3ab2132ff1a35c8c5a69313",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/fix-examples-pr39",
      "headRefOid": "10d480fa633ba09f14e624235c07cc560deac13b",
      "closedAt": "2022-06-23T08:25:08Z",
      "mergedAt": "2022-06-23T08:25:08Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "c6ef2461089d7787f22e390d1ccec0d22479eec4"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 58,
      "id": "PR_kwDOHTmVzM4518Af",
      "title": "chore: [README] demo text and .gitignore",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/58",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- fix: README typos\r\n- feat: .gitignore\r\n- chore: examples update",
      "createdAt": "2022-06-17T09:55:53Z",
      "updatedAt": "2022-06-17T14:11:31Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "6e35f2134d87a030ee8913d6bf8499c6e4d85eac",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "demo-readme",
      "headRefOid": "f6b567bae0bef5dc2aa22da69c13a0119ff62f3d",
      "closedAt": "2022-06-17T14:11:31Z",
      "mergedAt": "2022-06-17T14:11:31Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "4c922dea83b10e95916ddb1545feedb297ceab7d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM48O-aE",
          "commit": {
            "abbreviatedOid": "f6b567b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-17T14:10:31Z",
          "updatedAt": "2022-06-17T14:10:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 61,
      "id": "PR_kwDOHTmVzM452UPv",
      "title": "chore: [demo] python code refactor",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/61",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Some code linting and cleanup I made reading the code and getting stuffs from it",
      "createdAt": "2022-06-17T11:55:32Z",
      "updatedAt": "2022-07-06T18:03:55Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "3de8e4113e59a95e92e5a9c03d2d266cb0e33e4d",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "pyrefactor",
      "headRefOid": "93b33f923c4845a06b8950f13ececa8c92e2d660",
      "closedAt": "2022-07-06T18:03:55Z",
      "mergedAt": "2022-07-06T18:03:55Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "0166cde0c195a70aa1241ef25ce0de44e6fce4d4"
      },
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "I'd like to continue working on this to facilitate the migration in the future of this code to a real pypi python package\r\n\r\nwe may consider setup.py/poetry and also the adoption of argparse (py stdlib) to handle the inline command arguments\r\n\r\nthe simple and the structured SD-JWT may be handled with a proper argument, like `-type set(simple, structured)` where structured may be the default one ",
          "createdAt": "2022-06-18T10:03:51Z",
          "updatedAt": "2022-06-18T10:04:12Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Thanks for working on this! Very much needed and welcome clean-up of the code!",
          "createdAt": "2022-06-22T07:02:48Z",
          "updatedAt": "2022-06-22T07:02:48Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you @danielfett \r\n\r\nI think that this PR can be improved but first of all we may decide if merge as it is and right now and implement asap the hash_alg claim and all the other improvements that we can actually have. Probably aklso the encryption, I'd move your code to another PR aligned to this, or you or together, the same for me.\r\n\r\nI'd prevent to leave this code as PR and moving ahead the legacy code in the meantime, this would cause to me to spend more effort to aling the code. But that's not for hurry but just to get your point of view in a milestone",
          "createdAt": "2022-06-22T09:39:35Z",
          "updatedAt": "2022-06-22T09:39:35Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Looking forward to merging this once it is ready, finally clean python code :-) ",
          "createdAt": "2022-06-30T08:50:27Z",
          "updatedAt": "2022-06-30T08:50:27Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Before merging this, do we have to revert this commit?\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/4a4575f36906c61471179b8b530f47d980853ba1\r\n\r\nit seems that's linked to an ingoing discussion here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/60\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/83",
          "createdAt": "2022-07-04T09:37:03Z",
          "updatedAt": "2022-07-04T09:39:21Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Yes, please remove.",
          "createdAt": "2022-07-04T09:56:06Z",
          "updatedAt": "2022-07-04T09:56:06Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> Yes, please remove.\r\n\r\nDone here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/18a45e742ddcf285eb7c982fc6104365928b52ed",
          "createdAt": "2022-07-04T09:58:59Z",
          "updatedAt": "2022-07-04T09:58:59Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM48Vdnl",
          "commit": {
            "abbreviatedOid": "6136437"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-06-20T13:18:44Z",
          "updatedAt": "2022-06-20T13:20:31Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "Can you please change this so it observes the \"no randomness\" mode (which would better be called \"reduced randomness\")? This way, we get less changes lines in git when the examples are recreated.",
              "createdAt": "2022-06-20T13:18:44Z",
              "updatedAt": "2022-06-20T13:20:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48VjMP",
          "commit": {
            "abbreviatedOid": "6136437"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-20T13:34:10Z",
          "updatedAt": "2022-06-20T13:34:11Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "Ok, so this code has also the scope to put examples in the specs\r\n\r\nI'll put an argparse CLI with parameters to get static values or random one. Do you approve this approach?",
              "createdAt": "2022-06-20T13:34:10Z",
              "updatedAt": "2022-06-20T13:34:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48V10d",
          "commit": {
            "abbreviatedOid": "6136437"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-20T14:11:37Z",
          "updatedAt": "2022-06-20T14:11:37Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "Yes! The code is rough around the edges and argparse should be in there anyway :-)",
              "createdAt": "2022-06-20T14:11:37Z",
              "updatedAt": "2022-06-20T14:11:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48WVs9",
          "commit": {
            "abbreviatedOid": "6136437"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-20T15:49:59Z",
          "updatedAt": "2022-06-20T15:50:00Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "consider it done",
              "createdAt": "2022-06-20T15:50:00Z",
              "updatedAt": "2022-06-20T15:50:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48fX6f",
          "commit": {
            "abbreviatedOid": "8fc20d7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-22T09:40:30Z",
          "updatedAt": "2022-06-22T09:40:30Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "@danielfett probably in the update example we may use the same salt to prevent useless changes in the draft",
              "createdAt": "2022-06-22T09:40:30Z",
              "updatedAt": "2022-06-22T09:40:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48fYHi",
          "commit": {
            "abbreviatedOid": "8fc20d7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-22T09:41:06Z",
          "updatedAt": "2022-06-22T09:41:07Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "I'd move these two functions in a `utils.py` file",
              "createdAt": "2022-06-22T09:41:07Z",
              "updatedAt": "2022-06-22T09:41:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48fYbN",
          "commit": {
            "abbreviatedOid": "8fc20d7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-22T09:42:03Z",
          "updatedAt": "2022-06-22T09:42:04Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "this is actually not used :)\r\n\r\nyes, I can bind it and also we may add some relevant loggin call in the `operations.py` and `walk.py` files\r\n",
              "createdAt": "2022-06-22T09:42:04Z",
              "updatedAt": "2022-06-22T09:42:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48fY1v",
          "commit": {
            "abbreviatedOid": "8fc20d7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-22T09:43:22Z",
          "updatedAt": "2022-06-22T09:43:22Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "we may use the `--no-randomness` to obtain a constant salt value from the demo_settings file",
              "createdAt": "2022-06-22T09:43:22Z",
              "updatedAt": "2022-06-22T09:43:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48oFQO",
          "commit": {
            "abbreviatedOid": "8fc20d7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-23T14:43:09Z",
          "updatedAt": "2022-06-23T14:43:09Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "Done here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/0b17a2be43a62af6a02ebd9df220a77543d32748",
              "createdAt": "2022-06-23T14:43:09Z",
              "updatedAt": "2022-06-23T14:43:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48oHo0",
          "commit": {
            "abbreviatedOid": "8fc20d7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-23T14:46:40Z",
          "updatedAt": "2022-06-23T14:46:41Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "Done here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/4bf338d46731e5be6d3b71c5440df83be746f986",
              "createdAt": "2022-06-23T14:46:40Z",
              "updatedAt": "2022-06-23T14:46:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48pGm6",
          "commit": {
            "abbreviatedOid": "0274d85"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-23T17:36:05Z",
          "updatedAt": "2022-06-23T17:36:05Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "This is the only pending thing to do asap, because if we submit a custom settings, well, the paramenter MUST be taken by this latter\r\n\r\nanyway it would be better to start a revision and merge in the main branch to prevent other misalignment with the ingoing changes, I'll do this refactor asap",
              "createdAt": "2022-06-23T17:36:05Z",
              "updatedAt": "2022-06-23T17:36:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48qEU6",
          "commit": {
            "abbreviatedOid": "0274d85"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-23T21:19:38Z",
          "updatedAt": "2022-06-23T21:19:39Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "then I did in this way\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/71fdac35404c0127c21fcce9fbd3b386b932a434",
              "createdAt": "2022-06-23T21:19:39Z",
              "updatedAt": "2022-06-23T21:19:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48xU2G",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-27T03:26:27Z",
          "updatedAt": "2022-06-27T03:26:28Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "\"instead of\" what? - needs clarification ",
              "createdAt": "2022-06-27T03:26:28Z",
              "updatedAt": "2022-06-27T03:26:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48xd-a",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-27T04:46:33Z",
          "updatedAt": "2022-06-27T04:46:33Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "It's the text that's actually Is in the rradme, moving in another Place needs ti be rephrased. Thelat instead point to the alternative pip installation, i'll fix this, thanks",
              "createdAt": "2022-06-27T04:46:33Z",
              "updatedAt": "2022-06-27T04:46:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48eeOz",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-06-22T06:56:31Z",
          "updatedAt": "2022-06-27T11:27:08Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "The help text does not match the argument.",
              "createdAt": "2022-06-22T06:56:31Z",
              "updatedAt": "2022-06-27T11:27:08Z"
            },
            {
              "originalPosition": 145,
              "body": "```suggestion\r\n# They may came from a custom python settings file :-)\r\n```",
              "createdAt": "2022-06-22T06:57:02Z",
              "updatedAt": "2022-06-27T11:27:08Z"
            },
            {
              "originalPosition": 260,
              "body": "I didn't find to do the following so far, but if you have time, it would be good for clean up:\r\n\r\n- Generalize the function `replace_all_in_main` - e.g., `example-simple` could be an argument - so that we only need to define this once.\r\n- Throw out all 'print' statements above\r\n- Instead produce the CLI output from the `replacements` dict that is created below (e.g., print `replacements['structured-sd-jwt-claims']` instead of the `print_repr` in Line 172.",
              "createdAt": "2022-06-22T07:02:01Z",
              "updatedAt": "2022-06-27T11:27:08Z"
            },
            {
              "originalPosition": 2,
              "body": "Any objections against using black instead?",
              "createdAt": "2022-06-27T11:21:44Z",
              "updatedAt": "2022-06-27T11:27:08Z"
            },
            {
              "originalPosition": 3,
              "body": "```suggestion\r\nDEFAULT_SIGNING_ALG = \"RS256\"\r\n```",
              "createdAt": "2022-06-27T11:22:02Z",
              "updatedAt": "2022-06-27T11:27:08Z"
            },
            {
              "originalPosition": 16,
              "body": "```suggestion\r\n    DEFAULT_SIGNING_ALG, \r\n```",
              "createdAt": "2022-06-27T11:22:22Z",
              "updatedAt": "2022-06-27T11:27:08Z"
            },
            {
              "originalPosition": 84,
              "body": "```suggestion\r\n    _alg = sign_alg or DEFAULT_SIGNING_ALG\r\n```",
              "createdAt": "2022-06-27T11:22:33Z",
              "updatedAt": "2022-06-27T11:27:08Z"
            },
            {
              "originalPosition": 135,
              "body": "```suggestion\r\n    _alg = sign_alg or DEFAULT_SIGNING_ALG\r\n```",
              "createdAt": "2022-06-27T11:22:42Z",
              "updatedAt": "2022-06-27T11:27:08Z"
            },
            {
              "originalPosition": 198,
              "body": "```suggestion\r\n    _alg = sign_alg or DEFAULT_SIGNING_ALG\r\n```",
              "createdAt": "2022-06-27T11:22:53Z",
              "updatedAt": "2022-06-27T11:27:08Z"
            },
            {
              "originalPosition": 37,
              "body": "The help text does not match the switch that is defined here.",
              "createdAt": "2022-06-27T11:25:27Z",
              "updatedAt": "2022-06-27T11:27:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48807f",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-28T23:26:42Z",
          "updatedAt": "2022-06-28T23:26:42Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "black is ok",
              "createdAt": "2022-06-28T23:26:42Z",
              "updatedAt": "2022-06-28T23:26:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4881C_",
          "commit": {
            "abbreviatedOid": "8fc20d7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-28T23:27:40Z",
          "updatedAt": "2022-06-28T23:27:40Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "my bad, I'll do it, I'll take a week because I'm out of office right now",
              "createdAt": "2022-06-28T23:27:40Z",
              "updatedAt": "2022-06-28T23:27:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4881Qk",
          "commit": {
            "abbreviatedOid": "8fc20d7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-28T23:29:31Z",
          "updatedAt": "2022-06-28T23:29:31Z",
          "comments": [
            {
              "originalPosition": 260,
              "body": "consider it done, we may also add real unit tests and it's something I will",
              "createdAt": "2022-06-28T23:29:31Z",
              "updatedAt": "2022-06-28T23:29:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4881Yl",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-28T23:30:36Z",
          "updatedAt": "2022-06-28T23:30:36Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "My bad, this will need a more accurate refactor, I'll do it, due to this I cant merge your suggestion right now.\r\nthank you, nice shot",
              "createdAt": "2022-06-28T23:30:36Z",
              "updatedAt": "2022-06-28T23:30:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4881cq",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-28T23:31:08Z",
          "updatedAt": "2022-06-28T23:31:08Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "My bad, consider it done",
              "createdAt": "2022-06-28T23:31:08Z",
              "updatedAt": "2022-06-28T23:31:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49M6Ns",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-02T23:24:02Z",
          "updatedAt": "2022-07-02T23:24:02Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I decided to remove this text and adopt `pip` by default, in setup.py I defined `jwcrypto>=1.3.1`",
              "createdAt": "2022-07-02T23:24:02Z",
              "updatedAt": "2022-07-02T23:24:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49M6OV",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-02T23:25:03Z",
          "updatedAt": "2022-07-02T23:25:04Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "@Sakurann let mw know if this is good to you and I can resovle this conversation or if we may insert again, with a better clarification, that text",
              "createdAt": "2022-07-02T23:25:03Z",
              "updatedAt": "2022-07-02T23:25:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49M6Rj",
          "commit": {
            "abbreviatedOid": "8fc20d7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-02T23:31:26Z",
          "updatedAt": "2022-07-02T23:31:27Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "Done here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/cbf13bef73911da2f37b969d0cd7b7d1993d667b",
              "createdAt": "2022-07-02T23:31:27Z",
              "updatedAt": "2022-07-02T23:31:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49M6Rq",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-02T23:31:34Z",
          "updatedAt": "2022-07-02T23:31:34Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Done here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/cbf13bef73911da2f37b969d0cd7b7d1993d667b",
              "createdAt": "2022-07-02T23:31:34Z",
              "updatedAt": "2022-07-02T23:31:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49M6Sm",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-02T23:33:14Z",
          "updatedAt": "2022-07-02T23:33:14Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "Done here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/46099e910dd2c9fcc4dc28e13003b3087d70a0a6",
              "createdAt": "2022-07-02T23:33:14Z",
              "updatedAt": "2022-07-02T23:33:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49M6V-",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-02T23:39:03Z",
          "updatedAt": "2022-07-02T23:39:03Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "done here: https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/b30cbc9bf43e003eb523df3989f0a1ea6e27cc73",
              "createdAt": "2022-07-02T23:39:03Z",
              "updatedAt": "2022-07-02T23:39:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49M6WC",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-02T23:39:08Z",
          "updatedAt": "2022-07-02T23:39:08Z",
          "comments": [
            {
              "originalPosition": 84,
              "body": "done here: https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/b30cbc9bf43e003eb523df3989f0a1ea6e27cc73",
              "createdAt": "2022-07-02T23:39:08Z",
              "updatedAt": "2022-07-02T23:39:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49M6WD",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-02T23:39:15Z",
          "updatedAt": "2022-07-02T23:39:16Z",
          "comments": [
            {
              "originalPosition": 198,
              "body": "done here: https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/b30cbc9bf43e003eb523df3989f0a1ea6e27cc73",
              "createdAt": "2022-07-02T23:39:15Z",
              "updatedAt": "2022-07-02T23:39:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49M6WN",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-02T23:39:28Z",
          "updatedAt": "2022-07-02T23:39:29Z",
          "comments": [
            {
              "originalPosition": 135,
              "body": "done here: https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/b30cbc9bf43e003eb523df3989f0a1ea6e27cc73",
              "createdAt": "2022-07-02T23:39:29Z",
              "updatedAt": "2022-07-02T23:39:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49M6WY",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-02T23:39:38Z",
          "updatedAt": "2022-07-02T23:39:38Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "done here: https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/b30cbc9bf43e003eb523df3989f0a1ea6e27cc73",
              "createdAt": "2022-07-02T23:39:38Z",
              "updatedAt": "2022-07-02T23:39:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49M6Wk",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-02T23:39:59Z",
          "updatedAt": "2022-07-02T23:40:00Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "Done here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/commit/cbf13bef73911da2f37b969d0cd7b7d1993d667b",
              "createdAt": "2022-07-02T23:39:59Z",
              "updatedAt": "2022-07-02T23:40:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49M6hs",
          "commit": {
            "abbreviatedOid": "b30cbc9"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-03T00:00:25Z",
          "updatedAt": "2022-07-03T00:00:25Z",
          "comments": [
            {
              "originalPosition": 260,
              "body": "Started here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/bfc84bf003d89db8fd45aba9633752eee690d168\r\n\r\nMore work must be done here\r\n\r\n> Generalize the function replace_all_in_main - e.g., example-simple could be an argument - so that we only need to define this once.\r\n\r\nDo you mean to not iter all the dict items but pass exactly the object, as an argument of `replace_all_in_main`, that  replace the matching placeholder? If this is it: ok by me.\r\n\r\n> Throw out all 'print' statements above\r\n\r\nFound only once and replace with a logger.info\r\n\r\n> Instead produce the CLI output from the replacements dict that is created below (e.g., print replacements['structured-sd-jwt-claims'] instead of the print_repr in Line 172.\r\n\r\nDo you mean that we should produce all the items in the replacements dict and then print_repr of these?\r\n\r\n",
              "createdAt": "2022-07-03T00:00:25Z",
              "updatedAt": "2022-07-03T00:00:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49ELD5",
          "commit": {
            "abbreviatedOid": "bfc84bf"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-30T08:48:48Z",
          "updatedAt": "2022-07-04T07:47:42Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "Thanks! Also, `type` is probably a little bit of a misnomer. I propose `--example` for this instead.\r\nSee also https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/80#issuecomment-1170476670",
              "createdAt": "2022-06-30T08:48:48Z",
              "updatedAt": "2022-07-04T07:47:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49OTaX",
          "commit": {
            "abbreviatedOid": "bfc84bf"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-04T07:58:09Z",
          "updatedAt": "2022-07-04T07:58:09Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM49Ovsu",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-04T09:27:57Z",
          "updatedAt": "2022-07-04T09:27:58Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "Ok, I'm changing that parameter with --example\r\ncompletely agree, I also had some concerns about that, so your proposal is the solution",
              "createdAt": "2022-07-04T09:27:57Z",
              "updatedAt": "2022-07-04T09:27:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49OxoZ",
          "commit": {
            "abbreviatedOid": "4a4575f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-04T09:34:07Z",
          "updatedAt": "2022-07-04T09:34:07Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "Done here\r\n[8c2643c](https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/8c2643c6d51a095f28b07f955075205f79d550c4)",
              "createdAt": "2022-07-04T09:34:07Z",
              "updatedAt": "2022-07-04T09:34:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49P0sd",
          "commit": {
            "abbreviatedOid": "8fc20d7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-04T13:27:58Z",
          "updatedAt": "2022-07-04T13:27:58Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "Ok, I'm doing it",
              "createdAt": "2022-07-04T13:27:58Z",
              "updatedAt": "2022-07-04T13:27:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49XNmL",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T04:58:28Z",
          "updatedAt": "2022-07-06T04:58:29Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Why is this duplicating?\r\n\r\n```suggestion\r\n```",
              "createdAt": "2022-07-06T04:58:28Z",
              "updatedAt": "2022-07-06T04:58:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49XNqm",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T04:59:00Z",
          "updatedAt": "2022-07-06T04:59:00Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "Again, is this duplication?\r\n\r\n```suggestion\r\n```",
              "createdAt": "2022-07-06T04:59:00Z",
              "updatedAt": "2022-07-06T04:59:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49XN18",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T05:00:12Z",
          "updatedAt": "2022-07-06T05:00:13Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "audience of the release is verifier, right?\r\n```suggestion\r\n  \"aud\": \"https://example.com/verifier\",\r\n```",
              "createdAt": "2022-07-06T05:00:12Z",
              "updatedAt": "2022-07-06T05:00:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49XPis",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T05:12:21Z",
          "updatedAt": "2022-07-06T05:12:21Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nSD_JWT_HEADER = \"sd+jwt\"\r\n```",
              "createdAt": "2022-07-06T05:12:21Z",
              "updatedAt": "2022-07-06T05:12:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49XT1S",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T05:41:28Z",
          "updatedAt": "2022-07-06T05:41:28Z",
          "comments": [
            {
              "originalPosition": 209,
              "body": "again, need to verify the aud of the release ie verifier?\r\n```suggestion\r\n    vc = verify(\r\n        combined_sd_jwt_sd_jwt_release,\r\n        ISSUER_PUBLIC_KEY,\r\n        ISSUER,\r\n        HOLDER_KEY,\r\n        VERIFIER,\r\n        _args.nonce,\r\n    )\r\n```",
              "createdAt": "2022-07-06T05:41:28Z",
              "updatedAt": "2022-07-06T05:41:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49XVEf",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T05:49:19Z",
          "updatedAt": "2022-07-06T05:49:20Z",
          "comments": [
            {
              "originalPosition": 182,
              "body": "Isn't the audience verifier?\r\n```suggestion\r\n    #####\r\n    print(\"# Creating the SD-JWT-Release\")\r\n    sd_jwt_release_payload, serialized_sd_jwt_release = create_release_jwt(\r\n        _args.nonce, VERIFIER, DISCLOSED_CLAIMS, serialized_svc, HOLDER_KEY\r\n    )\r\n    \r\n```",
              "createdAt": "2022-07-06T05:49:19Z",
              "updatedAt": "2022-07-06T05:49:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49XVfx",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T05:51:54Z",
          "updatedAt": "2022-07-06T05:51:54Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "```suggestion\r\nISSUER = \"https://example.com/issuer\"\r\nVERIFIER = \"https://example.com/verifier\"\r\n```",
              "createdAt": "2022-07-06T05:51:54Z",
              "updatedAt": "2022-07-06T05:51:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49XjTM",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T06:58:50Z",
          "updatedAt": "2022-07-06T06:58:51Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "Yes, should be the verifier!",
              "createdAt": "2022-07-06T06:58:50Z",
              "updatedAt": "2022-07-06T06:58:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49Xlgk",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T07:07:29Z",
          "updatedAt": "2022-07-06T07:07:30Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Do we decided to remove this Yesterday?",
              "createdAt": "2022-07-06T07:07:29Z",
              "updatedAt": "2022-07-06T07:07:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49Xns7",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T07:15:33Z",
          "updatedAt": "2022-07-06T07:15:33Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "At least it should not be in this PR. Ideally, one PR per issue.",
              "createdAt": "2022-07-06T07:15:33Z",
              "updatedAt": "2022-07-06T07:15:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49Xqwy",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T07:26:24Z",
          "updatedAt": "2022-07-06T07:26:24Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "mmhh... It seems coming from the legacy code. Thank you, I'm doing a general check for this",
              "createdAt": "2022-07-06T07:26:24Z",
              "updatedAt": "2022-07-06T07:26:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49XsjF",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T07:32:27Z",
          "updatedAt": "2022-07-06T07:32:27Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Done here **https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/1bc26f545cbb5dd68496f2246c21231f4019e6d4**",
              "createdAt": "2022-07-06T07:32:27Z",
              "updatedAt": "2022-07-06T07:32:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49Xyhs",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T07:46:14Z",
          "updatedAt": "2022-07-06T07:46:14Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "yes, ideally let's remove it from this PR.",
              "createdAt": "2022-07-06T07:46:14Z",
              "updatedAt": "2022-07-06T07:46:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49YMhD",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T09:03:36Z",
          "updatedAt": "2022-07-06T09:03:36Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "Done here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/6a7dbc6bbec4ad807ad2b1f1107375a66d3cfecf",
              "createdAt": "2022-07-06T09:03:36Z",
              "updatedAt": "2022-07-06T09:03:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49YMnc",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T09:03:52Z",
          "updatedAt": "2022-07-06T09:03:53Z",
          "comments": [
            {
              "originalPosition": 182,
              "body": "Done here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/6a7dbc6bbec4ad807ad2b1f1107375a66d3cfecf",
              "createdAt": "2022-07-06T09:03:52Z",
              "updatedAt": "2022-07-06T09:03:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49YMwU",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T09:04:17Z",
          "updatedAt": "2022-07-06T09:04:18Z",
          "comments": [
            {
              "originalPosition": 209,
              "body": "Done here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/6a7dbc6bbec4ad807ad2b1f1107375a66d3cfecf",
              "createdAt": "2022-07-06T09:04:17Z",
              "updatedAt": "2022-07-06T09:04:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49YTzN",
          "commit": {
            "abbreviatedOid": "18a45e7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T09:25:00Z",
          "updatedAt": "2022-07-06T09:25:00Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "Done here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/6a7dbc6bbec4ad807ad2b1f1107375a66d3cfecf",
              "createdAt": "2022-07-06T09:25:00Z",
              "updatedAt": "2022-07-06T09:25:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49YUIf",
          "commit": {
            "abbreviatedOid": "8fc20d7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T09:25:58Z",
          "updatedAt": "2022-07-06T09:25:59Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Done here, nonce value is constant in the update-example script\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/6a7dbc6bbec4ad807ad2b1f1107375a66d3cfecf",
              "createdAt": "2022-07-06T09:25:58Z",
              "updatedAt": "2022-07-06T09:25:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49YUYF",
          "commit": {
            "abbreviatedOid": "8fc20d7"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T09:26:40Z",
          "updatedAt": "2022-07-06T09:26:40Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "Done here, nonce value is now constant in the update example\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/6a7dbc6bbec4ad807ad2b1f1107375a66d3cfecf",
              "createdAt": "2022-07-06T09:26:40Z",
              "updatedAt": "2022-07-06T09:26:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49Z8NK",
          "commit": {
            "abbreviatedOid": "bc651f9"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-07-06T14:35:11Z",
          "updatedAt": "2022-07-06T14:35:16Z",
          "comments": [
            {
              "originalPosition": 270,
              "body": "Something's missing above - the other examples are not generated.",
              "createdAt": "2022-07-06T14:35:11Z",
              "updatedAt": "2022-07-06T14:35:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49a-Ay",
          "commit": {
            "abbreviatedOid": "bc651f9"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T17:39:59Z",
          "updatedAt": "2022-07-06T17:39:59Z",
          "comments": [
            {
              "originalPosition": 270,
              "body": "Done here:\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/a6ed737cf67d03cfd78caadddf7d77aeff880862\r\n\r\nI'm doing a check if something is misaligned",
              "createdAt": "2022-07-06T17:39:59Z",
              "updatedAt": "2022-07-06T17:39:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49bBMa",
          "commit": {
            "abbreviatedOid": "bc651f9"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T17:51:41Z",
          "updatedAt": "2022-07-06T17:51:41Z",
          "comments": [
            {
              "originalPosition": 270,
              "body": "revision completed here: https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61/commits/93b33f923c4845a06b8950f13ececa8c92e2d660\r\n\r\nyes, something was missing :)",
              "createdAt": "2022-07-06T17:51:41Z",
              "updatedAt": "2022-07-06T17:51:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49bEcK",
          "commit": {
            "abbreviatedOid": "93b33f9"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thank you for doing this, @peppelinux !",
          "createdAt": "2022-07-06T18:03:33Z",
          "updatedAt": "2022-07-06T18:03:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 62,
      "id": "PR_kwDOHTmVzM452tEa",
      "title": "[do not merge] PoC: Use encryption instead of hashing",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/62",
      "state": "CLOSED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "(spec not adapted yet)",
      "createdAt": "2022-06-17T13:50:18Z",
      "updatedAt": "2022-12-07T13:30:35Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "6e35f2134d87a030ee8913d6bf8499c6e4d85eac",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/encryption-is-the-new-hashing",
      "headRefOid": "2039792c29077eb7bb3959594704229cc97db6b3",
      "closedAt": "2022-12-07T13:30:35Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "I was looking for this.\r\nI'd propose a configuration paramenter to deal with both salted and encrypted payloads.\r\n\r\nIf you agree we may merge first this modest refactoring\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61\r\n\r\nand also the CI to get safe against regressions, stale sources and things\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/63\r\n\r\nhere an example of the running CI\r\nhttps://github.com/peppelinux/draft-selective-disclosure-jwt/runs/6937986323?check_suite_focus=true",
          "createdAt": "2022-06-17T15:14:05Z",
          "updatedAt": "2022-06-17T15:14:05Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Since it is unlikely that the final spec will support both encryption and hashing, let's keep them separate in the code base.",
          "createdAt": "2022-06-20T13:17:16Z",
          "updatedAt": "2022-06-20T13:17:16Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "+1 to Daniel's comment.",
          "createdAt": "2022-06-27T03:30:00Z",
          "updatedAt": "2022-06-27T03:30:00Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Since the spec has moved far away from what this PR was built for and problems have been addressed in other ways, I'm closing this PR.",
          "createdAt": "2022-12-07T13:30:35Z",
          "updatedAt": "2022-12-07T13:30:35Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 63,
      "id": "PR_kwDOHTmVzM4526Cq",
      "title": "feat: GH CI",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/63",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Github action continuous integration tests for the youth",
      "createdAt": "2022-06-17T14:44:01Z",
      "updatedAt": "2022-06-22T06:52:55Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "4c922dea83b10e95916ddb1545feedb297ceab7d",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "ci",
      "headRefOid": "8e76f86b619dd793337bd8cd30025e1d1b6c2284",
      "closedAt": "2022-06-22T06:52:55Z",
      "mergedAt": "2022-06-22T06:52:55Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "2c9f3544ef352f562e926dac7678cc5f20b69b9c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM48VbcR",
          "commit": {
            "abbreviatedOid": "c9f30db"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-20T13:12:26Z",
          "updatedAt": "2022-06-20T13:12:26Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM48Vb6d",
          "commit": {
            "abbreviatedOid": "c9f30db"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-06-20T13:13:47Z",
          "updatedAt": "2022-06-20T13:15:51Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "Considering this is more a demo/reference code, not a library, I don't think we need to run this on three python versions. But I'm fine either way. ",
              "createdAt": "2022-06-20T13:13:47Z",
              "updatedAt": "2022-06-20T13:15:51Z"
            },
            {
              "originalPosition": 45,
              "body": "Adding `--replace` to the first example as that will tell us if the placeholders in main.md can be found; at least for this example, the other examples by design don't complain if the placeholders cannot be found.\r\n\r\nAdding the third example we have.\r\n\r\n```suggestion\r\n        python3 -m demo.simple --replace\r\n        python3 -m demo.simple_structured\r\n        python3 -m demo.complex_structured\r\n```",
              "createdAt": "2022-06-20T13:15:44Z",
              "updatedAt": "2022-06-20T13:15:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48Vkbm",
          "commit": {
            "abbreviatedOid": "c9f30db"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-20T13:37:51Z",
          "updatedAt": "2022-06-20T13:37:51Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "moving on the willing to migrate this PoC to a real python package and also considering the fact that an analyst may have different python versions this is a quite standard CI",
              "createdAt": "2022-06-20T13:37:51Z",
              "updatedAt": "2022-06-20T13:37:51Z"
            }
          ]
        }
      ]
    },
    {
      "number": 67,
      "id": "PR_kwDOHTmVzM455Bk5",
      "title": "feat: additional security considerations",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/67",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "# Security Considerations\r\n\r\n- feat: Minimum length of the salt\r\n- feat: weak hash algorithms to not use",
      "createdAt": "2022-06-18T10:00:46Z",
      "updatedAt": "2022-06-23T15:41:09Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "8958924a2d14f359ccee79110f95832d09d8d2bf",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "seccons",
      "headRefOid": "3fa2cb890c9631e232538e28231e70c478ab33b4",
      "closedAt": "2022-06-23T15:41:08Z",
      "mergedAt": "2022-06-23T15:41:08Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "788140b998deceed374f6805b176ab687509ca8d"
      },
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "mh ... we already have `MUST contain at least 128 bits of pseudorandom data` in Section [SD_JWT Claims](https://github.com/oauthstuff/draft-selective-disclosure-jwt/blob/master/main.md#sd-jwt-claims)",
          "createdAt": "2022-06-18T12:35:14Z",
          "updatedAt": "2022-06-18T12:35:14Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett I commited your suggestion\r\n\r\nI'm not sure that the normative language could be used in the considerations but it's good anyway to me, it's intellegibile :)",
          "createdAt": "2022-06-23T15:08:14Z",
          "updatedAt": "2022-06-23T15:08:14Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM48Va1b",
          "commit": {
            "abbreviatedOid": "c7667d0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-06-20T13:10:39Z",
          "updatedAt": "2022-06-20T13:10:55Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nrevealed fundamental weaknesses and they MUST NOT be used.\r\n```",
              "createdAt": "2022-06-20T13:10:39Z",
              "updatedAt": "2022-06-20T13:10:55Z"
            },
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nThe length of the randomly-generated portion of the salt MUST be at least 128 bits.\r\n```",
              "createdAt": "2022-06-20T13:10:51Z",
              "updatedAt": "2022-06-20T13:10:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48ofsR",
          "commit": {
            "abbreviatedOid": "3fa2cb8"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-23T15:39:14Z",
          "updatedAt": "2022-06-23T15:39:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 69,
      "id": "PR_kwDOHTmVzM455HqL",
      "title": "fix: [SD-JWT] added hash_alg claim to all non normative examples",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/69",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "`hash_alg` is a REQUIRED claim in SD-JWT.\r\nThis PR fixes the non normative examples of SD-JWTs.\r\n\r\nThe PoC code remains as it is in this PR, with the willing to fix it in this PR\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/61",
      "createdAt": "2022-06-18T12:48:08Z",
      "updatedAt": "2022-06-20T13:09:28Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "8958924a2d14f359ccee79110f95832d09d8d2bf",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "hashalg",
      "headRefOid": "d3bcf0b5053986d9bd6785ae2f1ebfb9e04acbbf",
      "closedAt": "2022-06-20T13:09:28Z",
      "mergedAt": "2022-06-20T13:09:28Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "34e3f23c2df8a31064c341067962699750ae3dda"
      },
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, the relevant code is here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/56 ",
          "createdAt": "2022-06-18T13:01:12Z",
          "updatedAt": "2022-06-18T13:01:12Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 70,
      "id": "PR_kwDOHTmVzM459POp",
      "title": "Added Implementation List to README",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/70",
      "state": "MERGED",
      "author": "fabian-hk",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-06-20T15:08:38Z",
      "updatedAt": "2022-06-23T08:21:54Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "34e3f23c2df8a31064c341067962699750ae3dda",
      "headRepository": "fabian-hk/draft-selective-disclosure-jwt",
      "headRefName": "readme-implementation-list",
      "headRefOid": "7d1fb4988ccac2aa23085692b1168532cd996b8d",
      "closedAt": "2022-06-23T08:21:54Z",
      "mergedAt": "2022-06-23T08:21:54Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "0806868914604aa4e3ab2132ff1a35c8c5a69313"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 71,
      "id": "PR_kwDOHTmVzM46QAq9",
      "title": "Changes before -01",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/71",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "- Bump version number\r\n- Some grammar/spelling fixes, some clarifications\r\n- Added missing reference to VC Data Model\r\n- Diagram reformatted to vertical instead of horizontal, multiple verifiers instead of just one\r\n- In Concepts, clarify that holder binding is optional and renamed artifacts to defined names (e.g., RELEASE -> SD-JWT-RELEASE)\r\n- Terms and Definitions reformatted to use the \"description list\" format\r\n- Moved all examples except for Example 1 to Appendix (as suggested in Issue #44)",
      "createdAt": "2022-06-23T14:50:16Z",
      "updatedAt": "2022-06-23T15:05:06Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "acd6034de1c06c3804cb5bee22dff0c6bfce5eff",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/prepare-01",
      "headRefOid": "999a4b9eb76227d2c90ba585175f5906d75ff271",
      "closedAt": "2022-06-23T15:05:06Z",
      "mergedAt": "2022-06-23T15:05:06Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "08fe96dfad56685c02ea8a58ed37f647283d71b2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM48oQz1",
          "commit": {
            "abbreviatedOid": "999a4b9"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-23T15:04:59Z",
          "updatedAt": "2022-06-23T15:04:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 72,
      "id": "PR_kwDOHTmVzM46QNor",
      "title": "Fixes for Issue #68",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/72",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Most points in #68 have been addressed already. We can't change the list style, so keeping as is.",
      "createdAt": "2022-06-23T15:32:12Z",
      "updatedAt": "2022-06-23T15:39:52Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "08fe96dfad56685c02ea8a58ed37f647283d71b2",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/fix-68",
      "headRefOid": "38407c76a51beba2cdca2fe3007ec4427527fa61",
      "closedAt": "2022-06-23T15:39:52Z",
      "mergedAt": "2022-06-23T15:39:52Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "af1b384397fccd3f4dfa82e24f8bb737bd911306"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM48of58",
          "commit": {
            "abbreviatedOid": "38407c7"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-23T15:39:47Z",
          "updatedAt": "2022-06-23T15:39:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 78,
      "id": "PR_kwDOHTmVzM46VY5X",
      "title": "Editorial suggestions",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/78",
      "state": "MERGED",
      "author": "christianpaquin",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Some editorial changes:\r\n* Use (hash) digest instead of hash when describing the result of the hash operation\r\n* I'm suggesting to make the salt size a SHOULD vs. a MUST: 1) it doesn't affect interop, 2) some use cases might need smaller salts (with the option of using stronger (time/memory) digest derivation functions (hash)) to reduce the size of the artefact (e.g., constrained QR codes).\r\n* `_sd` --> `sd_digests`\r\n* Trimmed down duplicated info\r\n* More security consideration details for hash function\r\n* Clarified unlinkability statement in privacy consideration\r\n* Some typos",
      "createdAt": "2022-06-24T20:14:03Z",
      "updatedAt": "2022-06-30T12:35:59Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "45dbe9b37eb9304b94610604604fadce0935d10f",
      "headRepository": "christianpaquin/draft-selective-disclosure-jwt",
      "headRefName": "cp-editorial-changes-2",
      "headRefOid": "4a2ea62b0983c2a6855e16065f82d5423822086f",
      "closedAt": "2022-06-30T12:35:58Z",
      "mergedAt": "2022-06-30T12:35:58Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "ce0d19e8160d2fbb846d91dc77c65d09137a1124"
      },
      "comments": [
        {
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "body": "learning undisclosed holder claims probably is not a security consideration\nbut privacy.\nI have created another PR #91 for more substantial privacy considerations.\nIt has a more structured framework so the proposed text probably can be\nplaced there.\n\nOn Mon, Jun 27, 2022 at 1:01 PM Kristina ***@***.***> wrote:\n\n> ***@***.**** commented on this pull request.\n> ------------------------------\n>\n> In main.md\n> <https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/78#discussion_r906951885>\n> :\n>\n> > @@ -686,9 +686,10 @@ and revealing the claim names does not provide any additional information.\n>\n>  ## Unlinkability\n>\n> -It is also important to note that this format enables selective disclosure of claims, but\n> -in itself it does not achieve unlinkability of the subject of an SD-SWT.\n> -\n> +Colluding issuer/verifier or verifier/verifier pairs could learn undisclosed holder claims by linking\n>\n> I made a suggestion wrt unlinkability text. I agree learning undisclosed\n> holder claims is a separate issue that we should probably have a text about\n> in security considerations, outside of this PR.\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/78#discussion_r906951885>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AABFEN6HGKZCEGF6B4BSNI3VRERSBANCNFSM5ZY4EBLQ>\n> .\n> You are receiving this because you commented.Message ID:\n> <oauthstuff/draft-selective-disclosure-jwt/pull/78/review/1019576951@\n> github.com>\n>\n\n\n-- \nNat Sakimura (=nat)\nChairman, OpenID Foundation\nhttp://nat.sakimura.org/\n@_nat_en\n",
          "createdAt": "2022-06-27T16:29:12Z",
          "updatedAt": "2022-06-27T16:29:12Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM48vKpb",
          "commit": {
            "abbreviatedOid": "d333cf4"
          },
          "author": "sakimura",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-24T21:24:06Z",
          "updatedAt": "2022-06-24T21:24:06Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Learning of undisclosed holder claims does not sound like an unlinkability issue. \r\nIn the case of (verifier1+verifier2)-holder1-unlinkability, it is the linking of holder1's presentations (protocol executions) at verifier1 and verifier2. This is the failure of the pairwise pseudonymity property. \r\n\r\nIf we want to talk about the uncovering of claims by colluding issuer and verifier, then we probably want to have another section on it, and IMHO, we should have one. \r\n\r\n",
              "createdAt": "2022-06-24T21:24:06Z",
              "updatedAt": "2022-06-24T21:24:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48xX6T",
          "commit": {
            "abbreviatedOid": "b8dbc4d"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-27T03:58:57Z",
          "updatedAt": "2022-06-27T03:59:56Z",
          "comments": [
            {
              "originalPosition": 200,
              "body": "Happy to approve if the change in line to the one suggested below will be incorporated.\r\n\r\n```suggestion\r\nColluding issuer/verifier or verifier/verifier pairs could link issuance/presentation or two presentation sessions\r\nto the same user on the basis of unique values encoded in the SD-JWT\r\n(issuer signature, salts, digests, etc.). More advanced cryptographic schemes, outside the scope of\r\nthis specification, can be used to prevent this type of linkability.\r\n```",
              "createdAt": "2022-06-27T03:58:57Z",
              "updatedAt": "2022-06-27T03:59:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48xYJ3",
          "commit": {
            "abbreviatedOid": "d333cf4"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-27T04:01:25Z",
          "updatedAt": "2022-06-27T04:01:25Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I made a suggestion wrt unlinkability text. I agree learning undisclosed holder claims is a separate issue that we should probably have a text about in security considerations, outside of this PR.",
              "createdAt": "2022-06-27T04:01:25Z",
              "updatedAt": "2022-06-27T04:01:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM483tIU",
          "commit": {
            "abbreviatedOid": "b8dbc4d"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-06-28T07:22:25Z",
          "updatedAt": "2022-06-28T07:24:07Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "I chose \"in the following\" for being less ambiguous, as \"following section\" can be read as \"go to the next top-level section to read more\", but we want to say \"in the following subsections\", which is an awkward way to word it. Therefore just \"in the following\". But since this is the second time someone suggests this edit, I'm starting to question my interpretation here....",
              "createdAt": "2022-06-28T07:22:26Z",
              "updatedAt": "2022-06-28T07:24:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM486sty",
          "commit": {
            "abbreviatedOid": "b8dbc4d"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-28T16:05:56Z",
          "updatedAt": "2022-06-28T16:05:56Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "let's just say `in the following subsections` or `in this document` than!",
              "createdAt": "2022-06-28T16:05:56Z",
              "updatedAt": "2022-06-28T16:05:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM488DnE",
          "commit": {
            "abbreviatedOid": "d333cf4"
          },
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-28T20:39:42Z",
          "updatedAt": "2022-06-28T20:39:43Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I mean claim \"values\" here, not their type. Linkability can be established on the basis of any correlatable information, which could be any unique value (serial number, signature value, a claim value). ",
              "createdAt": "2022-06-28T20:39:42Z",
              "updatedAt": "2022-06-28T20:39:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM488HSP",
          "commit": {
            "abbreviatedOid": "b8dbc4d"
          },
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-28T20:47:56Z",
          "updatedAt": "2022-06-28T20:47:57Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "I reverted the change adding \"sections\"; I thought it was a typo. I'll let the two editors decide on what to say here (which I suggest you do in another editorial PR).",
              "createdAt": "2022-06-28T20:47:56Z",
              "updatedAt": "2022-06-28T20:47:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49AgJ9",
          "commit": {
            "abbreviatedOid": "01ccb4c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-29T15:00:04Z",
          "updatedAt": "2022-06-29T15:00:04Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM49A94O",
          "commit": {
            "abbreviatedOid": "b8dbc4d"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-29T16:20:40Z",
          "updatedAt": "2022-06-29T16:20:41Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "will do, thank you!",
              "createdAt": "2022-06-29T16:20:41Z",
              "updatedAt": "2022-06-29T16:20:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49A-If",
          "commit": {
            "abbreviatedOid": "01ccb4c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-29T16:21:28Z",
          "updatedAt": "2022-06-29T16:21:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 82,
      "id": "PR_kwDOHTmVzM46XHWE",
      "title": "fix: [typo] deprecated _sd ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/82",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Removed deprecated pointer to _sd https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/42",
      "createdAt": "2022-06-25T20:56:14Z",
      "updatedAt": "2022-06-27T04:02:53Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "4b3eedfcd55801ca0d201b192a3aba5a5f5d5374",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "sd_typo",
      "headRefOid": "bdd660106b6ba2845dca2eb27f0a156bdc8c63ca",
      "closedAt": "2022-06-27T04:02:53Z",
      "mergedAt": "2022-06-27T04:02:52Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "92d636b7ce337fd5af9714d54d8938f27966d39b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM48xYRT",
          "commit": {
            "abbreviatedOid": "e21ea9b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-27T04:02:31Z",
          "updatedAt": "2022-06-27T04:02:31Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n`sd_release` object. The structure of `sd_release` object in the SD-JWT-R is the same as in SD-JWT. \r\n```",
              "createdAt": "2022-06-27T04:02:31Z",
              "updatedAt": "2022-06-27T04:02:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM48xYSz",
          "commit": {
            "abbreviatedOid": "bdd6601"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-27T04:02:45Z",
          "updatedAt": "2022-06-27T04:02:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 83,
      "id": "PR_kwDOHTmVzM46XH5N",
      "title": "feat: [Draft] added sd+jwt header for SD-JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/83",
      "state": "OPEN",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Definition of these new JWT headers with normative language.\r\nCloses https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/60",
      "createdAt": "2022-06-25T21:08:14Z",
      "updatedAt": "2022-07-19T14:12:53Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "ce0d19e8160d2fbb846d91dc77c65d09137a1124",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "typ",
      "headRefOid": "b89b4aca8f46cafc7ebfebe69003cf8253617e1f",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> I would be more comfortable adding only SD+JWT typ for now, since we still need to agree on SD-JWT-R being a JWT vs an object and its validation logic.\r\n\r\nOk.\r\nIf sd-jwt-r would be an object and not a signed jwt how we could bind the sub_jwk of sd-jwt, issued by a trusted party (vci) to the selfsigned release issued by the holder?",
          "createdAt": "2022-06-27T04:54:06Z",
          "updatedAt": "2022-06-27T04:55:27Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "SD-JWT-R is an object when there is no holder binding ie no`sub_jwk` inside SD-JWT.",
          "createdAt": "2022-06-27T05:28:32Z",
          "updatedAt": "2022-06-27T05:28:32Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "NONE",
          "body": "see https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/60#issuecomment-1167745219 :\r\n\r\n... I don't think that typ value(s) should be defined or mandated by this draft.\r\n\r\n[RFC 8725 - JSON Web Token Best Current Practices](https://tools.ietf.org/html/rfc8725.html) talks about using explicit typing as a security mechanism to prevent \"Cross-JWT Confusion\" but typing something as an SD-JWT doesn't accomplish the same thing and might preclude use in contexts where there is a typ already in use (i.e. at+jwt for an access token per https://datatracker.ietf.org/doc/html/rfc9068#section-2.1).",
          "createdAt": "2022-06-27T18:46:52Z",
          "updatedAt": "2022-06-27T18:50:43Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> SD-JWT-R is an object when there is no holder binding ie no`sub_jwk` inside SD-JWT.\r\n\r\nmmmhh ... anyway it doesn't have any sense due to the possibility that the SD-JWT can be stolen. The signature and the binding of the sub jwk is a concrete proof of possession ",
          "createdAt": "2022-06-27T21:48:01Z",
          "updatedAt": "2022-06-27T21:48:01Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> see [#60 (comment)](https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/60#issuecomment-1167745219) :\r\n> \r\n> ... I don't think that typ value(s) should be defined or mandated by this draft.\r\n> \r\n> [RFC 8725 - JSON Web Token Best Current Practices](https://tools.ietf.org/html/rfc8725.html) talks about using explicit typing as a security mechanism to prevent \"Cross-JWT Confusion\" but typing something as an SD-JWT doesn't accomplish the same thing and might preclude use in contexts where there is a typ already in use (i.e. at+jwt for an access token per https://datatracker.ietf.org/doc/html/rfc9068#section-2.1).\r\n\r\nmmhh ... Ok, we used that text in OIDC Federation when we decided to adopt a typ for entity statements and trust marks.\r\nIf I understand your comment: you're saying that SD-JWT can be used also in an access_token so we have the requirement to not force a specific type for this JWT.\r\n\r\nIt makes sense ... even if I can't see how an access token (or an id token) then requires a SD-JWT-R to resolve the claims value. Can we have a clear rationale for this? How SD-JWT could be used in existing JWT typ, this will help the born of a section related to this topic, in the draft if we agree    ",
          "createdAt": "2022-06-27T21:52:48Z",
          "updatedAt": "2022-06-27T21:52:48Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "SD-JWR-R typ header removed here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/83/commits/b89b4aca8f46cafc7ebfebe69003cf8253617e1f",
          "createdAt": "2022-07-04T13:56:51Z",
          "updatedAt": "2022-07-04T13:56:51Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM48xazC",
          "commit": {
            "abbreviatedOid": "1b0bcfb"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I would be more comfortable adding only SD+JWT typ for now, since we still need to agree on SD-JWT-R being a JWT vs an object and its validation logic.",
          "createdAt": "2022-06-27T04:18:08Z",
          "updatedAt": "2022-06-27T04:22:43Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nA `typ` parameter in the JOSE header of an SD-JWT MUST be set to the value `sd+jwt`.\r\n```\r\n\r\nAlso can you please update a validation section with something like this?\r\n\r\n```\r\n 4. Validate the SD-JWT:\r\n    1. Check that the `typ` JOSE header parameter has the value sd+jwt\r\n    2. Ensure that a signing algorithm was used that was deemed secure for the application. Refer to [@RFC8725], Sections 3.1 and 3.2 for details.\r\n    3. Validate the signature over the SD-JWT. \r\n    4. Validate the issuer of the SD-JWT and that the signing key belongs to this issuer.\r\n    5. Check that the SD-JWT is valid using `nbf`, `iat`, and `exp` claims, if provided in the SD-JWT.\r\n    6. Check that the claim `sd_digests` is present in the SD-JWT.\r\n    7. Check that the `hash_alg` claim is present and its value is understand\r\n       and the hash algorithm deemed secure.\r\n```",
              "createdAt": "2022-06-27T04:18:09Z",
              "updatedAt": "2022-06-27T04:22:43Z"
            },
            {
              "originalPosition": 19,
              "body": "Note that SD-JWT-R is not always signed.\r\n\r\n```suggestion\r\nWhen SD-JWT-R is signed, a `typ` parameter in the JOSE header of a signed SD-JWT MUST be set to the value `sd-r+jwt`.\r\n```",
              "createdAt": "2022-06-27T04:20:17Z",
              "updatedAt": "2022-06-27T04:22:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM481aeA",
          "commit": {
            "abbreviatedOid": "1b0bcfb"
          },
          "author": "b---c",
          "authorAssociation": "NONE",
          "state": "CHANGES_REQUESTED",
          "body": "shouldn't do this ",
          "createdAt": "2022-06-27T18:47:40Z",
          "updatedAt": "2022-06-27T18:47:40Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM49M6Ks",
          "commit": {
            "abbreviatedOid": "1b0bcfb"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-02T23:18:56Z",
          "updatedAt": "2022-07-02T23:18:56Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Done here\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/83/commits/a4e455d62a6baaa879739975fd50f22256927da6\r\n\r\nthank you, it was really important",
              "createdAt": "2022-07-02T23:18:56Z",
              "updatedAt": "2022-07-02T23:18:56Z"
            }
          ]
        }
      ]
    },
    {
      "number": 92,
      "id": "PR_kwDOHTmVzM46XftK",
      "title": "To address issue #87 Security and privacy targets not defined",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/92",
      "state": "OPEN",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "To address issue #87",
      "createdAt": "2022-06-26T07:29:48Z",
      "updatedAt": "2022-10-13T16:54:11Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "4b3eedfcd55801ca0d201b192a3aba5a5f5d5374",
      "headRepository": "sakimura/draft-selective-disclosure-jwt",
      "headRefName": "patch-2",
      "headRefOid": "85d3f6e80e1d5c754cf2cae3317eb9c10feacd7d",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM48xTm7",
          "commit": {
            "abbreviatedOid": "85d3f6e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "In my understanding, we are not defining a protocol. we are defining an extension to JWT, a way to represent claims. For detailed comment please see Issue #87 ",
          "createdAt": "2022-06-27T03:13:32Z",
          "updatedAt": "2022-06-27T03:13:32Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM4-DzW4",
          "commit": {
            "abbreviatedOid": "85d3f6e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-17T21:20:49Z",
          "updatedAt": "2022-07-17T21:20:49Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "How is this text different from what is already in \"the introduction\"? I would rather have this text as a new \"use-cases\" section.\r\n\r\nAlso isn't \"data minimization\" a more common term than \"collection limitation\"?",
              "createdAt": "2022-07-17T21:20:49Z",
              "updatedAt": "2022-07-17T21:20:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4-DzjI",
          "commit": {
            "abbreviatedOid": "85d3f6e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-17T21:29:05Z",
          "updatedAt": "2022-07-17T21:29:16Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "I do not understand \" from the section of the release that directly corresponds with the claim\". the release will contain the claim value of the claim that is being released.\r\nCould this be clarified/paraphrased, please?",
              "createdAt": "2022-07-17T21:29:05Z",
              "updatedAt": "2022-07-17T21:29:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EBPHI",
          "commit": {
            "abbreviatedOid": "85d3f6e"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-13T16:54:10Z",
          "updatedAt": "2022-10-13T16:54:11Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Shouldn't that be \"Strong Undiscoverability\"?",
              "createdAt": "2022-10-13T16:54:10Z",
              "updatedAt": "2022-10-13T16:54:11Z"
            }
          ]
        }
      ]
    },
    {
      "number": 93,
      "id": "PR_kwDOHTmVzM46Xfzm",
      "title": "To address issue #91 Create decent privacy considerations",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/93",
      "state": "OPEN",
      "author": "sakimura",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "To address issue #91",
      "createdAt": "2022-06-26T07:32:39Z",
      "updatedAt": "2022-06-28T23:13:59Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "4b3eedfcd55801ca0d201b192a3aba5a5f5d5374",
      "headRepository": "sakimura/draft-selective-disclosure-jwt",
      "headRefName": "patch-3",
      "headRefOid": "70b403e05996fcd099745984c424390c5fa93259",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM48305u",
          "commit": {
            "abbreviatedOid": "70b403e"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-28T07:46:20Z",
          "updatedAt": "2022-06-28T07:53:33Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "Isn't this covered by the salt? ",
              "createdAt": "2022-06-28T07:46:20Z",
              "updatedAt": "2022-06-28T07:53:33Z"
            },
            {
              "originalPosition": 56,
              "body": "I think it is worth discussing this approach also independent of the problem of identifying the issuer. Always including some claims prevents verifiers from learning something about the holder just from the presence of a claim.\r\n\r\nExample: In EU driver's licenses, there may be restrictions such as \"may only drive with hearing aids\" or \"may only drive with modified vehicles to accommodate a certain disability\". The verifier may learn just from the presence of any restrictions that the owner of the license may not be of best health, potentially using it to their disadvantage.\r\n\r\nAlways including claims and just nulling the value when not applicable can prevent this.",
              "createdAt": "2022-06-28T07:52:25Z",
              "updatedAt": "2022-06-28T07:53:33Z"
            },
            {
              "originalPosition": 5,
              "body": "Is there a good link we can provide here? I fell that having the full list makes sense only if it is not readily available somewhere else.",
              "createdAt": "2022-06-28T07:52:56Z",
              "updatedAt": "2022-06-28T07:53:33Z"
            },
            {
              "originalPosition": 27,
              "body": "Can we specify \"often talked\"?",
              "createdAt": "2022-06-28T07:53:18Z",
              "updatedAt": "2022-06-28T07:53:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM488zR7",
          "commit": {
            "abbreviatedOid": "70b403e"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-28T23:13:58Z",
          "updatedAt": "2022-06-28T23:13:59Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "The following proposal resolve by design the problem of the claim names disclosed in SD-JWT\r\nhttps://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/80\r\n\r\n",
              "createdAt": "2022-06-28T23:13:59Z",
              "updatedAt": "2022-06-28T23:13:59Z"
            }
          ]
        }
      ]
    },
    {
      "number": 97,
      "id": "PR_kwDOHTmVzM46b-qj",
      "title": "adding reference to an IETF page",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/97",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "addresses Issue #75 ",
      "createdAt": "2022-06-27T18:50:10Z",
      "updatedAt": "2022-06-29T01:18:09Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "92d636b7ce337fd5af9714d54d8938f27966d39b",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "html-ref",
      "headRefOid": "906dceda145564e4658982f2bcc5d9608b73222d",
      "closedAt": "2022-06-29T01:18:09Z",
      "mergedAt": "2022-06-29T01:18:09Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "db8305fc5f28a305f0518f166850917f306c7da8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM483qUj",
          "commit": {
            "abbreviatedOid": "9409059"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-28T07:13:22Z",
          "updatedAt": "2022-06-28T07:13:23Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nFor the latest version of the IETF draft, please see https://datatracker.ietf.org/doc/html/draft-fett-selective-disclosure-jwt\r\n\r\nFor the current version in this repository, see [main.md](main.md).\r\n```",
              "createdAt": "2022-06-28T07:13:22Z",
              "updatedAt": "2022-06-28T07:13:23Z"
            }
          ]
        }
      ]
    },
    {
      "number": 101,
      "id": "PR_kwDOHTmVzM46eY-e",
      "title": "Stress uniqueness of salt values",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/101",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-06-28T07:43:09Z",
      "updatedAt": "2022-06-29T01:17:46Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "92d636b7ce337fd5af9714d54d8938f27966d39b",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/unique-salts",
      "headRefOid": "b601fc688e3d8848d213c7f091ae5d772fe5c448",
      "closedAt": "2022-06-29T01:17:46Z",
      "mergedAt": "2022-06-29T01:17:45Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "067a798b262e532c302c01f686467a0c3172b7c6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM488_y0",
          "commit": {
            "abbreviatedOid": "b601fc6"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-29T01:03:21Z",
          "updatedAt": "2022-06-29T01:03:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 104,
      "id": "PR_kwDOHTmVzM46iGb2",
      "title": "removed duplicated hash_alg in SD_JWT",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/104",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "no changes in code needed, code generates SD-JWTs with only one hash_alg",
      "createdAt": "2022-06-29T01:11:31Z",
      "updatedAt": "2022-06-29T01:12:08Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "20a3e05e8e466b6bb8c7cd7b4250a2e1725d145e",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "master",
      "headRefOid": "ba4d2f0f6135acf0d49b58492acb9ba77e69fe1f",
      "closedAt": "2022-06-29T01:12:07Z",
      "mergedAt": "2022-06-29T01:12:07Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "1605f2cf0fd66305a899c1da8659cfd3b53875b7"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 105,
      "id": "PR_kwDOHTmVzM46lMjY",
      "title": "issue #75",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/105",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-06-29T16:38:22Z",
      "updatedAt": "2022-06-29T16:38:34Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "db8305fc5f28a305f0518f166850917f306c7da8",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "editorial",
      "headRefOid": "19f9279660a6c021f5505f2037481dee01325b20",
      "closedAt": "2022-06-29T16:38:33Z",
      "mergedAt": "2022-06-29T16:38:33Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "45dbe9b37eb9304b94610604604fadce0935d10f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 107,
      "id": "PR_kwDOHTmVzM464ueW",
      "title": "added Christian's implementation in READ.me",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/107",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-05T23:13:07Z",
      "updatedAt": "2022-07-06T07:09:34Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "ce0d19e8160d2fbb846d91dc77c65d09137a1124",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "christian-implementation",
      "headRefOid": "e998450965b97f3880ebb96aa62a7d79179add24",
      "closedAt": "2022-07-06T07:09:34Z",
      "mergedAt": "2022-07-06T07:09:34Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "3de8e4113e59a95e92e5a9c03d2d266cb0e33e4d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 108,
      "id": "PR_kwDOHTmVzM4659-c",
      "title": "[WIP] added placeholder for the security considerations on hash computation",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/108",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Would like to go with salted hashes based approach, since there has been a lot of feedback that \"simplicity (of salted hases approach) is a feature\".\r\n\r\nHowever, acknowledging [a raised concern](https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/30#issuecomment-1150205528), adding a text to the security considerations explaining mechanisms that should be adopted to ensure that   verifiers validate the claim values received in SD-JWT-R by calculating the hashes of those values and comparing them with the hashes in the SD-JWT.",
      "createdAt": "2022-07-06T06:29:28Z",
      "updatedAt": "2022-07-06T07:09:20Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "ce0d19e8160d2fbb846d91dc77c65d09137a1124",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "security-considerations",
      "headRefOid": "2b1939a628e9e53e4bb328182a88f1c0d9973ab3",
      "closedAt": "2022-07-06T07:09:20Z",
      "mergedAt": "2022-07-06T07:09:20Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "a35f077bd1c95e1563f3489bd88e0bf70ff83a8e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 109,
      "id": "PR_kwDOHTmVzM46-T5p",
      "title": "chore: clean up",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/109",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Useless file that shouldnt be there",
      "createdAt": "2022-07-06T21:34:04Z",
      "updatedAt": "2022-07-07T20:19:50Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "0166cde0c195a70aa1241ef25ce0de44e6fce4d4",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "patch-1",
      "headRefOid": "2aab65a7f222a8af27e222b6e84082c2839cf5ce",
      "closedAt": "2022-07-07T20:19:50Z",
      "mergedAt": "2022-07-07T20:19:50Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "fdc8bac32ea79f3bdddd0e82764e82517d0dddbe"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM49e8hP",
          "commit": {
            "abbreviatedOid": "2aab65a"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-07T12:52:11Z",
          "updatedAt": "2022-07-07T12:52:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM49hOBX",
          "commit": {
            "abbreviatedOid": "2aab65a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-07T20:19:43Z",
          "updatedAt": "2022-07-07T20:19:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 112,
      "id": "PR_kwDOHTmVzM47ETZv",
      "title": "fix: small third-person typo in introduction",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/112",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-07T23:22:42Z",
      "updatedAt": "2022-07-08T10:44:08Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "fdc8bac32ea79f3bdddd0e82764e82517d0dddbe",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "patch-2",
      "headRefOid": "90c885279c57dd65e799a5075767419a85add44e",
      "closedAt": "2022-07-08T10:44:08Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "The current spelling is correct since the 'convey' refers to the plural 'SD-JWT-Releases'.\r\n\r\nThat said, the sentence is not easy to read and may need improvement.",
          "createdAt": "2022-07-08T09:47:02Z",
          "updatedAt": "2022-07-08T09:47:02Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 113,
      "id": "PR_kwDOHTmVzM47I7Ob",
      "title": "fix: python example",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/113",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- fix: information printed out in the examples, bad pointer\r\n- feat: salt randomness improved",
      "createdAt": "2022-07-09T09:34:33Z",
      "updatedAt": "2022-07-11T15:10:06Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "fdc8bac32ea79f3bdddd0e82764e82517d0dddbe",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "pyexfix",
      "headRefOid": "f2e35acb14e78858b41baf9b40465f57caffb5bd",
      "closedAt": "2022-07-11T15:10:06Z",
      "mergedAt": "2022-07-11T15:10:06Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "500ca5e6668c838424dba2231717926c46e9b9f3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM49n6U_",
          "commit": {
            "abbreviatedOid": "f2e35ac"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-11T06:55:21Z",
          "updatedAt": "2022-07-11T06:55:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM49qVhI",
          "commit": {
            "abbreviatedOid": "f2e35ac"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-11T15:09:19Z",
          "updatedAt": "2022-07-11T15:09:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 115,
      "id": "PR_kwDOHTmVzM47Lc23",
      "title": "Generalize examples & more python code cleanup",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/115",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "In this PR, I generalized the examples: Right now, there is a lot of repetition in the code for each of the three examples. With more examples (W3C VC) and more example code (claims merging) to come, things will get more complicated.\r\n\r\nI therefore moved the examples into a separate directory as YAML files. I used YAML, because this means that we can store all data required for each example as separate JSON documents in one YAML file (JSON is a subset of YAML). \r\n\r\nThe code can now be called with a YAML file as the input and will run the demo for the example defined in the file. This will make it easier for us to add more examples in the future.\r\n\r\nAlso in this pull request:\r\n\r\n- Cleaned up the code to produce just one example each time - there is no need to calculate all examples when only one is used in each run\r\n- Cleaned up the code to produce both the CLI output and the spec examples from the same set of data to avoid repetitions\r\n- This means that placeholders in main.md are now strictly named as follows: `example-{example_id}-{artifact_id}`, where `artifact_id` refers to the identifier of the data produced in the example run (see `sd_jwt` file).\r\n- Fix for example output: serialized SVC was not shown, but serialized SD-JWT twice\r\n- Renamed `_sel_exp` to `_artifacts` (not sure what `_sel_exp` was meant to say)\r\n- Fix for no_randomness: RNG was seeded to static value even when no_randomness was not used",
      "createdAt": "2022-07-11T09:15:58Z",
      "updatedAt": "2022-07-13T06:37:02Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "500ca5e6668c838424dba2231717926c46e9b9f3",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/more-python-cleanup",
      "headRefOid": "4f8834479db69b5410770723d6e4d0aa5f4ea732",
      "closedAt": "2022-07-13T06:37:02Z",
      "mergedAt": "2022-07-13T06:37:02Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "98ced14b4faec695f4f04f909de142ca83858d72"
      },
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> Cleaned up the code to produce just one example each time - there is no need to calculate all examples when only one is used in each run\r\n\r\nYes, it was in my backlog, thanx. \r\nThis first proposal was to get all the examples in a single shot, we can add a CLI parameter, I'll have a look for that\r\n\r\n> Cleaned up the code to produce both the CLI output and the spec examples from the same set of data to avoid repetitions\r\nThis means that placeholders in main.md are now strictly named as follows: example-{example_id}-{artifact_id}, where artifact_id refers to the identifier of the data produced in the example run (see sd_jwt file).\r\n\r\nThank you, I wanted to make a proposal for this, you did it\r\n\r\n> Fix for example output: serialized SVC was not shown, but serialized SD-JWT twice\r\n\r\nMy bad\r\n\r\n> Renamed _sel_exp to _artifacts (not sure what _sel_exp was meant to say)\r\n\r\nit was \"selected example\" but artifacts is better anyway\r\n\r\n> Fix for no_randomness: RNG was seeded to static value even when no_randomness was not used\r\n\r\nOK!",
          "createdAt": "2022-07-11T09:24:58Z",
          "updatedAt": "2022-07-11T09:24:58Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM49omGL",
          "commit": {
            "abbreviatedOid": "aa63998"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-07-11T09:27:40Z",
          "updatedAt": "2022-07-11T09:31:09Z",
          "comments": [
            {
              "originalPosition": 159,
              "body": "* prevented code repetition but this solution is fair",
              "createdAt": "2022-07-11T09:27:40Z",
              "updatedAt": "2022-07-11T09:31:09Z"
            },
            {
              "originalPosition": 277,
              "body": "f-string is better here :)",
              "createdAt": "2022-07-11T09:28:47Z",
              "updatedAt": "2022-07-11T09:31:09Z"
            },
            {
              "originalPosition": 1,
              "body": "file extention is yml but content of user_claims is json",
              "createdAt": "2022-07-11T09:30:33Z",
              "updatedAt": "2022-07-11T09:31:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49ooLN",
          "commit": {
            "abbreviatedOid": "aa63998"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T09:34:26Z",
          "updatedAt": "2022-07-11T09:34:27Z",
          "comments": [
            {
              "originalPosition": 159,
              "body": "Keeping as proposed is okay?",
              "createdAt": "2022-07-11T09:34:26Z",
              "updatedAt": "2022-07-11T09:34:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49ooSY",
          "commit": {
            "abbreviatedOid": "aa63998"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T09:34:50Z",
          "updatedAt": "2022-07-11T09:34:50Z",
          "comments": [
            {
              "originalPosition": 277,
              "body": "Intentional decision - I found this much cleaner.",
              "createdAt": "2022-07-11T09:34:50Z",
              "updatedAt": "2022-07-11T09:34:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49oo5v",
          "commit": {
            "abbreviatedOid": "aa63998"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T09:36:51Z",
          "updatedAt": "2022-07-11T09:36:51Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "As I wrote, JSON is a subset of YAML. The file is a YAML file and the file ending is correct, but we can store the user details as JSON which is close to what we show in the spec. I chose not to use JSON for the full file, as one big JSON structure would look convoluted.",
              "createdAt": "2022-07-11T09:36:51Z",
              "updatedAt": "2022-07-11T09:36:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49ouJG",
          "commit": {
            "abbreviatedOid": "aa63998"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T09:54:04Z",
          "updatedAt": "2022-07-11T09:54:04Z",
          "comments": [
            {
              "originalPosition": 159,
              "body": "I found a better solution: `import settings` and `import sd_jwt.demo_settings as settings`, respectively.",
              "createdAt": "2022-07-11T09:54:04Z",
              "updatedAt": "2022-07-11T09:54:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49ow6J",
          "commit": {
            "abbreviatedOid": "7a55bf6"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-11T10:03:20Z",
          "updatedAt": "2022-07-11T10:03:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM49zMv2",
          "commit": {
            "abbreviatedOid": "4f88344"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-13T06:36:29Z",
          "updatedAt": "2022-07-13T06:36:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 116,
      "id": "PR_kwDOHTmVzM47LzUZ",
      "title": "Add acknowledgements",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/116",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-11T10:49:40Z",
      "updatedAt": "2022-07-11T15:06:25Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "fdc8bac32ea79f3bdddd0e82764e82517d0dddbe",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/add-acknowledgements",
      "headRefOid": "aa14a3002066d764a95eaac1500f6ad28e094afc",
      "closedAt": "2022-07-11T15:06:24Z",
      "mergedAt": "2022-07-11T15:06:24Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "683d4b03c5b4c7cec34181e63f1a0269c12d1df3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM49qUSf",
          "commit": {
            "abbreviatedOid": "aa14a30"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-11T15:06:18Z",
          "updatedAt": "2022-07-11T15:06:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 117,
      "id": "PR_kwDOHTmVzM47M0v9",
      "title": "OO interface for our library",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/117",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This commit changes the interface of the library from a set of functions to an object-oriented interface.\r\n\r\nThis will help with future improvements (blinded claim names, for example).",
      "createdAt": "2022-07-11T14:59:54Z",
      "updatedAt": "2022-07-13T06:41:01Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "danielfett/more-python-cleanup",
      "baseRefOid": "4f8834479db69b5410770723d6e4d0aa5f4ea732",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/clean-python-interface",
      "headRefOid": "34a6e88ded06cdea5b9a0057f9fbdd47b3130b6c",
      "closedAt": "2022-07-13T06:41:01Z",
      "mergedAt": "2022-07-13T06:41:01Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "e8b88dc5b751d98618a6f7f2cb21cb3a0194e439"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM49qahy",
          "commit": {
            "abbreviatedOid": "6ffffef"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "It was a great pleasure to me have read this PR, this OOP approach is the natural evolution of the code and it's the best improvement to facilitate unit testing\r\n\r\nad maiora @danielfett ",
          "createdAt": "2022-07-11T15:22:25Z",
          "updatedAt": "2022-07-11T15:22:25Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM49zNxU",
          "commit": {
            "abbreviatedOid": "34a6e88"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Agreed. this is great. thank you, Daniel.",
          "createdAt": "2022-07-13T06:40:55Z",
          "updatedAt": "2022-07-13T06:40:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 119,
      "id": "PR_kwDOHTmVzM47PstX",
      "title": "changed sub_jwk to cnf claim for holder binding",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/119",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "addresses Issue #77",
      "createdAt": "2022-07-12T08:06:10Z",
      "updatedAt": "2022-07-18T14:35:24Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "9251f360d36d8a5c18bbe1a2d8e9e1281aa28606",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "cnf-claim",
      "headRefOid": "bcd89facc4a8d8f48bd24f6d7bb33e5997a33bb6",
      "closedAt": "2022-07-18T14:35:23Z",
      "mergedAt": "2022-07-18T14:35:23Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "84afa1c8b257c7127b83671088acc60c56d726ef"
      },
      "comments": [
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "@Sakurann considering the last OOP refactor on the python code and the revision of Brian probably it would be easier to close this PR and starting a new one on top of the current master branch, the changes in the code and in the text are very trivial",
          "createdAt": "2022-07-13T23:45:27Z",
          "updatedAt": "2022-07-13T23:45:27Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "@peppelinux ok, please do a PR directly to this branch :)",
          "createdAt": "2022-07-14T21:28:57Z",
          "updatedAt": "2022-07-14T21:29:27Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM49xRRb",
          "commit": {
            "abbreviatedOid": "53c160f"
          },
          "author": "bc-pi",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-12T18:55:07Z",
          "updatedAt": "2022-07-12T18:55:07Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "There's a layer of nesting missing here per https://datatracker.ietf.org/doc/html/rfc7800#section-3.2 that uses \"jwk\" as the confirmation method name.  i.e.:\r\n\r\n```\r\n\"cnf\":{\r\n    \"jwk\":{\r\n        \"kty\": \"RSA\",\r\n          ...  n and e ... \r\n }}```",
              "createdAt": "2022-07-12T18:55:07Z",
              "updatedAt": "2022-07-12T18:55:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49xRZL",
          "commit": {
            "abbreviatedOid": "53c160f"
          },
          "author": "bc-pi",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-12T18:55:33Z",
          "updatedAt": "2022-07-12T18:55:33Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "here too same as https://github.com/oauthstuff/draft-selective-disclosure-jwt/pull/119/files#r919304849",
              "createdAt": "2022-07-12T18:55:33Z",
              "updatedAt": "2022-07-12T18:59:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM495hS4",
          "commit": {
            "abbreviatedOid": "53c160f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "@Sakurann I can do PR to your branch directly if you agree or start another PR and close this",
          "createdAt": "2022-07-14T08:24:28Z",
          "updatedAt": "2022-07-14T08:24:28Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM4-Dyw7",
          "commit": {
            "abbreviatedOid": "bcd89fa"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-17T20:53:02Z",
          "updatedAt": "2022-07-17T20:53:02Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM4-GxnH",
          "commit": {
            "abbreviatedOid": "bcd89fa"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-18T14:35:12Z",
          "updatedAt": "2022-07-18T14:35:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 120,
      "id": "PR_kwDOHTmVzM47UY-c",
      "title": "Missing commits in master",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/120",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "The OO interface PR ended up in danielfett/more-python-cleanup, but not in master. I'll merge this PR immediately.",
      "createdAt": "2022-07-13T08:37:11Z",
      "updatedAt": "2022-07-13T08:37:20Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "98ced14b4faec695f4f04f909de142ca83858d72",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/more-python-cleanup",
      "headRefOid": "e8b88dc5b751d98618a6f7f2cb21cb3a0194e439",
      "closedAt": "2022-07-13T08:37:20Z",
      "mergedAt": "2022-07-13T08:37:20Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "9251f360d36d8a5c18bbe1a2d8e9e1281aa28606"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 121,
      "id": "PR_kwDOHTmVzM47VAGJ",
      "title": "chore: bound version to 0.2.0",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/121",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "simple PR that defines a new release following the OOP refactoring of the code and all the bugfixes and minor changes",
      "createdAt": "2022-07-13T11:11:07Z",
      "updatedAt": "2022-07-14T20:58:46Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "9251f360d36d8a5c18bbe1a2d8e9e1281aa28606",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "0.2.0",
      "headRefOid": "58e82af9c50d19cb22b528cd1a31d6b2c2dcfbd1",
      "closedAt": "2022-07-14T20:58:46Z",
      "mergedAt": "2022-07-14T20:58:45Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "9a5116b0a7972bca1c2253dc1d7921b203f890a1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM491l74",
          "commit": {
            "abbreviatedOid": "58e82af"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-13T14:25:12Z",
          "updatedAt": "2022-07-13T14:25:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM499RS0",
          "commit": {
            "abbreviatedOid": "58e82af"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-14T20:58:37Z",
          "updatedAt": "2022-07-14T20:58:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 122,
      "id": "PR_kwDOHTmVzM47Wk7x",
      "title": "chore: added eidas complex examples",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/122",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "An excercise to define a kind of eIDAS PID docType in SD-JWT using OIDC Identity assurance ... without the adoption on JWT-VC [vc-data-model] for now.",
      "createdAt": "2022-07-13T17:39:31Z",
      "updatedAt": "2022-10-14T12:19:49Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "9251f360d36d8a5c18bbe1a2d8e9e1281aa28606",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "eidas_example_proposal",
      "headRefOid": "98d9219deb1c203a8d2835154f4297a2ad87d09e",
      "closedAt": "2022-10-14T12:19:49Z",
      "mergedAt": "2022-10-14T12:19:49Z",
      "mergedBy": "peppelinux",
      "mergeCommit": {
        "oid": "33ce829aa54317745dad13ba662f455ca1d78124"
      },
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "are we adding one more example in the annex..?",
          "createdAt": "2022-07-14T20:58:22Z",
          "updatedAt": "2022-07-14T20:58:22Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> are we adding one more example in the annex..?\r\n\r\nnot for today, I'd wait for the release of OIDC IDA before this and also I'd wait for the reactions of other collegues, regarding the discussion paper on SD-JWT I have just submitted ",
          "createdAt": "2022-07-14T21:07:55Z",
          "updatedAt": "2022-07-14T21:07:55Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I don't think we would need to wait for OIDC4IDA as long as we mention that the example is based on a non-final version of OIDC4IDA. ",
          "createdAt": "2022-07-15T07:37:01Z",
          "updatedAt": "2022-07-15T07:37:01Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM495uCL",
          "commit": {
            "abbreviatedOid": "98d9219"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-14T09:02:48Z",
          "updatedAt": "2022-07-14T09:02:48Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "This line just made me realized another big advantage of YAML here - we can have comments!",
              "createdAt": "2022-07-14T09:02:48Z",
              "updatedAt": "2022-07-14T09:02:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM495uEI",
          "commit": {
            "abbreviatedOid": "98d9219"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-14T09:02:54Z",
          "updatedAt": "2022-07-14T09:02:54Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5EBNSb",
          "commit": {
            "abbreviatedOid": "98d9219"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-13T16:48:28Z",
          "updatedAt": "2022-10-13T16:48:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 123,
      "id": "PR_kwDOHTmVzM47XoUF",
      "title": "BREAKING CHANGE: hash_alg renamed to sd_hash_alg",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/123",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/111\r\n\r\nIf this PR title is too noisy I can change it indeed, I use [conventional commits](https://www.conventionalcommits.org/en/v1.0.0/)",
      "createdAt": "2022-07-13T23:53:36Z",
      "updatedAt": "2022-07-14T20:56:48Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "9251f360d36d8a5c18bbe1a2d8e9e1281aa28606",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "sd_hash_alg",
      "headRefOid": "0cb1f4bd2c5dd61e897364a34f4d4ba6e781e8fe",
      "closedAt": "2022-07-14T20:56:40Z",
      "mergedAt": "2022-07-14T20:56:40Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "85942e89c55980acc355b4d6815411c77e689980"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> Closes #111\r\n> \r\n> If this PR title is too noisy I can change it indeed, I use [conventional commits](https://www.conventionalcommits.org/en/v1.0.0/)\r\n\r\nNo need for shouting ;-)\r\n\r\n",
          "createdAt": "2022-07-14T09:00:12Z",
          "updatedAt": "2022-07-14T09:00:12Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> No need for shouting\r\n\r\nThey asked me to do that. Generally is often ask to italian to not be too loud and you can understand my embarrassment when I read they want make me shout, knowing that then someonelse will ask me to don't do that for sure.\r\n\r\nConventional shoutings?\r\nIf is there any suggetions :'-)\r\n\r\n![image](https://user-images.githubusercontent.com/1297620/178952890-51b3fbf3-5962-488e-ac16-891be328579d.png)\r\n",
          "createdAt": "2022-07-14T09:43:28Z",
          "updatedAt": "2022-07-14T09:43:28Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Yes, I noticed that this is prescribed by conventional commits :-) I guess I can get used to it.",
          "createdAt": "2022-07-14T09:46:30Z",
          "updatedAt": "2022-07-14T09:46:39Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "> Yes, I noticed that this is prescribed by conventional commits :-) I guess I can get used to it.\r\n\r\nnow you have to shout it on the road for a concrete commitment!",
          "createdAt": "2022-07-14T09:57:22Z",
          "updatedAt": "2022-07-14T09:57:22Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "here's to Daniel also shouting",
          "createdAt": "2022-07-14T20:56:48Z",
          "updatedAt": "2022-07-14T20:56:48Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM495tbx",
          "commit": {
            "abbreviatedOid": "0cb1f4b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-14T09:00:58Z",
          "updatedAt": "2022-07-14T09:00:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM499Qzw",
          "commit": {
            "abbreviatedOid": "0cb1f4b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-14T20:56:32Z",
          "updatedAt": "2022-07-14T20:56:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 124,
      "id": "PR_kwDOHTmVzM47ZHmV",
      "title": "Proposal for blinding claim names",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/124",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-14T09:32:57Z",
      "updatedAt": "2022-10-01T04:46:31Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "2849d6a1ee96182b06e3683833673e9313564987",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/blinded-claim-names",
      "headRefOid": "39d5be4e6eb77420c914ff66c3f4502ede207e50",
      "closedAt": "2022-10-01T04:46:31Z",
      "mergedAt": "2022-10-01T04:46:31Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "199222e62a20f87bfdb838c944cd495b7c32232f"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Spec text updated, please review!",
          "createdAt": "2022-07-21T09:56:57Z",
          "updatedAt": "2022-07-21T09:56:57Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "George during OAuth side mtg pointed out that it is important for the verifier not to change anything in the JSON object in the Release (ie SVC )that is being hashed so that the hash output is the same from the one in SD-JWT",
          "createdAt": "2022-07-28T18:28:25Z",
          "updatedAt": "2022-07-28T18:28:25Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM4957lV",
          "commit": {
            "abbreviatedOid": "eba592f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-07-14T09:45:36Z",
          "updatedAt": "2022-07-14T09:49:29Z",
          "comments": [
            {
              "originalPosition": 195,
              "body": "typo \"is not a dictionary\" instead",
              "createdAt": "2022-07-14T09:45:37Z",
              "updatedAt": "2022-07-14T09:49:29Z"
            },
            {
              "originalPosition": 9,
              "body": "mmhhh ... probably nesting that lambda in find_fn is not for the people, can we have a simple None there a an if in the code that makes it more easy to be debugged?\r\n````\r\nif not find_fn:\r\n    find_fn = lambda s, k: (k, s[k])\r\n````",
              "createdAt": "2022-07-14T09:47:16Z",
              "updatedAt": "2022-07-14T09:49:29Z"
            },
            {
              "originalPosition": 8,
              "body": "it could be a pain if we decide to push many examples but use only some of them for updating the main.md\r\n\r\na huge stdout is a problem\r\n\r\nprobably I'll push the eidas example I'm working on but I would tell to users that they may use them without enabling all of them by default",
              "createdAt": "2022-07-14T09:49:23Z",
              "updatedAt": "2022-07-14T09:49:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM496UXT",
          "commit": {
            "abbreviatedOid": "eba592f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-14T11:12:39Z",
          "updatedAt": "2022-07-14T11:12:39Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "In 'replace' mode, the stdout is mainly for placeholders that have not been found, which is really not that much.\r\n\r\nExample right now:\r\n```\r\ndanielf@www:~/git/ietf/draft-selective-disclosure-jwt$ ./update-all-examples.sh \r\nUsing fixed randomness for demo purposes\r\nCould not find placeholder with id example-simple-serialized_svc\r\nCould not find placeholder with id example-simple-verified_contents\r\nUsing fixed randomness for demo purposes\r\nCould not find placeholder with id example-simple_structured-user_claims\r\nCould not find placeholder with id example-simple_structured-serialized_sd_jwt\r\nCould not find placeholder with id example-simple_structured-serialized_svc\r\nCould not find placeholder with id example-simple_structured-combined_sd_jwt_svc\r\nCould not find placeholder with id example-simple_structured-serialized_sd_jwt_release\r\nCould not find placeholder with id example-simple_structured-combined_sd_jwt_sd_jwt_release\r\nCould not find placeholder with id example-simple_structured-verified_contents\r\nUsing fixed randomness for demo purposes\r\nCould not find placeholder with id example-complex-svc_payload\r\nCould not find placeholder with id example-complex-serialized_svc\r\nCould not find placeholder with id example-complex-combined_sd_jwt_svc\r\nCould not find placeholder with id example-complex-serialized_sd_jwt_release\r\nCould not find placeholder with id example-complex-combined_sd_jwt_sd_jwt_release\r\nCould not find placeholder with id example-complex-verified_contents\r\n```",
              "createdAt": "2022-07-14T11:12:39Z",
              "updatedAt": "2022-07-14T11:12:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM496Un0",
          "commit": {
            "abbreviatedOid": "eba592f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-14T11:13:33Z",
          "updatedAt": "2022-07-14T11:13:34Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "That's right, will change.",
              "createdAt": "2022-07-14T11:13:33Z",
              "updatedAt": "2022-07-14T11:13:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM496Up-",
          "commit": {
            "abbreviatedOid": "eba592f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-14T11:13:41Z",
          "updatedAt": "2022-07-14T11:13:41Z",
          "comments": [
            {
              "originalPosition": 195,
              "body": "Indeed, thanks!",
              "createdAt": "2022-07-14T11:13:41Z",
              "updatedAt": "2022-07-14T11:13:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM496Xxq",
          "commit": {
            "abbreviatedOid": "eba592f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-14T11:25:22Z",
          "updatedAt": "2022-07-14T11:25:22Z",
          "comments": [
            {
              "originalPosition": 195,
              "body": "Fixed now!",
              "createdAt": "2022-07-14T11:25:22Z",
              "updatedAt": "2022-07-14T11:25:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM496X9q",
          "commit": {
            "abbreviatedOid": "eba592f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-14T11:26:08Z",
          "updatedAt": "2022-07-14T11:26:08Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Fixed by making the 'default' function explicit. ",
              "createdAt": "2022-07-14T11:26:08Z",
              "updatedAt": "2022-07-14T11:26:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49784k",
          "commit": {
            "abbreviatedOid": "8ec9dc1"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-14T16:09:38Z",
          "updatedAt": "2022-07-14T16:09:38Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM4-XQGX",
          "commit": {
            "abbreviatedOid": "e333edf"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-21T10:11:50Z",
          "updatedAt": "2022-07-21T10:11:57Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "@danielfett fixed conflicts and updated this def committing directly in your branch\r\n\r\nthen I have pushed another commit to fix the previous typo (weird movement on the keyboard?) anyway feel free to rebase these",
              "createdAt": "2022-07-21T10:11:50Z",
              "updatedAt": "2022-07-23T10:41:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4-XQhL",
          "commit": {
            "abbreviatedOid": "e333edf"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-21T10:13:13Z",
          "updatedAt": "2022-07-21T10:13:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM4-XQqE",
          "commit": {
            "abbreviatedOid": "e333edf"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-21T10:13:42Z",
          "updatedAt": "2022-07-21T10:13:42Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "sure to have a DEBUG level here?",
              "createdAt": "2022-07-21T10:13:42Z",
              "updatedAt": "2022-07-21T10:13:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4-k3LT",
          "commit": {
            "abbreviatedOid": "e333edf"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-25T17:56:18Z",
          "updatedAt": "2022-07-25T17:56:18Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "Removed again - should not be there",
              "createdAt": "2022-07-25T17:56:18Z",
              "updatedAt": "2022-07-25T17:56:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4_ZOkC",
          "commit": {
            "abbreviatedOid": "3b7a260"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-05T16:09:10Z",
          "updatedAt": "2022-08-05T16:09:11Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nClaim name blinding\r\n:  Feature that enables to blind not only claim values, but also claim names of the claims \r\nthat are included in SD-JWT but are not disclosed to the verifier in the SD-JWT-Release.\r\n```",
              "createdAt": "2022-08-05T16:09:10Z",
              "updatedAt": "2022-08-05T16:09:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4_ZPMc",
          "commit": {
            "abbreviatedOid": "3b7a260"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-05T16:11:29Z",
          "updatedAt": "2022-08-05T16:41:49Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "this looks like an unfinished text?",
              "createdAt": "2022-08-05T16:11:29Z",
              "updatedAt": "2022-08-05T16:41:49Z"
            },
            {
              "originalPosition": 411,
              "body": "```suggestion\r\nBlinding claim names might not provide additional privacy if this is the case.\r\n\r\nFurthermore, re-using the same value to blind a claim name may limit the privacy benefits.\r\n\r\n```",
              "createdAt": "2022-08-05T16:41:27Z",
              "updatedAt": "2022-08-05T16:41:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5BVS86",
          "commit": {
            "abbreviatedOid": "0751740"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-05T08:50:24Z",
          "updatedAt": "2022-09-05T08:50:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 126,
      "id": "PR_kwDOHTmVzM47ZenB",
      "title": "Remove outdated HTML versions",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/126",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "It's on the IETF website after all, and viewing main.md works just fine.",
      "createdAt": "2022-07-14T11:06:18Z",
      "updatedAt": "2022-07-17T20:26:21Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "9251f360d36d8a5c18bbe1a2d8e9e1281aa28606",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/remove-html-files",
      "headRefOid": "46dcbc4a78b0479776feeaaa17604ab377687e98",
      "closedAt": "2022-07-17T20:26:21Z",
      "mergedAt": "2022-07-17T20:26:20Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "9bcf63507174f82ca1141e2738b82f1ab7cd9f9b"
      },
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "umm... many implementors of sd-jwt as a vc would not know ietf process and where to look for the ietf htmls. I would prefer keeping main.md as-is",
          "createdAt": "2022-07-14T20:55:14Z",
          "updatedAt": "2022-07-14T20:55:14Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "@Sakurann the problem is that html is very outdated and we don't have a CD to keep it updated and, anyway, it would be an online replica. Having in the README a clear pointer to the IETF official page of SD-JWT I don't feel any worry for our implementers",
          "createdAt": "2022-07-14T21:11:14Z",
          "updatedAt": "2022-07-14T21:11:14Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "ah ok. I am ok deleting [github.io](https://oauthstuff.github.io/draft-selective-disclosure-jwt/draft-fett-selective-disclosure-jwt-00.html) for an HTML version.\r\nbut why do we need to remove [IETF OAuth WG](https://datatracker.ietf.org/doc/draft-fett-oauth-selective-disclosure-jwt/)?",
          "createdAt": "2022-07-14T21:22:10Z",
          "updatedAt": "2022-07-14T21:22:10Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM499YW3",
          "commit": {
            "abbreviatedOid": "4c7d6e4"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-14T21:28:11Z",
          "updatedAt": "2022-07-14T21:28:27Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "hem.. probably @Sakurann is right, can we reenable the [IETF OAuth WG](https://datatracker.ietf.org/doc/draft-fett-oauth-selective-disclosure-jwt/) link?\r\n\r\nas it is in this change the url is published quite raw",
              "createdAt": "2022-07-14T21:28:11Z",
              "updatedAt": "2022-07-14T21:28:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM499aAa",
          "commit": {
            "abbreviatedOid": "4c7d6e4"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-14T21:36:50Z",
          "updatedAt": "2022-07-14T21:36:50Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nThis is a GitHub repository for a draft specification in the [IETF OAuth WG](https://datatracker.ietf.org/doc/draft-fett-oauth-selective-disclosure-jwt/). For the latest published version of this IETF draft, please see https://datatracker.ietf.org/doc/html/draft-fett-selective-disclosure-jwt\r\n```",
              "createdAt": "2022-07-14T21:36:50Z",
              "updatedAt": "2022-07-14T21:36:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM49-950",
          "commit": {
            "abbreviatedOid": "4c7d6e4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-15T07:39:22Z",
          "updatedAt": "2022-07-15T07:39:23Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "You're right, I added the link again!",
              "createdAt": "2022-07-15T07:39:22Z",
              "updatedAt": "2022-07-15T07:39:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4-BPyy",
          "commit": {
            "abbreviatedOid": "46dcbc4"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-15T16:13:37Z",
          "updatedAt": "2022-07-15T16:13:37Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM4-DyQ9",
          "commit": {
            "abbreviatedOid": "46dcbc4"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-17T20:26:05Z",
          "updatedAt": "2022-07-17T20:26:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 127,
      "id": "PR_kwDOHTmVzM47brWy",
      "title": "update sd-jwt-vc example",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/127",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Updated how sd_digests are included in sd-jwt-vc (as credentialSubject as opposed to a top-level claim)\r\n- Updated holder binding using raw public key",
      "createdAt": "2022-07-14T20:53:10Z",
      "updatedAt": "2022-09-10T01:50:13Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "9251f360d36d8a5c18bbe1a2d8e9e1281aa28606",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "vc-data-model",
      "headRefOid": "f9b0e9468b1b81bb5817dc8a5c77e5d6b480dc91",
      "closedAt": "2022-09-10T01:50:13Z",
      "mergedAt": "2022-09-10T01:50:13Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "605030365642d00a8ad29cc96b9b0d89a34b4d2c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM499VAU",
          "commit": {
            "abbreviatedOid": "e495508"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-14T21:12:06Z",
          "updatedAt": "2022-07-14T21:12:06Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "interesting :)",
              "createdAt": "2022-07-14T21:12:06Z",
              "updatedAt": "2022-07-14T21:12:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM499Vmw",
          "commit": {
            "abbreviatedOid": "e495508"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I don't have any clue fo jwt-vc and these examples, I approve this as it is because seems good right now but I'll take some moment to put my head on jwt-vc concretely to back to this ",
          "createdAt": "2022-07-14T21:14:57Z",
          "updatedAt": "2022-07-14T21:14:57Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM499Y12",
          "commit": {
            "abbreviatedOid": "e495508"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-14T21:30:41Z",
          "updatedAt": "2022-07-14T21:30:41Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n  \"sub\": \"urn:ietf:params:oauth:jwk-thumbprint:sha-256:NzbLsXh8uDCcd-6MNwXF4W_7noWXFZAfHkxZsRGC9Xs\",\r\n```",
              "createdAt": "2022-07-14T21:30:41Z",
              "updatedAt": "2022-07-14T21:30:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM499Y7X",
          "commit": {
            "abbreviatedOid": "e495508"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-14T21:31:05Z",
          "updatedAt": "2022-07-14T21:31:06Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "```suggestion\r\n  \"iss\": \"urn:ietf:params:oauth:jwk-thumbprint:sha-256:NzbLsXh8uDCcd-6MNwXF4W_7noWXFZAfHkxZsRGC9Xs\",\r\n```",
              "createdAt": "2022-07-14T21:31:05Z",
              "updatedAt": "2022-07-14T21:31:06Z"
            }
          ]
        }
      ]
    },
    {
      "number": 128,
      "id": "PR_kwDOHTmVzM47pqyC",
      "title": "Rename spec to 'Selective Disclosure for JWTs'",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/128",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "PR for https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/125",
      "createdAt": "2022-07-19T13:23:12Z",
      "updatedAt": "2022-08-04T19:44:57Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "84afa1c8b257c7127b83671088acc60c56d726ef",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/rename-spec",
      "headRefOid": "adf710026672030aa17883b0470dadfcd4862f5a",
      "closedAt": "2022-08-04T19:44:57Z",
      "mergedAt": "2022-08-04T19:44:57Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "feb5b6ff7f4edf2af307e23fdf03b05a645607e0"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Done, and also cleaned up the intro slightly (repeating 'document' is superfluous there).",
          "createdAt": "2022-07-21T08:26:22Z",
          "updatedAt": "2022-07-21T08:26:22Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM4-NdPE",
          "commit": {
            "abbreviatedOid": "2fb254a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Should we also change SD-JWT to \"Selectively disclosable JWT\"?",
          "createdAt": "2022-07-19T16:11:02Z",
          "updatedAt": "2022-07-19T16:11:02Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM4-aamz",
          "commit": {
            "abbreviatedOid": "53a544e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-21T20:38:56Z",
          "updatedAt": "2022-07-21T20:38:56Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "`token`..?",
              "createdAt": "2022-07-21T20:38:56Z",
              "updatedAt": "2022-07-21T20:38:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4-cgaC",
          "commit": {
            "abbreviatedOid": "53a544e"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-22T09:39:41Z",
          "updatedAt": "2022-07-22T09:39:41Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "...but the T in JWT already stands for 'token'...",
              "createdAt": "2022-07-22T09:39:41Z",
              "updatedAt": "2022-07-22T09:39:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4-2uEL",
          "commit": {
            "abbreviatedOid": "53a544e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-28T17:56:08Z",
          "updatedAt": "2022-07-28T17:56:08Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "yes, but I don't think many people call JWT a token...",
              "createdAt": "2022-07-28T17:56:08Z",
              "updatedAt": "2022-07-28T17:56:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4_VIx5",
          "commit": {
            "abbreviatedOid": "53a544e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-04T19:44:33Z",
          "updatedAt": "2022-08-04T19:44:33Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nsignatures. A consumer of a signed JWT that has checked the\r\n```",
              "createdAt": "2022-08-04T19:44:33Z",
              "updatedAt": "2022-08-04T19:44:33Z"
            }
          ]
        }
      ]
    },
    {
      "number": 130,
      "id": "PR_kwDOHTmVzM48RMZZ",
      "title": "sha-256 as MTI",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/130",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Issue #50 ",
      "createdAt": "2022-07-28T18:05:01Z",
      "updatedAt": "2022-08-04T22:19:42Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "84afa1c8b257c7127b83671088acc60c56d726ef",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "mti-hash",
      "headRefOid": "fb2eb8eaddf326eea1d6669ec7d72a3e9a631b66",
      "closedAt": "2022-08-04T22:19:41Z",
      "mergedAt": "2022-08-04T22:19:41Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "f39ce6bd94903be0edeb2ff61166efcb95783eaf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM4-4GHM",
          "commit": {
            "abbreviatedOid": "c8a76b0"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-07-29T00:32:13Z",
          "updatedAt": "2022-07-29T00:32:19Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "... the SHA-256 hash algorithm MUST be implemented.",
              "createdAt": "2022-07-29T00:32:13Z",
              "updatedAt": "2022-07-29T00:32:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4-4VSO",
          "commit": {
            "abbreviatedOid": "c8a76b0"
          },
          "author": "PieterKas",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-29T02:51:09Z",
          "updatedAt": "2022-07-29T02:51:53Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Agreed. Perhaps something even shorter like:\r\n\r\nImplementations MUST support the SHA-256 hash algorithm as shown in Example 1.",
              "createdAt": "2022-07-29T02:51:09Z",
              "updatedAt": "2022-07-29T02:51:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4_VJH6",
          "commit": {
            "abbreviatedOid": "c8a76b0"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-04T19:46:01Z",
          "updatedAt": "2022-08-04T19:46:02Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\nTo promote interoperability, implementations MUST support the SHA-256 hash algorithm.\r\n```",
              "createdAt": "2022-08-04T19:46:01Z",
              "updatedAt": "2022-08-04T19:46:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM4_VnG_",
          "commit": {
            "abbreviatedOid": "fb2eb8e"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-04T21:56:08Z",
          "updatedAt": "2022-08-04T21:56:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 135,
      "id": "PR_kwDOHTmVzM491HUo",
      "title": "rename draft after wg adoption",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/135",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "renaming from an individual draft to a WG adopted draft `draft-ietf-oauth-selective-disclosure-jwt-00`",
      "createdAt": "2022-08-25T23:26:17Z",
      "updatedAt": "2022-09-12T18:48:50Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f39ce6bd94903be0edeb2ff61166efcb95783eaf",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "wg-draft",
      "headRefOid": "a1fc1d3d304089157f877567f904b65d92811101",
      "closedAt": "2022-09-12T18:48:49Z",
      "mergedAt": "2022-09-12T18:48:49Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "1af50d11d8ae16e7cf110889e3c66d31e6c3903d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 136,
      "id": "PR_kwDOHTmVzM4-bgIj",
      "title": "clarified relationship btw sd_release in the Release and SVC",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/136",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Issue #133 \r\n(cc @vibronet)",
      "createdAt": "2022-09-06T10:50:29Z",
      "updatedAt": "2022-09-21T17:25:48Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f39ce6bd94903be0edeb2ff61166efcb95783eaf",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "clarifysdjwtsvc",
      "headRefOid": "00d70094d119feed1ef2ec3746dd7c14d6d63b57",
      "closedAt": "2022-09-21T17:25:48Z",
      "mergedAt": "2022-09-21T17:25:48Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "f07e44c8250a572d94a38c0ed3ba3137e89dfdff"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5Ceffg",
          "commit": {
            "abbreviatedOid": "00d7009"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-21T12:00:35Z",
          "updatedAt": "2022-09-21T12:00:35Z",
          "comments": []
        }
      ]
    },
    {
      "number": 138,
      "id": "PR_kwDOHTmVzM4-eO4W",
      "title": "fix: cnf structure in sd_jwk demo",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/138",
      "state": "MERGED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes https://github.com/oauthstuff/draft-selective-disclosure-jwt/issues/137",
      "createdAt": "2022-09-06T23:37:10Z",
      "updatedAt": "2022-09-27T23:26:59Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f39ce6bd94903be0edeb2ff61166efcb95783eaf",
      "headRepository": "peppelinux/draft-selective-disclosure-jwt",
      "headRefName": "cnf-fix",
      "headRefOid": "bd5cb8b39db308220eae9cdef68e08ca8b262b68",
      "closedAt": "2022-09-27T23:26:59Z",
      "mergedAt": "2022-09-27T23:26:59Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "2849d6a1ee96182b06e3683833673e9313564987"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5CAV5q",
          "commit": {
            "abbreviatedOid": "bd5cb8b"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-14T12:27:58Z",
          "updatedAt": "2022-09-14T12:27:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5C7QQ0",
          "commit": {
            "abbreviatedOid": "bd5cb8b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-27T23:26:53Z",
          "updatedAt": "2022-09-27T23:26:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 145,
      "id": "PR_kwDOHTmVzM4_6TNn",
      "title": "Editorial: Update Document History after WG adoption",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/145",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-09-30T06:35:31Z",
      "updatedAt": "2022-10-04T15:36:31Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "2849d6a1ee96182b06e3683833673e9313564987",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/editorial-update-history",
      "headRefOid": "d8b83d23b61ee290d2b549de85a6a39ba7c3b884",
      "closedAt": "2022-10-04T15:36:30Z",
      "mergedAt": "2022-10-04T15:36:30Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "64bf25aa2ad9edf1ad51806a8adfd45e04798597"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5DMUKq",
          "commit": {
            "abbreviatedOid": "d8b83d2"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-30T19:54:38Z",
          "updatedAt": "2022-09-30T19:54:38Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "usually -02 comes to the very top, no?",
              "createdAt": "2022-09-30T19:54:38Z",
              "updatedAt": "2022-09-30T19:54:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DMUTV",
          "commit": {
            "abbreviatedOid": "d8b83d2"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-30T19:55:16Z",
          "updatedAt": "2022-09-30T19:55:16Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "why are we removing this?",
              "createdAt": "2022-09-30T19:55:16Z",
              "updatedAt": "2022-09-30T19:55:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DUNyH",
          "commit": {
            "abbreviatedOid": "d8b83d2"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T06:45:21Z",
          "updatedAt": "2022-10-04T06:45:21Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "It was not used anywhere in the document.",
              "createdAt": "2022-10-04T06:45:21Z",
              "updatedAt": "2022-10-04T06:45:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DXXpp",
          "commit": {
            "abbreviatedOid": "d8b83d2"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-04T15:36:24Z",
          "updatedAt": "2022-10-04T15:36:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 146,
      "id": "PR_kwDOHTmVzM4_7MzJ",
      "title": "Improve explanation for JSON string literals and processing model",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/146",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-09-30T09:56:44Z",
      "updatedAt": "2022-10-14T04:46:03Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "danielfett/blinded-claim-names",
      "baseRefOid": "39d5be4e6eb77420c914ff66c3f4502ede207e50",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/blinded-claim-names-with-merging",
      "headRefOid": "8f0384648a7ddde4fc8679604d118695d7cefe42",
      "closedAt": "2022-10-14T04:45:11Z",
      "mergedAt": "2022-10-14T04:45:11Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "5d135f79eb3643376a3c1af058b427a455eda264"
      },
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this should have been two separate PRs - 1/ explanation for JSON string literals and 2/ merging SD claims with non-SD claims?",
          "createdAt": "2022-10-04T06:50:28Z",
          "updatedAt": "2022-10-04T06:50:28Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "@Sakurann I added an easier-to-understand example and included your suggestions. Ready to merge from my side.",
          "createdAt": "2022-10-07T08:19:19Z",
          "updatedAt": "2022-10-07T08:19:19Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5DUJLg",
          "commit": {
            "abbreviatedOid": "3f4d47c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T06:23:38Z",
          "updatedAt": "2022-10-04T06:23:38Z",
          "comments": [
            {
              "originalPosition": 461,
              "body": "why is `cnf` reverting back to not including `jwk` element..?",
              "createdAt": "2022-10-04T06:23:38Z",
              "updatedAt": "2022-10-04T06:23:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DUM8o",
          "commit": {
            "abbreviatedOid": "3f4d47c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T06:41:38Z",
          "updatedAt": "2022-10-04T06:41:38Z",
          "comments": [
            {
              "originalPosition": 461,
              "body": "I assume it's because this branch does not yet contain the fix for the `jwk` in `cnf`, but I'm not sure why it was in the example before. I expect that this will fix itself after merging into master.",
              "createdAt": "2022-10-04T06:41:38Z",
              "updatedAt": "2022-10-04T06:41:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DUKfF",
          "commit": {
            "abbreviatedOid": "3f4d47c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T06:30:07Z",
          "updatedAt": "2022-10-04T06:43:31Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I think this is the main point?\r\n```suggestion\r\nre-compute digests of the disclosed claim value and, given the same input values,\r\nobtain the same digest values as signed by the issuer.\r\n```",
              "createdAt": "2022-10-04T06:30:07Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 13,
              "body": "```suggestion\r\n```",
              "createdAt": "2022-10-04T06:30:34Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 19,
              "body": "```suggestion\r\n```",
              "createdAt": "2022-10-04T06:30:46Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 24,
              "body": "can this be generalized to `a problem arises when computation over the data need to be performed and verified` to cover signing and hashing from the onset? ",
              "createdAt": "2022-10-04T06:33:09Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 31,
              "body": "```suggestion\r\n```",
              "createdAt": "2022-10-04T06:33:38Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 34,
              "body": "were these intentional?\r\n```suggestion\r\n```",
              "createdAt": "2022-10-04T06:34:02Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 40,
              "body": "```suggestion\r\n```",
              "createdAt": "2022-10-04T06:34:12Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 43,
              "body": "```suggestion\r\n```",
              "createdAt": "2022-10-04T06:34:20Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 75,
              "body": "```suggestion\r\ncanonicalization library, purely based on widely available JSON encoding \r\nand decoding libraries. To encode the source string, JSON itself is used. To\r\n```",
              "createdAt": "2022-10-04T06:38:32Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 117,
              "body": "I would move this higher, where describing why this approach has been taken.\r\n```suggestion\r\n```",
              "createdAt": "2022-10-04T06:39:02Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 158,
              "body": "looks like Giuseppe's PR on adding `jwk` top level claim to `cnf` has been overwritten?",
              "createdAt": "2022-10-04T06:39:30Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 4,
              "body": "should this be in Implementation considerations section..?",
              "createdAt": "2022-10-04T06:40:06Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 385,
              "body": "```suggestion\r\nthat an application-consumable format is generated from the data released in\r\n```",
              "createdAt": "2022-10-04T06:40:29Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 428,
              "body": "```suggestion\r\nIn this example, the Issuer is using a following object as a set of selectively disclosable claims to issue to the Holder:\r\n```",
              "createdAt": "2022-10-04T06:41:20Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            },
            {
              "originalPosition": 398,
              "body": "why not an example with simple claim structure but complex claim structure?",
              "createdAt": "2022-10-04T06:43:27Z",
              "updatedAt": "2022-10-04T06:43:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DUNax",
          "commit": {
            "abbreviatedOid": "3f4d47c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T06:43:42Z",
          "updatedAt": "2022-10-04T06:43:43Z",
          "comments": [
            {
              "originalPosition": 461,
              "body": "I see that the base branch was merged, that explains this: The base branch now contains the fix, this branch did not yet, so this will be fixed after merging.",
              "createdAt": "2022-10-04T06:43:42Z",
              "updatedAt": "2022-10-04T06:43:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DURcH",
          "commit": {
            "abbreviatedOid": "3f4d47c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T07:00:19Z",
          "updatedAt": "2022-10-04T07:00:20Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Not sure - readers might miss it there.",
              "createdAt": "2022-10-04T07:00:19Z",
              "updatedAt": "2022-10-04T07:00:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DUSgD",
          "commit": {
            "abbreviatedOid": "3f4d47c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T07:04:25Z",
          "updatedAt": "2022-10-04T07:04:25Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "These are intentional to show that there might be other elements here. I'm not describing a specific format, just the general approach. Note that I also didn't add commas at the end of the lines.",
              "createdAt": "2022-10-04T07:04:25Z",
              "updatedAt": "2022-10-04T07:04:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DUS9c",
          "commit": {
            "abbreviatedOid": "3f4d47c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T07:06:06Z",
          "updatedAt": "2022-10-04T07:06:06Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "Your sentence sounds as if JSON encoding would be the only option, but there can be other approaches.",
              "createdAt": "2022-10-04T07:06:06Z",
              "updatedAt": "2022-10-04T07:06:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DUTFk",
          "commit": {
            "abbreviatedOid": "3f4d47c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T07:06:33Z",
          "updatedAt": "2022-10-04T07:06:33Z",
          "comments": [
            {
              "originalPosition": 158,
              "body": "As above, not overwritten but not in this branch yet.",
              "createdAt": "2022-10-04T07:06:33Z",
              "updatedAt": "2022-10-04T07:06:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DUTw9",
          "commit": {
            "abbreviatedOid": "3f4d47c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T07:09:05Z",
          "updatedAt": "2022-10-04T07:09:05Z",
          "comments": [
            {
              "originalPosition": 398,
              "body": "The complex claim structure example shows all interesting cases of the merging, especially how to merge objects. We can additionally show a simple example if you like.",
              "createdAt": "2022-10-04T07:09:05Z",
              "updatedAt": "2022-10-04T07:09:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DUT_w",
          "commit": {
            "abbreviatedOid": "3f4d47c"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T07:09:58Z",
          "updatedAt": "2022-10-04T07:09:58Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "Yes, sounds good to me.",
              "createdAt": "2022-10-04T07:09:58Z",
              "updatedAt": "2022-10-04T07:09:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DmF15",
          "commit": {
            "abbreviatedOid": "3685688"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-07T07:50:57Z",
          "updatedAt": "2022-10-07T07:50:58Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "```suggestion\r\nHowever, a problem arises when computation over the data need to be performed and verified, like signing or hashing. Common signature schemes require the same byte string as input to the\r\n```",
              "createdAt": "2022-10-07T07:50:57Z",
              "updatedAt": "2022-10-07T07:50:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Do5Vp",
          "commit": {
            "abbreviatedOid": "3f4d47c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-07T16:22:23Z",
          "updatedAt": "2022-10-07T16:22:23Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "ok, let's keep this and come back if needed :)",
              "createdAt": "2022-10-07T16:22:23Z",
              "updatedAt": "2022-10-07T16:22:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Do59y",
          "commit": {
            "abbreviatedOid": "5b7b583"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-07T16:24:12Z",
          "updatedAt": "2022-10-07T16:24:23Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "what does `like so` mean?\r\ntypo for `like below`?",
              "createdAt": "2022-10-07T16:24:12Z",
              "updatedAt": "2022-10-07T16:24:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DqQJV",
          "commit": {
            "abbreviatedOid": "5b7b583"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-08T00:10:43Z",
          "updatedAt": "2022-10-08T00:10:44Z",
          "comments": [
            {
              "originalPosition": 404,
              "body": "```suggestion\r\nThe holder can now, for example, release the rest of the components of the `address` claim in the SD-JWT-Release:\r\n```",
              "createdAt": "2022-10-08T00:10:43Z",
              "updatedAt": "2022-10-08T00:10:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DqQQ6",
          "commit": {
            "abbreviatedOid": "5b7b583"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-08T00:13:08Z",
          "updatedAt": "2022-10-08T00:13:09Z",
          "comments": [
            {
              "originalPosition": 368,
              "body": "```suggestion\r\nThe JSON-payload of the SD-JWT that contains both selectively disclosable claims in the `sd_digests` object and not selectively disclosable claims in a top-level JWT claim would look as follows:\r\n```",
              "createdAt": "2022-10-08T00:13:08Z",
              "updatedAt": "2022-10-08T00:13:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5D-gs1",
          "commit": {
            "abbreviatedOid": "ae33891"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-13T09:47:44Z",
          "updatedAt": "2022-10-13T09:47:44Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "Now you got me looking this up :-) Seems to be a [bit of a germanism](https://english.stackexchange.com/questions/4524/is-like-so-correct) but is proper English to say \"[like this](https://www.merriam-webster.com/dictionary/like%20so)\".",
              "createdAt": "2022-10-13T09:47:44Z",
              "updatedAt": "2022-10-13T09:47:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EDp2M",
          "commit": {
            "abbreviatedOid": "8f03846"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-14T04:45:05Z",
          "updatedAt": "2022-10-14T04:45:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5EDp8T",
          "commit": {
            "abbreviatedOid": "8f03846"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-14T04:45:56Z",
          "updatedAt": "2022-10-14T04:46:03Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "ah you didn't change it - will change in my next PR..",
              "createdAt": "2022-10-14T04:45:56Z",
              "updatedAt": "2022-10-14T04:46:03Z"
            }
          ]
        }
      ]
    },
    {
      "number": 147,
      "id": "PR_kwDOHTmVzM4_-v-o",
      "title": "[ed] added definition of selective disclosure",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/147",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-01T04:39:52Z",
      "updatedAt": "2022-10-06T13:25:17Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "2849d6a1ee96182b06e3683833673e9313564987",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "sd-def",
      "headRefOid": "59e38ea11236b01b71ca1b7c5e0ac03ec9deecca",
      "closedAt": "2022-10-06T13:25:17Z",
      "mergedAt": "2022-10-06T13:25:16Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "72e3b784e17f1e6882cb76ff137ac7212a721ff8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5DWG7T",
          "commit": {
            "abbreviatedOid": "dfd5454"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T12:50:17Z",
          "updatedAt": "2022-10-04T12:50:22Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Probably stylistic, but this feels more natural to me:\r\n```suggestion\r\n: Process of a Holder disclosing to a Verifier a subset of claims contained in a claim set issued by an Issuer.\r\n```",
              "createdAt": "2022-10-04T12:50:17Z",
              "updatedAt": "2022-10-04T12:50:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DiDaz",
          "commit": {
            "abbreviatedOid": "59e38ea"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-06T13:25:11Z",
          "updatedAt": "2022-10-06T13:25:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 148,
      "id": "PR_kwDOHTmVzM4_-wio",
      "title": "renamed SVC to a Disclosure Document",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/148",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- I did not create an abbreviation for a Disclosure Document, DD sounded weird..\r\n- I did not replace reference to `svc` in the example references like `#example-simple-combined_sd_jwt_svc` and `#example-simple-combined_sd_jwt_sd_jwt_release`. let me know if you wanted me to.\r\n",
      "createdAt": "2022-10-01T04:53:28Z",
      "updatedAt": "2022-10-19T07:52:41Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f7246909a942a1735a1b4835e6f309c7f57ffde4",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "disclosed-document",
      "headRefOid": "6d0eacbd7a0118b7bec8bc6828a194f9ce6ccedb",
      "closedAt": "2022-10-19T07:52:41Z",
      "mergedAt": "2022-10-19T07:52:41Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "d5a64f238ea1ceec5134e9a0b6620734958672cb"
      },
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Do we also want to update the names of the parameters/class/function names in the code?\r\nie `from_combined_sd_jwt_svc` -> `from_combined_sd_jwt_disclosure_document` and \r\n`create_sd_jwt_release` -> `create_sd_jwt_disclosure`\r\n",
          "createdAt": "2022-10-01T04:57:39Z",
          "updatedAt": "2022-10-01T05:06:14Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> Do we also want to update the names of the parameters/class/function names in the code? ie `from_combined_sd_jwt_svc` -> `from_combined_sd_jwt_disclosure_document` and `create_sd_jwt_release` -> `create_sd_jwt_disclosure`\r\n\r\nWe should rename those as well, because otherwise everybody will get confused otherwise and in a year we'll have to explain at every conference what \"SVC\" stands for in the code :-) ",
          "createdAt": "2022-10-04T12:47:35Z",
          "updatedAt": "2022-10-04T12:47:35Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> * I did not replace reference to `svc` in the example references like `#example-simple-combined_sd_jwt_svc` and `#example-simple-combined_sd_jwt_sd_jwt_release`. let me know if you wanted me to.\r\n\r\nMakes sense to replace those as well. As long as `_artifacts` in https://github.com/oauthstuff/draft-selective-disclosure-jwt/blob/master/sd_jwt/bin/sd_jwt#L173-L199 is changed accordingly, there should be no side effects.",
          "createdAt": "2022-10-04T12:48:59Z",
          "updatedAt": "2022-10-04T12:48:59Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "What about\r\n\r\n * Complete Disclosure Document for the thing sent by the Issuer,\r\n * Reduced Disclosure Document for the thing sent by the Holder?",
          "createdAt": "2022-10-13T15:35:53Z",
          "updatedAt": "2022-10-13T15:35:53Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "+1 to complete DD,\r\nMaybe Selectively Disclosed DD? (SDD)\r\nReduced sounds a little not in place",
          "createdAt": "2022-10-13T15:47:39Z",
          "updatedAt": "2022-10-13T15:47:39Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "full, partial...\r\nIssuer-issued Disclosures (IID) and holder-selected Disclosures (HSD)",
          "createdAt": "2022-10-13T16:23:19Z",
          "updatedAt": "2022-10-13T16:26:28Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "- I picked \"Issuer-Issued Disclosures object\" because Issuer-Issued Disclosures is plural while the text is much cleaner when the whole object in referred to in singular.\r\n- but \"A Issuer-Issued Disclosures object is a JSON object\" text sounds a little weird...",
          "createdAt": "2022-10-14T05:54:42Z",
          "updatedAt": "2022-10-14T06:14:29Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "ready for review @danielfett ",
          "createdAt": "2022-10-14T06:14:07Z",
          "updatedAt": "2022-10-14T06:14:07Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "- here too I picked \"Holder-Selected Disclosures JWT\" because Disclosures is plural while the text is much cleaner when the whole object in referred to in singular.\r\n- not sure what we will do if we go JSON object path for unsigned holder selected disclosures.. (to remove alg=none)",
          "createdAt": "2022-10-14T06:15:25Z",
          "updatedAt": "2022-10-14T06:15:25Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "lmk if not using abbreviations is significantly harder to read...\r\nIIDs and HSDs was a little alien to be rn",
          "createdAt": "2022-10-14T06:16:04Z",
          "updatedAt": "2022-10-14T06:16:04Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I see why using the abbreviation feels wrong, but at the moment, the text is quite verbose.",
          "createdAt": "2022-10-14T08:04:24Z",
          "updatedAt": "2022-10-14T08:04:24Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "should it be abbreviated to II-Disclosures and HS-Disclosures?",
          "createdAt": "2022-10-14T17:48:39Z",
          "updatedAt": "2022-10-14T17:48:39Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "try to use II-Disclosures object (singular) and II-Disclosures (plural); and HS-DIsclosures (plural) and HS-Disclosures JWT (singluar) depending on the context.",
          "createdAt": "2022-10-18T15:20:05Z",
          "updatedAt": "2022-10-18T15:20:05Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "also rename sd_digests to sd_ii_disclosures and sd_hs_disclosures",
          "createdAt": "2022-10-18T16:03:17Z",
          "updatedAt": "2022-10-18T16:03:17Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "I think you accidentally added demo/lib.py containing an old version of the demo code.",
          "createdAt": "2022-10-19T07:38:27Z",
          "updatedAt": "2022-10-19T07:38:27Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5DWE_t",
          "commit": {
            "abbreviatedOid": "bd6cde4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T12:44:51Z",
          "updatedAt": "2022-10-14T08:04:35Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "I think this might be misleading, as the Disclosure Document itself does not disclose anything. Disclosures List? Disclosure Container? Disclosure Map? Disclosure Transport Document? ",
              "createdAt": "2022-10-04T12:44:52Z",
              "updatedAt": "2022-10-14T08:04:35Z"
            },
            {
              "originalPosition": 42,
              "body": "Maybe just \"Disclosure-JWT\" might be a bit more brief. WDYT?",
              "createdAt": "2022-10-04T12:45:33Z",
              "updatedAt": "2022-10-14T08:04:35Z"
            },
            {
              "originalPosition": 45,
              "body": "```suggestion\r\n:  A JWT created by the holder that contains a subset of the disclosures in an Issuer-Issued Disclosures Object, potentially enriched by other data and signed by the Holder. \r\n```",
              "createdAt": "2022-10-14T07:59:43Z",
              "updatedAt": "2022-10-14T08:04:35Z"
            },
            {
              "originalPosition": 38,
              "body": "Shall we explain what a \"Disclosure\" is before this?\r\n\r\n\"Information suitable to disclose the cleartext claim value and potentially other information, such as a salt and a claim name, to a Verifier.\"",
              "createdAt": "2022-10-14T08:00:47Z",
              "updatedAt": "2022-10-14T08:04:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EHWuu",
          "commit": {
            "abbreviatedOid": "f168658"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-14T17:43:24Z",
          "updatedAt": "2022-10-14T17:43:24Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "I think you were looking at the old commit... this has been replaced with issuer-issued disclosures object",
              "createdAt": "2022-10-14T17:43:24Z",
              "updatedAt": "2022-10-14T17:43:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EHWz4",
          "commit": {
            "abbreviatedOid": "f168658"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-14T17:43:43Z",
          "updatedAt": "2022-10-14T17:43:43Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "I think you were looking at the old commit... this has been replaced with holder-selected disclosures-JWT..",
              "createdAt": "2022-10-14T17:43:43Z",
              "updatedAt": "2022-10-14T17:43:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EHW4L",
          "commit": {
            "abbreviatedOid": "bd6cde4"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-14T17:43:58Z",
          "updatedAt": "2022-10-14T17:43:58Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "I like the idea!",
              "createdAt": "2022-10-14T17:43:58Z",
              "updatedAt": "2022-10-14T17:43:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EW_TW",
          "commit": {
            "abbreviatedOid": "bd6cde4"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-19T05:43:27Z",
          "updatedAt": "2022-10-19T05:43:27Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "paraphrased to \r\n\r\nDisclosure\r\n: A combination of the cleartext claim value, the cleartext claim name, a salt and\r\n   optionally blinded claim name value that is used to calculate a digest for a certain claim.",
              "createdAt": "2022-10-19T05:43:27Z",
              "updatedAt": "2022-10-19T05:43:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EXADs",
          "commit": {
            "abbreviatedOid": "bd6cde4"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-19T05:47:39Z",
          "updatedAt": "2022-10-19T05:47:40Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "Holder-Selected Disclosures JWT (HS-Disclosures JWT)\r\n:  A JWT created by the Holder that contains the Disclosures from an Issuer-Issued Disclosures Object that the Holder is disclosing to the Verifier. In addition to the Disclosures, it can contain other properties and may be signed by the Holder.",
              "createdAt": "2022-10-19T05:47:39Z",
              "updatedAt": "2022-10-19T05:47:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EXeer",
          "commit": {
            "abbreviatedOid": "65da3c4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-19T07:39:50Z",
          "updatedAt": "2022-10-19T07:39:51Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nSD_II_CLAIMS_KEY = \"sd_ii_disclosures\"\r\nSD_HS_CLAIMS_KEY = \"sd_hs_disclosures\"\r\n```",
              "createdAt": "2022-10-19T07:39:50Z",
              "updatedAt": "2022-10-19T07:39:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EXiXb",
          "commit": {
            "abbreviatedOid": "6d0eacb"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-19T07:50:52Z",
          "updatedAt": "2022-10-19T07:50:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 149,
      "id": "PR_kwDOHTmVzM5AG2lX",
      "title": "clarified that HMAC is an option",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/149",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- added HMAC algorithm to supported `sd_hash_alg` identifiers\r\n- replaced `salt` with `random value` to enable random value being a cryptographic key",
      "createdAt": "2022-10-04T06:16:15Z",
      "updatedAt": "2022-10-19T17:58:21Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "e2307eea50efa4b0823763e99871794642636a1a",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "hash-func",
      "headRefOid": "07add7f8ba191cf12bb6215a3c8c1a6cff42d423",
      "closedAt": "2022-10-18T17:28:37Z",
      "mergedAt": "2022-10-18T17:28:37Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "f7246909a942a1735a1b4835e6f309c7f57ffde4"
      },
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "@danielfett ready from my side",
          "createdAt": "2022-10-11T05:42:09Z",
          "updatedAt": "2022-10-11T05:42:09Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Looks good, I just had a few nitpicks here and there. ",
          "createdAt": "2022-10-14T07:50:44Z",
          "updatedAt": "2022-10-14T07:50:44Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "- resolve conflicts,\r\n- change to sd_digest_derivation_alg\r\n- check if renders correctly...",
          "createdAt": "2022-10-18T15:15:17Z",
          "updatedAt": "2022-10-18T15:15:17Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Verbal approval from @danielfett ",
          "createdAt": "2022-10-18T17:28:30Z",
          "updatedAt": "2022-10-18T17:28:30Z"
        },
        {
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "body": "@Sakurann sorry for the late revision\r\n\r\nit seems that here we have merge conflicts exposed\r\nhttps://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/149/files#diff-ce646751295775c4b20fb384cedc0e3374a9c288cc7c93c345f227a422979f46R12",
          "createdAt": "2022-10-19T10:51:14Z",
          "updatedAt": "2022-10-19T10:51:14Z"
        },
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "thanks! yes, fixed them in a PR #148 that was merged",
          "createdAt": "2022-10-19T17:58:21Z",
          "updatedAt": "2022-10-19T17:58:21Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5DWBWv",
          "commit": {
            "abbreviatedOid": "b5914cd"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-10-04T12:34:44Z",
          "updatedAt": "2022-10-04T12:40:25Z",
          "comments": [
            {
              "originalPosition": 146,
              "body": "```suggestion\r\n### Digest Derivation Function Claim\r\n```",
              "createdAt": "2022-10-04T12:34:44Z",
              "updatedAt": "2022-10-04T12:40:25Z"
            },
            {
              "originalPosition": 209,
              "body": "```suggestion\r\n## Entropy and Uniqueness of the Random Value\r\n```",
              "createdAt": "2022-10-04T12:35:18Z",
              "updatedAt": "2022-10-04T12:40:25Z"
            },
            {
              "originalPosition": 218,
              "body": "The current wording (which was not introduced by this PR) implies that there must be a check that any two random values are different, but that is not what we want.\r\n\r\n```suggestion\r\nguess. A new random value MUST be chosen for each claim.\r\n```",
              "createdAt": "2022-10-04T12:37:46Z",
              "updatedAt": "2022-10-04T12:40:25Z"
            },
            {
              "originalPosition": 209,
              "body": "I wonder if it is clear what we mean with \"random value\" here. \"Salt\" was clear because it refers to a specific concept, \"random value\" seems more arbitrary and leaves room for interpretation. I wonder if we should keep \"salt\" in the text and just say that in the case of an HMAC, salt becomes the key.",
              "createdAt": "2022-10-04T12:39:52Z",
              "updatedAt": "2022-10-04T12:40:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DW6dS",
          "commit": {
            "abbreviatedOid": "b5914cd"
          },
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T14:34:32Z",
          "updatedAt": "2022-10-04T14:34:32Z",
          "comments": [
            {
              "originalPosition": 209,
              "body": "That sounds good to me. Indeed, \"salt\" gives the right intuition.",
              "createdAt": "2022-10-04T14:34:32Z",
              "updatedAt": "2022-10-04T14:34:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DXBPb",
          "commit": {
            "abbreviatedOid": "b5914cd"
          },
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "It would be nice to further generalize \"hash alg\" to \"digest derivation alg\", to allow more mechanisms which could make time/space security trade-offs. sha256 is a MUST implement (good!), but allow other profiles to define other choices. I'd like to be able to define (in a profile) e.g. PBKDF2-HMAC-SHA256-310000 with potentially smaller salt values.",
          "createdAt": "2022-10-04T14:46:17Z",
          "updatedAt": "2022-10-04T14:51:37Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "You are only giving two different choices here: hash or hmac. We might want to generalize and allow for more, to reach different security goals. For example, in my [prototype](https://github.com/christianpaquin/selective-disclosure), I define a Digest Derivation Function (DDF), and also offer PBKDF2-HMAC-SHA256-310000 which could be useful to optimize space in the SD-JWT (e.g., for encoding into a QR code).",
              "createdAt": "2022-10-04T14:46:17Z",
              "updatedAt": "2022-10-04T14:57:42Z"
            },
            {
              "originalPosition": 154,
              "body": "Might want to change the field name to `digest_derivation_alg` or something like that, since hmac (and potentially other mechanisms, as I proposed earler) isn't really a hash alg.",
              "createdAt": "2022-10-04T14:47:31Z",
              "updatedAt": "2022-10-04T14:51:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DXFIu",
          "commit": {
            "abbreviatedOid": "b5914cd"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T14:55:06Z",
          "updatedAt": "2022-10-04T14:55:06Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "Would `DDF(SALT, CLAIM-VALUE)` make sense as a notation?",
              "createdAt": "2022-10-04T14:55:06Z",
              "updatedAt": "2022-10-04T14:55:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DXFl7",
          "commit": {
            "abbreviatedOid": "b5914cd"
          },
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T14:56:09Z",
          "updatedAt": "2022-10-04T14:56:09Z",
          "comments": [
            {
              "originalPosition": 126,
              "body": "This could be dependent on the digest derivation function, so perhaps move that information to the hash mechanism choice section (128 bits is ok for sha256 and hmac-sha256, but you could choose a smaller one if you pick a stronger iterative derivation function)",
              "createdAt": "2022-10-04T14:56:09Z",
              "updatedAt": "2022-10-04T14:56:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DXGM5",
          "commit": {
            "abbreviatedOid": "b5914cd"
          },
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-04T14:57:32Z",
          "updatedAt": "2022-10-04T14:57:33Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "I think that works well.",
              "createdAt": "2022-10-04T14:57:32Z",
              "updatedAt": "2022-10-04T14:57:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Dejt7",
          "commit": {
            "abbreviatedOid": "b5914cd"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-05T21:44:39Z",
          "updatedAt": "2022-10-05T21:44:39Z",
          "comments": [
            {
              "originalPosition": 218,
              "body": "good catch. paraphrased reference to `unique` in the rest of the spec too.",
              "createdAt": "2022-10-05T21:44:39Z",
              "updatedAt": "2022-10-05T21:44:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Dej_n",
          "commit": {
            "abbreviatedOid": "b5914cd"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-05T21:46:02Z",
          "updatedAt": "2022-10-05T21:46:03Z",
          "comments": [
            {
              "originalPosition": 154,
              "body": "agreed. suggestion adopted.",
              "createdAt": "2022-10-05T21:46:02Z",
              "updatedAt": "2022-10-05T21:46:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DelS4",
          "commit": {
            "abbreviatedOid": "b5914cd"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-05T21:52:51Z",
          "updatedAt": "2022-10-05T21:52:51Z",
          "comments": [
            {
              "originalPosition": 126,
              "body": "moved to the security considerations section. and changed 128 bits to recommendation from the requirement (cc @danielfett )",
              "createdAt": "2022-10-05T21:52:51Z",
              "updatedAt": "2022-10-05T21:52:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DemU4",
          "commit": {
            "abbreviatedOid": "b5914cd"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-05T21:58:26Z",
          "updatedAt": "2022-10-05T21:58:27Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "changed:\r\n> `SD-CLAIMS` is an object with claim names mapped to the digests over the claim values with random salts calculated using digest derivation function such as hash function, HMAC, or other:\r\n\r\n```\r\nSD-CLAIMS = (\r\n    CLAIM-NAME: DIGEST-DERIVATION(SALT | CLAIM-VALUE)\r\n)\r\n```",
              "createdAt": "2022-10-05T21:58:26Z",
              "updatedAt": "2022-10-05T21:58:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DembF",
          "commit": {
            "abbreviatedOid": "b5914cd"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-05T21:58:58Z",
          "updatedAt": "2022-10-05T21:58:58Z",
          "comments": [
            {
              "originalPosition": 209,
              "body": "reverted to salt. \r\nneed to clarify, it can be key",
              "createdAt": "2022-10-05T21:58:58Z",
              "updatedAt": "2022-10-05T21:58:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DiCbN",
          "commit": {
            "abbreviatedOid": "b5914cd"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-06T13:22:53Z",
          "updatedAt": "2022-10-06T13:22:54Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "It should be `SALT, CLAIM-VALUE` as the `|` implies concatenation which would only be correct in the hash case.",
              "createdAt": "2022-10-06T13:22:54Z",
              "updatedAt": "2022-10-06T13:22:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Dwg-M",
          "commit": {
            "abbreviatedOid": "b5914cd"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-11T05:39:16Z",
          "updatedAt": "2022-10-11T05:39:16Z",
          "comments": [
            {
              "originalPosition": 126,
              "body": "elaborated further in the latest commit.",
              "createdAt": "2022-10-11T05:39:16Z",
              "updatedAt": "2022-10-11T05:39:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5DmEBe",
          "commit": {
            "abbreviatedOid": "8c379e2"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-10-07T07:44:43Z",
          "updatedAt": "2022-10-13T16:06:52Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\n    CLAIM-NAME: DIGEST-DERIVATION(SALT, CLAIM-VALUE)\r\n```",
              "createdAt": "2022-10-07T07:44:43Z",
              "updatedAt": "2022-10-13T16:06:52Z"
            },
            {
              "originalPosition": 24,
              "body": "```suggestion\r\nWhen an HMAC or another type of digest derivation function is used for digest derivation, a secret cryptographic key or other cryptographic secret is used instead of a salt value. The term \"salt\" is used throughout this document for brevity.\r\n```\r\n",
              "createdAt": "2022-10-13T14:30:53Z",
              "updatedAt": "2022-10-13T16:06:52Z"
            },
            {
              "originalPosition": 26,
              "body": "```suggestion\r\nThe claim name (`CLAIM-NAME`) is optional \r\n```",
              "createdAt": "2022-10-13T14:31:05Z",
              "updatedAt": "2022-10-13T16:06:52Z"
            },
            {
              "originalPosition": 65,
              "body": "```suggestion\r\nThe claim `digest_derivation_alg` indicates the digest derivation algorithm  \r\n```",
              "createdAt": "2022-10-13T14:32:43Z",
              "updatedAt": "2022-10-13T16:06:52Z"
            },
            {
              "originalPosition": 66,
              "body": "```suggestion\r\nused by the Issuer to generate the digests over the salts and the\r\n```",
              "createdAt": "2022-10-13T14:33:07Z",
              "updatedAt": "2022-10-13T16:06:52Z"
            },
            {
              "originalPosition": 80,
              "body": "This is not compatible with the \"MUST\" above.",
              "createdAt": "2022-10-13T14:33:42Z",
              "updatedAt": "2022-10-13T16:06:52Z"
            },
            {
              "originalPosition": 75,
              "body": "This and the next paragraph still talk about hash function where it should be digest derivation. ",
              "createdAt": "2022-10-13T14:36:49Z",
              "updatedAt": "2022-10-13T16:06:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EA_YC",
          "commit": {
            "abbreviatedOid": "8c379e2"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-13T16:10:00Z",
          "updatedAt": "2022-10-13T16:10:01Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "MUST be from a registry OR defined in a separate profile",
              "createdAt": "2022-10-13T16:10:00Z",
              "updatedAt": "2022-10-13T16:10:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EDuSZ",
          "commit": {
            "abbreviatedOid": "8c379e2"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-14T05:17:49Z",
          "updatedAt": "2022-10-14T05:17:49Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "wait, why is the claim name optional when claim name is not blinded? it is required. I would delete this sentence..",
              "createdAt": "2022-10-14T05:17:49Z",
              "updatedAt": "2022-10-14T05:17:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EDwDl",
          "commit": {
            "abbreviatedOid": "8c379e2"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-14T05:29:53Z",
          "updatedAt": "2022-10-14T05:29:53Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "I replaced \r\nhash -> digest;\r\nhash alg -> digest derivation alg",
              "createdAt": "2022-10-14T05:29:53Z",
              "updatedAt": "2022-10-14T05:29:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EEQSY",
          "commit": {
            "abbreviatedOid": "02cf5ea"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-10-14T07:41:21Z",
          "updatedAt": "2022-10-14T07:50:04Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "```suggestion\r\n`SD-CLAIMS` is an object with claim names (`CLAIM-NAME`) mapped to the digests over the claim values (`CLAIM-VALUE`) with random salts (`SALT`). Digests are calculated using a digest derivation function such as a hash function, HMAC, or other (`DIGEST-DERIVATION()`):\r\n```",
              "createdAt": "2022-10-14T07:41:21Z",
              "updatedAt": "2022-10-14T07:50:04Z"
            },
            {
              "originalPosition": 30,
              "body": "```suggestion\r\n)*\r\n```\r\nThe asterisk shows that there can be an arbitrary number of claims.",
              "createdAt": "2022-10-14T07:42:59Z",
              "updatedAt": "2022-10-14T07:50:04Z"
            },
            {
              "originalPosition": 123,
              "body": "I wonder if we want to call it `sd_digest_derivation_alg` instead.",
              "createdAt": "2022-10-14T07:44:29Z",
              "updatedAt": "2022-10-14T07:50:04Z"
            },
            {
              "originalPosition": 132,
              "body": "```suggestion\r\nThe property `sd_digests` MUST be used by the issuer to include digests of the salted claim values for any claim that is intended to be selectively disclosable.\r\n```\r\n* I was not sure what the point of the original sentence was.\r\n* My proposal leaves room for an empty `sd_digests` in corner-cases.",
              "createdAt": "2022-10-14T07:47:27Z",
              "updatedAt": "2022-10-14T07:50:04Z"
            },
            {
              "originalPosition": 192,
              "body": "I like this!",
              "createdAt": "2022-10-14T07:48:21Z",
              "updatedAt": "2022-10-14T07:50:04Z"
            },
            {
              "originalPosition": 192,
              "body": "Will this render correctly? An empty line might be required before the list.",
              "createdAt": "2022-10-14T07:49:17Z",
              "updatedAt": "2022-10-14T07:50:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EH1gr",
          "commit": {
            "abbreviatedOid": "02cf5ea"
          },
          "author": "christianpaquin",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-14T19:38:07Z",
          "updatedAt": "2022-10-14T19:47:45Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "A bit repetitive, how about \" or another type of derivation function is used for digest calculation,\"",
              "createdAt": "2022-10-14T19:38:07Z",
              "updatedAt": "2022-10-14T19:47:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ETwsu",
          "commit": {
            "abbreviatedOid": "72ce2d0"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-18T15:11:11Z",
          "updatedAt": "2022-10-18T15:11:11Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "```suggestion\r\nWhen an HMAC or another type of derivation function is used for digest calculation, a secret cryptographic key or other cryptographic secret is used instead of a salt value. \r\n```",
              "createdAt": "2022-10-18T15:11:11Z",
              "updatedAt": "2022-10-18T15:11:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5ETw8V",
          "commit": {
            "abbreviatedOid": "72ce2d0"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-18T15:11:43Z",
          "updatedAt": "2022-10-18T15:11:44Z",
          "comments": [
            {
              "originalPosition": 123,
              "body": "```suggestion\r\npayload of an SD-JWT MUST contain the `sd_digests` and `sd_digest_derivation_alg` claims\r\n```",
              "createdAt": "2022-10-18T15:11:43Z",
              "updatedAt": "2022-10-18T15:11:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EUkD8",
          "commit": {
            "abbreviatedOid": "02cf5ea"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-18T17:24:56Z",
          "updatedAt": "2022-10-18T17:24:56Z",
          "comments": [
            {
              "originalPosition": 192,
              "body": "rendered conrrectly",
              "createdAt": "2022-10-18T17:24:56Z",
              "updatedAt": "2022-10-18T17:24:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EUkGx",
          "commit": {
            "abbreviatedOid": "02cf5ea"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-18T17:25:04Z",
          "updatedAt": "2022-10-18T17:25:04Z",
          "comments": [
            {
              "originalPosition": 123,
              "body": "renamed",
              "createdAt": "2022-10-18T17:25:04Z",
              "updatedAt": "2022-10-18T17:25:04Z"
            }
          ]
        }
      ]
    },
    {
      "number": 150,
      "id": "PR_kwDOHTmVzM5AUGq6",
      "title": "Add OIDC reference again (was needed after all)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/150",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "It seems that I missed the one place where @OIDC was used in the document when removing the reference. This PR adds it back into the document.",
      "createdAt": "2022-10-06T13:38:30Z",
      "updatedAt": "2022-10-07T07:01:58Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "72e3b784e17f1e6882cb76ff137ac7212a721ff8",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/re-add-oidc-reference",
      "headRefOid": "b7fbd81a6ed800b93b64f91961c2798df8c17b61",
      "closedAt": "2022-10-07T07:01:58Z",
      "mergedAt": "2022-10-07T07:01:58Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "15d9dcd1e82bbd6f3add741a9c076cf272ba3ca4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5Dl01B",
          "commit": {
            "abbreviatedOid": "b7fbd81"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-07T07:01:53Z",
          "updatedAt": "2022-10-07T07:01:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 151,
      "id": "PR_kwDOHTmVzM5AwLGy",
      "title": "Remove HTML and XML files",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/151",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-13T16:37:16Z",
      "updatedAt": "2022-10-13T16:38:37Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "a9d4b52d25035018350b019c928d84a3be553486",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/remove-files",
      "headRefOid": "c9ef1625dc754de21af915986ba66f1b912d2db1",
      "closedAt": "2022-10-13T16:38:37Z",
      "mergedAt": "2022-10-13T16:38:37Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "eba2adc2283150c833ca4d3a1f30e9125a3917a7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5EBJ6G",
          "commit": {
            "abbreviatedOid": "c9ef162"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-13T16:38:13Z",
          "updatedAt": "2022-10-13T16:38:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 152,
      "id": "PR_kwDOHTmVzM5AyVEI",
      "title": "Danielfett/blinded claim names",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/152",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "merging changes in PR #146 into a master (PR #146 itself merged into blinded-claim-names branch)",
      "createdAt": "2022-10-14T04:49:52Z",
      "updatedAt": "2022-10-14T17:36:30Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f15539367b749090704c82ec7db6f6ac61d94025",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/blinded-claim-names",
      "headRefOid": "2b571d49243c377308298b34728aea044c4a52ab",
      "closedAt": "2022-10-14T17:36:30Z",
      "mergedAt": "2022-10-14T17:36:30Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "e2307eea50efa4b0823763e99871794642636a1a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5EEPmt",
          "commit": {
            "abbreviatedOid": "2b571d4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-14T07:39:44Z",
          "updatedAt": "2022-10-14T07:39:44Z",
          "comments": []
        }
      ]
    },
    {
      "number": 153,
      "id": "PR_kwDOHTmVzM5Ayit7",
      "title": "adding one more SD-JWT implementation",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/153",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-14T06:18:20Z",
      "updatedAt": "2022-10-14T07:56:29Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f15539367b749090704c82ec7db6f6ac61d94025",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "implementation",
      "headRefOid": "350b4b479e0bd50af2d750b05093bebb89de88e7",
      "closedAt": "2022-10-14T07:56:29Z",
      "mergedAt": "2022-10-14T07:56:29Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "30f6c3f71f2c9dc65d1f9144bf4cddfbaf076d1c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5EEVtT",
          "commit": {
            "abbreviatedOid": "350b4b4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-14T07:56:18Z",
          "updatedAt": "2022-10-14T07:56:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 154,
      "id": "PR_kwDOHTmVzM5A0jiR",
      "title": "fix: CI",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/154",
      "state": "CLOSED",
      "author": "peppelinux",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR fixes the CI that fails after the main file was renamed",
      "createdAt": "2022-10-14T14:18:07Z",
      "updatedAt": "2022-10-14T14:35:07Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "33ce829aa54317745dad13ba662f455ca1d78124",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "fix-ci",
      "headRefOid": "ef27c4f236f1414d8a47630f08933a18d4f20041",
      "closedAt": "2022-10-14T14:35:07Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Thank you, but I have fixed this in https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/152 already, which we'll merge soon.",
          "createdAt": "2022-10-14T14:21:17Z",
          "updatedAt": "2022-10-14T14:21:17Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 155,
      "id": "PR_kwDOHTmVzM5BGHQo",
      "title": "Review",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/155",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "- Modified introduction for better explanation of the terms used\r\n- Added references, both internal and external\r\n- Introduced \"Combined Format for Issuance/Presentation\" terms\r\n- Editorial changes",
      "createdAt": "2022-10-19T10:34:12Z",
      "updatedAt": "2022-10-24T20:03:25Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "d1a73fb489eb650073aac0882957b60609827c57",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/full-review",
      "headRefOid": "a7c51fe787702a6a314bace8f093f58c12688f3c",
      "closedAt": "2022-10-24T16:32:52Z",
      "mergedAt": "2022-10-24T16:32:52Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "c651a0581223cad4cd2e29ed7e62cbae4e0929a0"
      },
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Issues #47, #36, #37",
          "createdAt": "2022-10-24T20:00:24Z",
          "updatedAt": "2022-10-24T20:03:25Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5ErTBv",
          "commit": {
            "abbreviatedOid": "b5c9e61"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "still reviewing..",
          "createdAt": "2022-10-23T02:24:20Z",
          "updatedAt": "2022-10-23T07:10:45Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "```suggestion\r\nVerifier. However, when a signed JWT is intended to be multi-use, it needs to\r\n```",
              "createdAt": "2022-10-23T02:24:20Z",
              "updatedAt": "2022-10-23T07:10:45Z"
            },
            {
              "originalPosition": 22,
              "body": "all the terms defined in the terminology section should be capitalized I think.",
              "createdAt": "2022-10-23T02:25:05Z",
              "updatedAt": "2022-10-23T07:10:45Z"
            },
            {
              "originalPosition": 22,
              "body": "\"when a signed JWT is intended to be multi-use,\" which is a key assumption here seems pretty buried in a paragraph. I think we should make it clear that this feature becomes useful (only? mainly?) when \"a signed JWT is intended to be multi-use\". ",
              "createdAt": "2022-10-23T02:27:52Z",
              "updatedAt": "2022-10-23T07:10:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Evhfh",
          "commit": {
            "abbreviatedOid": "b5c9e61"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T15:04:50Z",
          "updatedAt": "2022-10-24T15:04:50Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Will fix.",
              "createdAt": "2022-10-24T15:04:50Z",
              "updatedAt": "2022-10-24T15:04:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EvfLV",
          "commit": {
            "abbreviatedOid": "35d464c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T14:59:16Z",
          "updatedAt": "2022-10-24T15:29:21Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "```suggestion\r\nthe Issuer also sends a JSON object that contains a mapping between\r\n```",
              "createdAt": "2022-10-24T14:59:16Z",
              "updatedAt": "2022-10-24T15:29:21Z"
            },
            {
              "originalPosition": 62,
              "body": "```suggestion\r\nHolder-Selected Disclosures (HS-Disclosures) and is transported in a JWT, the\r\n```",
              "createdAt": "2022-10-24T15:09:01Z",
              "updatedAt": "2022-10-24T15:29:21Z"
            },
            {
              "originalPosition": 52,
              "body": "```suggestion\r\nIn an issuer-issued SD-JWT, claim values are hidden, but cryptographically protected\r\n```",
              "createdAt": "2022-10-24T15:09:20Z",
              "updatedAt": "2022-10-24T15:29:21Z"
            },
            {
              "originalPosition": 66,
              "body": "```suggestion\r\nHS-Disclosures JWT, for presentation alongside the SD-JWT. The Verifier \r\ncan verify that all disclosed claim values were part of the original, \r\nissuer-signed SD-JWT. To do so, the Verifier is required to perform cryptographic computation to validate that the values in HS-Dislosures JWT match those in SD-JWT. \r\nThe Verifier will not learn any claim values not disclosed in HS-Disclosures.\r\n```\r\n\r\nwould be good to emphasize here that the Verifier absolutely MUST do a cryptographic computation before making sure that it can accept those disclosed claims.",
              "createdAt": "2022-10-24T15:15:25Z",
              "updatedAt": "2022-10-24T15:29:21Z"
            },
            {
              "originalPosition": 66,
              "body": "since that is being pointed out as the difference in security posture btw normal JWT and SD-JWT..",
              "createdAt": "2022-10-24T15:18:12Z",
              "updatedAt": "2022-10-24T15:29:21Z"
            },
            {
              "originalPosition": 76,
              "body": "```suggestion\r\nThis specification aims to be easy to implement and to leverage\r\n```",
              "createdAt": "2022-10-24T15:18:40Z",
              "updatedAt": "2022-10-24T15:29:21Z"
            },
            {
              "originalPosition": 78,
              "body": "```suggestion\r\nwherever possible.\r\n```",
              "createdAt": "2022-10-24T15:18:52Z",
              "updatedAt": "2022-10-24T15:29:21Z"
            },
            {
              "originalPosition": 52,
              "body": "should we use 'digests' in the introduction?",
              "createdAt": "2022-10-24T15:19:32Z",
              "updatedAt": "2022-10-24T15:29:21Z"
            },
            {
              "originalPosition": 625,
              "body": "```suggestion\r\nThe SD-JWT and the HS-Disclosures JWT can be combined into one document\r\nusing period character `.` as a separator. This means that the resulting string consists of\r\nsix dot-separated parts as described below.\r\n\r\n The last part (HSD Signature) may be empty when Holder Binding is not used and \r\n HS-Disclosures JWT is not signed.\r\n```",
              "createdAt": "2022-10-24T15:25:02Z",
              "updatedAt": "2022-10-24T15:29:21Z"
            },
            {
              "originalPosition": 614,
              "body": "```suggestion\r\nis not signed. \r\n\r\nWhether to check the signature of the HS-Disclosures JWT is up to the Verifier's policy,\r\nbased on the set of trust requirements such as trust frameworks it belongs to. \r\nAs described in (#verifier-verification), the Verifier MUST NOT accept HS-Disclosures \r\nJWTs using \"none\" algorithm, when the Verifier's policy requires a signed \r\nHS-Disclosures JWT. See also (#holder_binding_security).\r\n```",
              "createdAt": "2022-10-24T15:28:35Z",
              "updatedAt": "2022-10-24T15:29:21Z"
            },
            {
              "originalPosition": 614,
              "body": "Ideally, I would like this paragraph to be in a more easily finable section....",
              "createdAt": "2022-10-24T15:29:17Z",
              "updatedAt": "2022-10-24T15:29:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Evsm8",
          "commit": {
            "abbreviatedOid": "725099e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T15:31:26Z",
          "updatedAt": "2022-10-24T15:31:27Z",
          "comments": [
            {
              "originalPosition": 710,
              "body": "```suggestion\r\n 1. Determine if Holder Binding is to be checked according to the Verifier's policy\r\n    for the use case at hand. This decision MUST NOT be based on whether \r\n    the HS-Disclosures\r\n```",
              "createdAt": "2022-10-24T15:31:26Z",
              "updatedAt": "2022-10-24T15:31:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Evu39",
          "commit": {
            "abbreviatedOid": "725099e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T15:37:30Z",
          "updatedAt": "2022-10-24T15:37:30Z",
          "comments": [
            {
              "originalPosition": 820,
              "body": "```suggestion\r\ncan be informed by various factors including, but not limited to the following:\r\nbusiness requirements, the use case, the type of\r\n```",
              "createdAt": "2022-10-24T15:37:30Z",
              "updatedAt": "2022-10-24T15:37:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EvvWe",
          "commit": {
            "abbreviatedOid": "725099e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T15:38:46Z",
          "updatedAt": "2022-10-24T15:38:46Z",
          "comments": [
            {
              "originalPosition": 826,
              "body": "```suggestion\r\nThis can be showcased based on two scenarios for a mobile driver's license use case for SD-JWT:\r\n```",
              "createdAt": "2022-10-24T15:38:46Z",
              "updatedAt": "2022-10-24T15:39:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Evvpg",
          "commit": {
            "abbreviatedOid": "725099e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T15:39:30Z",
          "updatedAt": "2022-10-24T15:39:30Z",
          "comments": [
            {
              "originalPosition": 835,
              "body": "```suggestion\r\n**Scenario B:** A rental car agency may want to ensure, for insurance\r\n```",
              "createdAt": "2022-10-24T15:39:30Z",
              "updatedAt": "2022-10-24T15:39:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EvwHT",
          "commit": {
            "abbreviatedOid": "725099e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T15:40:39Z",
          "updatedAt": "2022-10-24T15:40:39Z",
          "comments": [
            {
              "originalPosition": 829,
              "body": "```suggestion\r\n**Scenario A:** For the verification of the driver's license when\r\nstopped by a police officer for exceeding a speed limit, Holder Binding may be necessary to ensure that the person\r\n```",
              "createdAt": "2022-10-24T15:40:39Z",
              "updatedAt": "2022-10-24T15:40:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Evw9X",
          "commit": {
            "abbreviatedOid": "725099e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T15:43:00Z",
          "updatedAt": "2022-10-24T15:43:01Z",
          "comments": [
            {
              "originalPosition": 1297,
              "body": "```suggestion\r\n```",
              "createdAt": "2022-10-24T15:43:01Z",
              "updatedAt": "2022-10-24T15:43:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EvxeQ",
          "commit": {
            "abbreviatedOid": "725099e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T15:44:24Z",
          "updatedAt": "2022-10-24T15:44:25Z",
          "comments": [
            {
              "originalPosition": 1308,
              "body": "```suggestion\r\n   *  Added descriptions on the security of Holder Binding -  expecially around the usage of \"alg=none\".\r\n```",
              "createdAt": "2022-10-24T15:44:24Z",
              "updatedAt": "2022-10-24T15:44:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EvxlZ",
          "commit": {
            "abbreviatedOid": "725099e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T15:44:42Z",
          "updatedAt": "2022-10-24T15:44:42Z",
          "comments": [
            {
              "originalPosition": 1316,
              "body": "```suggestion\r\n   *  Made Holder Binding optional\r\n   *  Renamed proof to release, since when there is no signature, the term \"proof\" can be misleading\r\n```",
              "createdAt": "2022-10-24T15:44:42Z",
              "updatedAt": "2022-10-24T15:44:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ev4Gp",
          "commit": {
            "abbreviatedOid": "b5c9e61"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T16:02:16Z",
          "updatedAt": "2022-10-24T16:02:16Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "I love the new language, thank you!",
              "createdAt": "2022-10-24T16:02:16Z",
              "updatedAt": "2022-10-24T16:02:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ev8qD",
          "commit": {
            "abbreviatedOid": "4da71a5"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T16:14:59Z",
          "updatedAt": "2022-10-24T16:15:03Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "```suggestion\r\ncan (and has to) verify that all disclosed claim values were part of the original,\r\n```",
              "createdAt": "2022-10-24T16:14:59Z",
              "updatedAt": "2022-10-24T16:15:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ev9k3",
          "commit": {
            "abbreviatedOid": "4da71a5"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T16:17:47Z",
          "updatedAt": "2022-10-24T16:17:48Z",
          "comments": [
            {
              "originalPosition": 1314,
              "body": "```suggestion\r\n   * improved description of Holder Binding security considerations - especially around the usage of \"alg=none\".\r\n```",
              "createdAt": "2022-10-24T16:17:48Z",
              "updatedAt": "2022-10-24T16:18:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ev-yY",
          "commit": {
            "abbreviatedOid": "35d464c"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T16:21:16Z",
          "updatedAt": "2022-10-24T16:21:16Z",
          "comments": [
            {
              "originalPosition": 66,
              "body": "`can and has to`..",
              "createdAt": "2022-10-24T16:21:16Z",
              "updatedAt": "2022-10-24T16:21:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ev-5r",
          "commit": {
            "abbreviatedOid": "5b2772d"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-24T16:21:38Z",
          "updatedAt": "2022-10-24T16:21:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 157,
      "id": "PR_kwDOHTmVzM5BHfX7",
      "title": "Clarify security requirements for blinded claim names",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/157",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Addresses Issue #132 ",
      "createdAt": "2022-10-19T14:57:33Z",
      "updatedAt": "2022-10-22T08:39:29Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "bda5b49534d8051a73ca2398264a74a741e10a86",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/blinded-claim-name-selection",
      "headRefOid": "44ae052b5c7976f14a2b86329ad00224b42e672c",
      "closedAt": "2022-10-22T08:39:29Z",
      "mergedAt": "2022-10-22T08:39:29Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "681712d91e555b6e263ed250fcd06312d3bff815"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "> Addresses Issue #132\r\n\r\nI also revisited the security recommendations for the salt and made some smaller changes there.",
          "createdAt": "2022-10-20T06:57:08Z",
          "updatedAt": "2022-10-20T06:57:08Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5EeYRo",
          "commit": {
            "abbreviatedOid": "9f2ef37"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-20T08:47:21Z",
          "updatedAt": "2022-10-20T08:47:22Z",
          "comments": [
            {
              "originalPosition": 121,
              "body": "```suggestion\r\nblinded claim name. For each credential issued, new random placeholder names\r\nMUST be chosen by the issuer.\r\n```",
              "createdAt": "2022-10-20T08:47:21Z",
              "updatedAt": "2022-10-20T08:47:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EpdgZ",
          "commit": {
            "abbreviatedOid": "8d91ba5"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-22T01:41:14Z",
          "updatedAt": "2022-10-22T01:41:14Z",
          "comments": [
            {
              "originalPosition": 86,
              "body": "```suggestion\r\nincluding when the same claim name occurs at different places in the\r\n```",
              "createdAt": "2022-10-22T01:41:14Z",
              "updatedAt": "2022-10-22T01:41:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EpdmZ",
          "commit": {
            "abbreviatedOid": "8d91ba5"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-22T01:44:34Z",
          "updatedAt": "2022-10-22T01:44:34Z",
          "comments": [
            {
              "originalPosition": 117,
              "body": "```suggestion\r\neach claim, including when the same claim name occurs at different\r\n```",
              "createdAt": "2022-10-22T01:44:34Z",
              "updatedAt": "2022-10-22T01:44:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EpeUA",
          "commit": {
            "abbreviatedOid": "8d91ba5"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I agree with these changes, but it really made me think that we need to clarify various options we have introduced how claims in SD-JWT can be represented as it is becoming a bit hard to follow..\r\n\r\nissue #159 filed",
          "createdAt": "2022-10-22T02:02:27Z",
          "updatedAt": "2022-10-22T02:02:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 158,
      "id": "PR_kwDOHTmVzM5BHruP",
      "title": "Ensure documents are alphabetically sorted when claim names are blinded",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/158",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "This was missing before, even though it is important for privacy.\r\n\r\nThis patch also ensures that *different* random numbers are used for the generation of each example. ",
      "createdAt": "2022-10-19T15:30:46Z",
      "updatedAt": "2022-10-24T16:37:30Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "c651a0581223cad4cd2e29ed7e62cbae4e0929a0",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/blinded-claim-names-sort-keys",
      "headRefOid": "ce2aefe5f3228560227597c44d46ca919eaa8804",
      "closedAt": "2022-10-24T16:37:30Z",
      "mergedAt": "2022-10-24T16:37:30Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "6c38e6fc4ed76d3d341d69f75b9c31e07869732a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5EpeWA",
          "commit": {
            "abbreviatedOid": "c4acee3"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-22T02:04:03Z",
          "updatedAt": "2022-10-22T02:04:04Z",
          "comments": [
            {
              "originalPosition": 134,
              "body": "```suggestion\r\nare shuffled or otherwise hidden, e.g., by alphabetically sorting using\r\n```",
              "createdAt": "2022-10-22T02:04:04Z",
              "updatedAt": "2022-10-22T02:04:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EpeWx",
          "commit": {
            "abbreviatedOid": "c4acee3"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-22T02:04:32Z",
          "updatedAt": "2022-10-22T02:04:32Z",
          "comments": [
            {
              "originalPosition": 134,
              "body": "do we want to say it is RECOMMENDED to alphabetically sort..?",
              "createdAt": "2022-10-22T02:04:32Z",
              "updatedAt": "2022-10-22T02:04:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EpeaN",
          "commit": {
            "abbreviatedOid": "c4acee3"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-22T02:06:39Z",
          "updatedAt": "2022-10-22T02:06:39Z",
          "comments": [
            {
              "originalPosition": 530,
              "body": "this claim should be after \"given_name\" if it is included in the alphabetical reordering too. If alphaberical reordering does not apply to blinded claim names, it should be clarified",
              "createdAt": "2022-10-22T02:06:39Z",
              "updatedAt": "2022-10-22T02:06:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EpebO",
          "commit": {
            "abbreviatedOid": "c4acee3"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-22T02:07:02Z",
          "updatedAt": "2022-10-22T02:07:02Z",
          "comments": [
            {
              "originalPosition": 557,
              "body": "```suggestion\r\nIn the II-Disclosures Object, it can be seen that the blinded claim's original name is `secret_club_membership_no`. Note that the claims are sorted alphabetically as described in (#blinding-claim-names).\r\n```",
              "createdAt": "2022-10-22T02:07:02Z",
              "updatedAt": "2022-10-22T02:07:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EpizS",
          "commit": {
            "abbreviatedOid": "c4acee3"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-22T02:20:30Z",
          "updatedAt": "2022-10-22T02:20:30Z",
          "comments": [
            {
              "originalPosition": 134,
              "body": "all claims, or only blinded claim names? if the former, this sentence should be in another section, if the latter, needs to be clarified.",
              "createdAt": "2022-10-22T02:20:30Z",
              "updatedAt": "2022-10-22T02:20:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Epi1t",
          "commit": {
            "abbreviatedOid": "c4acee3"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I am pretty confused alphabetical sorting of what you are trying to recommend - all claims, or only blinded claim names? there seems to be inconsistencies in spec text, code, and examples... but maybe I just did not fully understand it...",
          "createdAt": "2022-10-22T02:21:31Z",
          "updatedAt": "2022-10-22T02:21:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5EqFqq",
          "commit": {
            "abbreviatedOid": "c4acee3"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-22T08:43:24Z",
          "updatedAt": "2022-10-22T08:43:24Z",
          "comments": [
            {
              "originalPosition": 530,
              "body": "This is fine, as the uppercase letters in this case are ordered after the lower case ones. The precise method of alphabetical order does not matter for the purpose of hiding the original order.",
              "createdAt": "2022-10-22T08:43:24Z",
              "updatedAt": "2022-10-22T08:43:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EvcIj",
          "commit": {
            "abbreviatedOid": "c4acee3"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T14:52:14Z",
          "updatedAt": "2022-10-24T14:52:15Z",
          "comments": [
            {
              "originalPosition": 134,
              "body": "Added clarifications!",
              "createdAt": "2022-10-24T14:52:14Z",
              "updatedAt": "2022-10-24T14:52:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5EvcOn",
          "commit": {
            "abbreviatedOid": "c4acee3"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T14:52:26Z",
          "updatedAt": "2022-10-24T14:52:26Z",
          "comments": [
            {
              "originalPosition": 530,
              "body": "Added clarifications!",
              "createdAt": "2022-10-24T14:52:26Z",
              "updatedAt": "2022-10-24T14:52:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ev1-D",
          "commit": {
            "abbreviatedOid": "1431976"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T15:56:39Z",
          "updatedAt": "2022-10-24T15:56:40Z",
          "comments": [
            {
              "originalPosition": 181,
              "body": "```suggestion\r\n * randomize the order of all claims (blinded/unblinded, selectively disclosed/not-selectively disclosed),\r\n```",
              "createdAt": "2022-10-24T15:56:39Z",
              "updatedAt": "2022-10-24T15:56:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ev4ya",
          "commit": {
            "abbreviatedOid": "34099de"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-24T16:03:45Z",
          "updatedAt": "2022-10-24T16:03:45Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5Ev5GF",
          "commit": {
            "abbreviatedOid": "34099de"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-24T16:04:36Z",
          "updatedAt": "2022-10-24T16:04:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 160,
      "id": "PR_kwDOHTmVzM5BbGYm",
      "title": "Proposal for feature summary (Issue #159)",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/160",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-24T15:14:30Z",
      "updatedAt": "2022-10-24T16:08:20Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "681712d91e555b6e263ed250fcd06312d3bff815",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/feature-summary",
      "headRefOid": "39d8d8472f583c1fdef3f523faab09e37ced62d2",
      "closedAt": "2022-10-24T16:08:20Z",
      "mergedAt": "2022-10-24T16:08:20Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "d1a73fb489eb650073aac0882957b60609827c57"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5EvyNV",
          "commit": {
            "abbreviatedOid": "d0b0b91"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T15:46:19Z",
          "updatedAt": "2022-10-24T15:46:20Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n * This specification defines \r\n   - a format enabling selective disclosure for JWTs\r\n   - formats for associated data that enables disclosing claims\r\n   - formats for the combined transport of SD-JWTs and the associated data\r\n```",
              "createdAt": "2022-10-24T15:46:19Z",
              "updatedAt": "2022-10-24T15:47:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ev0uV",
          "commit": {
            "abbreviatedOid": "d0b0b91"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T15:53:11Z",
          "updatedAt": "2022-10-24T15:53:12Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\n * The specification supports selectively disclosable claims to be expressed \r\n    using flat data structures as well as more complex, nested data structures.\r\n  * This specification enables combining selectively disclosable claims with\r\n   clear-text claims that are always disclosed.\r\n  * Optionally, this specification allows to also hide (\"blind\") the claim names, not only the claim values.\r\n  * When claim names are blinded, this specification enables combining claims with \r\n     blinded and unblinded names in the same SD-JWT.\r\n\r\n```",
              "createdAt": "2022-10-24T15:53:11Z",
              "updatedAt": "2022-10-24T15:53:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ev5rY",
          "commit": {
            "abbreviatedOid": "6346536"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-24T16:06:16Z",
          "updatedAt": "2022-10-24T16:07:00Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n * This specification defines \r\n   - a format enabling selective disclosure for JWTs,\r\n   - formats for associated data that enables disclosing claims, and\r\n   - formats for the combined transport of SD-JWTs and the associated data.\r\n```",
              "createdAt": "2022-10-24T16:06:16Z",
              "updatedAt": "2022-10-24T16:07:00Z"
            },
            {
              "originalPosition": 11,
              "body": "```suggestion\r\n * The specification supports selectively disclosable claims in flat data structures as well as more complex, nested data structures.\r\n```",
              "createdAt": "2022-10-24T16:06:46Z",
              "updatedAt": "2022-10-24T16:07:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ev6KG",
          "commit": {
            "abbreviatedOid": "6346536"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-24T16:07:38Z",
          "updatedAt": "2022-10-24T16:07:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 161,
      "id": "PR_kwDOHTmVzM5Bbhh1",
      "title": "updated hashes for vc-data-model example",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/161",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-24T16:48:28Z",
      "updatedAt": "2022-10-24T16:53:38Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "0a06cd38f0a431c4c9c024174e99a2048dbbbf0e",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "vc-data-model",
      "headRefOid": "514aff4852489be74a6e976268ccf7372522e401",
      "closedAt": "2022-10-24T16:53:38Z",
      "mergedAt": "2022-10-24T16:53:38Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "fcabd4dd06f0af9b90ea98995dce9f73c9a60029"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5EwJ20",
          "commit": {
            "abbreviatedOid": "514aff4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-24T16:53:30Z",
          "updatedAt": "2022-10-24T16:53:30Z",
          "comments": []
        }
      ]
    },
    {
      "number": 162,
      "id": "PR_kwDOHTmVzM5BblfL",
      "title": "Vc data model",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/162",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-24T17:02:48Z",
      "updatedAt": "2022-10-24T17:03:28Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "fcabd4dd06f0af9b90ea98995dce9f73c9a60029",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "vc-data-model",
      "headRefOid": "4455d7d2feb7b4b6960bdaf8bb010649377cf09a",
      "closedAt": "2022-10-24T17:03:28Z",
      "mergedAt": "2022-10-24T17:03:28Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "e268f0a8f87e907179aaf0347ee43ea5d74a87fb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5EwNNE",
          "commit": {
            "abbreviatedOid": "4455d7d"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-24T17:03:13Z",
          "updatedAt": "2022-10-24T17:03:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 163,
      "id": "PR_kwDOHTmVzM5BcUDs",
      "title": "Formatting",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/163",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-24T19:58:56Z",
      "updatedAt": "2022-11-04T00:44:31Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "235283021f78860bdc2f488d7231edf96d589eb5",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "formatting",
      "headRefOid": "703378ee5ef473732a19ad5e28891cb90d99fa5d",
      "closedAt": "2022-11-04T00:44:31Z",
      "mergedAt": "2022-11-04T00:44:31Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "654d00b1fde3fcd3153815b6922f3a819b166c07"
      },
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "Issue #90",
          "createdAt": "2022-10-24T19:59:15Z",
          "updatedAt": "2022-10-24T19:59:15Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Also this doesn't compile due to trailing spaces.",
          "createdAt": "2022-11-03T16:09:33Z",
          "updatedAt": "2022-11-03T16:09:33Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5EzSIT",
          "commit": {
            "abbreviatedOid": "54f51a2"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-10-25T07:43:16Z",
          "updatedAt": "2022-10-25T07:44:23Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "This is not the proper formatting. The formatting we're currently using is correct in terms of markdown (see https://www.markdownguide.org/extended-syntax/#definition-lists) and it gets rendered correctly into the XML, but xml2rfc does not seem to do a good job at rendering it. We should look into that.",
              "createdAt": "2022-10-25T07:43:17Z",
              "updatedAt": "2022-10-25T07:44:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Ezc7m",
          "commit": {
            "abbreviatedOid": "54f51a2"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-25T08:13:19Z",
          "updatedAt": "2022-10-25T08:13:19Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "I checked again and it seems that others (e.g., RFC9000) also use definition lists, but add another colon after the term to be defined. ",
              "createdAt": "2022-10-25T08:13:19Z",
              "updatedAt": "2022-10-25T08:13:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5FQ2cm",
          "commit": {
            "abbreviatedOid": "54f51a2"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-31T15:07:44Z",
          "updatedAt": "2022-10-31T15:07:52Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "so what is the correct formatting..?",
              "createdAt": "2022-10-31T15:07:44Z",
              "updatedAt": "2022-10-31T15:07:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5FQ4Wb",
          "commit": {
            "abbreviatedOid": "54f51a2"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-31T15:11:26Z",
          "updatedAt": "2022-10-31T15:11:27Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "> Verifier:\r\n>:  An entity that requests, checks and extracts the claims from HS-Disclosures JWT.",
              "createdAt": "2022-10-31T15:11:26Z",
              "updatedAt": "2022-10-31T15:11:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5FiYNq",
          "commit": {
            "abbreviatedOid": "d0c96cf"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-11-03T10:34:45Z",
          "updatedAt": "2022-11-03T10:35:40Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nHolder. The strength of the Holder Binding is conditional upon the trust\r\nin the protection of the private key of the key pair an SD-JWT is bound to.\r\n```",
              "createdAt": "2022-11-03T10:34:45Z",
              "updatedAt": "2022-11-03T10:35:40Z"
            },
            {
              "originalPosition": 159,
              "body": "```suggestion\r\nThe following examples show variations of a structured SD-JWT.\r\n```",
              "createdAt": "2022-11-03T10:35:29Z",
              "updatedAt": "2022-11-03T10:35:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5FkuLR",
          "commit": {
            "abbreviatedOid": "927d41e"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-11-03T16:13:12Z",
          "updatedAt": "2022-11-03T16:13:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 164,
      "id": "PR_kwDOHTmVzM5Bd2fK",
      "title": "updated a linkability section based on the UL feedback",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/164",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Added an option to do pairwise SD-JWTs to prevent Verifier/Verifier linkability\r\n\r\nOriginal feedback.\r\n\r\n> The discussion of linkability in section 8.2 is incomplete. It actually gives the impression that linkability is unavoidable if this RFC is implemented, since for a solution it only refers to undefined \u2018advanced cryptographic schemes outside the scope of this specification\u2019. However, in reality an issuer can completely avoid linkability on the basis of unique values encoded in the SD-JWT, simply by ensuring that each SD-JWT can be used for only one transaction. Of course, this places stringent demands on the connectivity of the holder app and the capacity of the issuer\u2019s systems for generating and communicating new SD-JWTs to its holder apps. To lessen these burdens, the issuer could also choose other approaches, for example \r\n> - Equipping each holder app with a pool of (for instance) 20 different SD-JWTs. The app would then randomly pick one of these SD-JWTs for every transaction, and re-start the pool once all JWTs have been used. \r\n> - Allowing each SD-JWT to be used multiple times, but only for a limited time.\r\n> \r\n> The SD-JWT mechanism therefore allows every issuer to find the correct balance between holder linkability and mitigation costs and efforts, based on a risk analysis for their specific situation.\r\nPlease re-write section 8.2 in the light of the above suggestions.\r\n",
      "createdAt": "2022-10-25T04:13:33Z",
      "updatedAt": "2022-11-02T07:57:18Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "5a42e516719f00d73cdc37d2d1b9fa0882fd053c",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "linkability",
      "headRefOid": "7732baccc124be63c5ef29e5bf696bf0639e4687",
      "closedAt": "2022-11-02T07:57:18Z",
      "mergedAt": "2022-11-02T07:57:18Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "7f2ccb7c450affb5d3327e43c21672bb39308955"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5EzSsz",
          "commit": {
            "abbreviatedOid": "2198410"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-10-25T07:44:59Z",
          "updatedAt": "2022-10-25T07:45:42Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nTo prevent these types of linkability, various methods, including but not limited to the following ones can be used:\r\n\r\n- Use advanced cryptographic schemes, outside the scope of this specification.\r\n```",
              "createdAt": "2022-10-25T07:44:59Z",
              "updatedAt": "2022-10-25T07:45:42Z"
            },
            {
              "originalPosition": 14,
              "body": "```suggestion\r\n- Issue a batch of SD-JWTs to the Holder to enable the Holder to use a unique SD-JWT per Verifier. This only helps with Verifier/Verifier unlinkability.\r\n```",
              "createdAt": "2022-10-25T07:45:18Z",
              "updatedAt": "2022-10-25T07:45:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Faxi4",
          "commit": {
            "abbreviatedOid": "7732bac"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-11-02T07:57:09Z",
          "updatedAt": "2022-11-02T07:57:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 167,
      "id": "PR_kwDOHTmVzM5CGAMC",
      "title": "sd_hash_alg was renamed",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/167",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I know it's just the doc history but \"sd_digest_derivation_alg renamed to sd_digest_derivation_alg\" isn't a good look or helpful",
      "createdAt": "2022-11-02T21:57:28Z",
      "updatedAt": "2022-11-02T23:33:19Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "7f2ccb7c450affb5d3327e43c21672bb39308955",
      "headRepository": "bc-pi/oauth-selective-disclosure-jwt",
      "headRefName": "patch-1",
      "headRefOid": "28f26279c98b09c3bbbb2b996c4df3650dda5a0b",
      "closedAt": "2022-11-02T23:06:23Z",
      "mergedAt": "2022-11-02T23:06:23Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "235283021f78860bdc2f488d7231edf96d589eb5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5FgXFR",
          "commit": {
            "abbreviatedOid": "36fb858"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-02T23:05:49Z",
          "updatedAt": "2022-11-02T23:05:50Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n   * `sd_hash_alg` renamed to `sd_digest_derivation_alg`\r\n```",
              "createdAt": "2022-11-02T23:05:49Z",
              "updatedAt": "2022-11-02T23:05:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5FgXJP",
          "commit": {
            "abbreviatedOid": "28f2627"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-11-02T23:06:14Z",
          "updatedAt": "2022-11-02T23:06:14Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5FgbOz",
          "commit": {
            "abbreviatedOid": "36fb858"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-02T23:33:18Z",
          "updatedAt": "2022-11-02T23:33:19Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Can't believe I got the name wrong there... \ud83e\udd26",
              "createdAt": "2022-11-02T23:33:18Z",
              "updatedAt": "2022-11-02T23:33:19Z"
            }
          ]
        }
      ]
    },
    {
      "number": 168,
      "id": "PR_kwDOHTmVzM5CSE0C",
      "title": "validate how HS-disclosures JWT is validated",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/168",
      "state": "CLOSED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "resolves #166 by clarifying HS-disclosures JWT validation and separating it into a separate section",
      "createdAt": "2022-11-06T18:47:03Z",
      "updatedAt": "2022-11-22T16:51:18Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "654d00b1fde3fcd3153815b6922f3a819b166c07",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "brian-editorial",
      "headRefOid": "6353337c7a7bb4788c0909951d24950e05fffee5",
      "closedAt": "2022-11-22T16:51:18Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "superceded by IETF 115 and events",
          "createdAt": "2022-11-22T16:51:17Z",
          "updatedAt": "2022-11-22T16:51:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5FvK4m",
          "commit": {
            "abbreviatedOid": "6353337"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-07T08:45:35Z",
          "updatedAt": "2022-11-07T08:45:35Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Stepping back a bit, I don't think that mandating that the disclosures go in a JWT is necessary. And maybe not even really appropriate. I was hoping to discuss the general issue/idea during the meeting(s) this week. But it's leading to a lot of unnecessary confusion/complexity in these steps. So it's hard to review or comment without raising it. ",
              "createdAt": "2022-11-07T08:45:35Z",
              "updatedAt": "2022-11-07T08:45:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5FvLX0",
          "commit": {
            "abbreviatedOid": "6353337"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-07T08:47:02Z",
          "updatedAt": "2022-11-07T08:47:02Z",
          "comments": [
            {
              "originalPosition": 68,
              "body": "why/how is this going to work when there's no holder binding?",
              "createdAt": "2022-11-07T08:47:02Z",
              "updatedAt": "2022-11-07T08:47:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5FvLup",
          "commit": {
            "abbreviatedOid": "6353337"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-07T08:48:08Z",
          "updatedAt": "2022-11-07T08:48:09Z",
          "comments": [
            {
              "originalPosition": 69,
              "body": "this is really part of the SD-JWT validation and needs to happen regardless of holder binding or no holder binding ",
              "createdAt": "2022-11-07T08:48:08Z",
              "updatedAt": "2022-11-07T08:48:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5FvMjE",
          "commit": {
            "abbreviatedOid": "6353337"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-07T08:50:27Z",
          "updatedAt": "2022-11-07T08:50:28Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "Digest comparison should probably be using the binary. At least not mandating comparison of the encoded values as this kinda suggests. ",
              "createdAt": "2022-11-07T08:50:28Z",
              "updatedAt": "2022-11-07T08:50:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5FvNVN",
          "commit": {
            "abbreviatedOid": "6353337"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-07T08:52:24Z",
          "updatedAt": "2022-11-07T08:52:24Z",
          "comments": [
            {
              "originalPosition": 92,
              "body": "how does this work? the issuer would be the holder in this context. there likely isn't an iss ",
              "createdAt": "2022-11-07T08:52:24Z",
              "updatedAt": "2022-11-07T08:52:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5FvOde",
          "commit": {
            "abbreviatedOid": "6353337"
          },
          "author": "bc-pi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-07T08:55:36Z",
          "updatedAt": "2022-11-07T08:55:37Z",
          "comments": [
            {
              "originalPosition": 96,
              "body": "having one of the most fundamental parts of this whole SD JWT thing duplicated in consecutive sections is less than ideal ",
              "createdAt": "2022-11-07T08:55:37Z",
              "updatedAt": "2022-11-07T08:55:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5FwCHV",
          "commit": {
            "abbreviatedOid": "6353337"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-07T11:18:24Z",
          "updatedAt": "2022-11-07T11:18:38Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Something broke here.",
              "createdAt": "2022-11-07T11:18:24Z",
              "updatedAt": "2022-11-07T11:18:38Z"
            }
          ]
        }
      ]
    },
    {
      "number": 174,
      "id": "PR_kwDOHTmVzM5DWDvF",
      "title": "New SD-JWT Encoding",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/174",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "**Link to editor's copy:** https://drafts.oauth.net/oauth-selective-disclosure-jwt/danielfett/new-sd-jwt-encoding/draft-ietf-oauth-selective-disclosure-jwt.html\r\n\r\n   * Disclosures are now delivered not as a JWT but as separate base64url-encoded JSON objects.\r\n   * In the SD-JWT, hash digests are collected under a `_sd` claim per level.\r\n   * Terms \"II-Disclosures\" and \"HS-Disclosures\" are replaced with \"Disclosures\".\r\n   * Holder Binding is now separate from delivering the Disclosures and implemented, if required, with a separate JWT.\r\n   * Examples updated and modified to properly explain the specifics of the new SD-JWT format.\r\n   * Examples are now pulled in from the examples directory, not inlined.\r\n   * Updated and automated the W3C VC example.\r\n   * Added examples with multibyte characters to show that the specification and demo code work well with UTF-8.\r\n\r\n@Sakurann I updated the W3C example since I had to adapt it to the new format. Also made some updates together with @tlodderstedt, please check. \r\n\r\n@Sakurann I added an example with a Japanese address that was thankfully AI-generated by Github Copilot. I have no clue if it makes sense or not, please take a look!",
      "createdAt": "2022-11-21T10:48:16Z",
      "updatedAt": "2022-11-23T09:00:53Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "654d00b1fde3fcd3153815b6922f3a819b166c07",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/new-sd-jwt-encoding",
      "headRefOid": "800f48e1beb4c3a5f5efc8abff7c16fb9604dea3",
      "closedAt": "2022-11-23T09:00:53Z",
      "mergedAt": "2022-11-23T09:00:53Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "15710f2b14410dcabdc126b7f6f59e9b02eaf398"
      },
      "comments": [
        {
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "body": "I think updated SD-JWT-VC is clean and nice. we should probably clarify in the text that it is not \"compliant\" with vc-data-model v1.1 and is \"future-looking\" in the light of v2.0 conversations.\r\n\r\nthe Japanese address is legit and correct and is pretty close from where I lived. I suspect it is an address of a tokyo tower, but have not checked. tho \"(@\u65e5\u672c.com)\" looked weird so I changed to nihon.com?",
          "createdAt": "2022-11-22T19:35:17Z",
          "updatedAt": "2022-11-22T19:35:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5G5EFQ",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "tlodderstedt",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "The SD-JWT-VC example looks good to me.",
          "createdAt": "2022-11-22T05:41:20Z",
          "updatedAt": "2022-11-22T05:41:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5G5j9s",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T07:13:36Z",
          "updatedAt": "2022-11-22T08:37:00Z",
          "comments": [
            {
              "originalPosition": 121,
              "body": "```suggestion\r\n    HASH(SALT, CLAIM-NAME, CLAIM-VALUE)\r\n```\r\n\r\nI would revert this back to `HASH` or did you want this to be a separate PR?",
              "createdAt": "2022-11-22T07:13:36Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 145,
              "body": "Why is this not `COMBINED-ISSUANCE = SD-JWT | DISCLOSURES` ?\r\nseems inconsistent with Holder-Selected Disclosures...",
              "createdAt": "2022-11-22T07:15:43Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 173,
              "body": "```suggestion\r\nCryptographic Holder Binding is an optional feature, but when it is desired, `SD-JWT` must contain information about key material controlled by the Holder:\r\n```",
              "createdAt": "2022-11-22T07:32:49Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 56,
              "body": "```suggestion\r\nCryptographic Holder Binding:\r\n```\r\nto differentiate with Biometric/claim-based binding",
              "createdAt": "2022-11-22T07:33:18Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 225,
              "body": "```suggestion\r\nAt a high level, the Verifier\r\n```",
              "createdAt": "2022-11-22T07:38:25Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 232,
              "body": "```suggestion\r\n * verifies the Holder Binding JWT, if Holder Binding is required by the Verifier's policy, using the public key included in the SD-JWT,\r\n```",
              "createdAt": "2022-11-22T07:38:56Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 233,
              "body": "```suggestion\r\n * calculates the hashes over the Holder-Selected Disclosures and verifies that each hash is contained in the SD-JWT.\r\n```",
              "createdAt": "2022-11-22T07:39:34Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 225,
              "body": "Why is Verifier decoding the Disclosure and obtaining the plain text values out of scope here..?",
              "createdAt": "2022-11-22T07:40:55Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 267,
              "body": "is this a widely-used terminology? I am a little confused that the definition did not change but the term did?",
              "createdAt": "2022-11-22T07:42:35Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 246,
              "body": "let's discuss in another PR if we can move this section lower, as with the new encoding approach I anticipate less questions regarding canonicalization.",
              "createdAt": "2022-11-22T07:43:50Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 314,
              "body": "```suggestion\r\nspecification, JSON is used and plain text values of each Disclosure is encoded using base64url-encoding\r\n```",
              "createdAt": "2022-11-22T07:48:28Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 331,
              "body": "what is the differentiation between Varifier and application in this context?",
              "createdAt": "2022-11-22T07:50:40Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 357,
              "body": "```suggestion\r\nFor each claim that is to be selectively disclosed, the Issuer creates a Disclosure, hashes it, and includes the hash instead of the original claim in the SD-JWT, as described next. The Disclosures are then sent to the Holder.\r\n```\r\ndon't think we need to define \"DIsclosure object\"?",
              "createdAt": "2022-11-22T07:52:56Z",
              "updatedAt": "2022-11-22T18:56:57Z"
            },
            {
              "originalPosition": 363,
              "body": "```suggestion\r\nThe Issuer MUST create a Disclosure for each selectively disclosable claim as follows:\r\n```",
              "createdAt": "2022-11-22T07:57:28Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 368,
              "body": "I would emphasize the order in other places too...\r\n\r\njust curious, any logic for the order?",
              "createdAt": "2022-11-22T08:00:01Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 370,
              "body": "```suggestion\r\n   2. The claim name, or key, as it would be used in a regular JWT body. This MUST be a string.\r\n```\r\nnot sure what `as it would be used in a regular JWT body` means though to be honest..",
              "createdAt": "2022-11-22T08:01:00Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 371,
              "body": "```suggestion\r\n   3. The claim's value, as it would be used in a regular JWT body. The value MAY be of any type that is allowed in JSON, including numbers, strings, booleans, arrays, and objects.\r\n```",
              "createdAt": "2022-11-22T08:01:23Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 395,
              "body": "(I did not know the term umlaut...)",
              "createdAt": "2022-11-22T08:02:52Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 405,
              "body": "```suggestion\r\nIt is important to note that:\r\n```",
              "createdAt": "2022-11-22T08:04:40Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 414,
              "body": "I was also not familiar with a term decoy..",
              "createdAt": "2022-11-22T08:05:27Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 428,
              "body": "```suggestion\r\nIt is an Issuer who decides which claims are selectively disclosable and which are not. However, claims controlling the validity of the SD-JWT, such as `iss`, `exp`, or `nbf` are usually included in plaintext. End-User claims MAY be included as plaintext as well, e.g., if hiding the particular claims from the Verifier does not make sense in the intended use case.\r\n```",
              "createdAt": "2022-11-22T08:09:10Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 430,
              "body": "```suggestion\r\nClaims that are not selectively disclosed are included in the SD-JWT in plaintext just as they would be in any other JWT.\r\n```",
              "createdAt": "2022-11-22T08:09:44Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 432,
              "body": "```suggestion\r\nSelectively disclosable claims are omitted from the SD-JWT. Instead, the hash digests of the respective Disclosures and potentially decoy digests are contained as an array in a new JWT claim, `_sd`.\r\n```",
              "createdAt": "2022-11-22T08:10:22Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 434,
              "body": "definition of `_sd` claim can probably be defined clearer, but we can do it in another PR :)",
              "createdAt": "2022-11-22T08:11:49Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 435,
              "body": "when can an array be empty..?",
              "createdAt": "2022-11-22T08:12:57Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 437,
              "body": "```suggestion\r\nThe Issuer MUST hide the original order of the claims in the array. To ensure this, it is RECOMMENDED to shuffle the array of hashes, e.g., by sorting it alphanumerically or randomly. The precise method does not matter as long as it does not depend on the original order of elements.\r\n```\r\n\r\nwe should probably be precise since each disclosure also hashes over an array",
              "createdAt": "2022-11-22T08:13:41Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 441,
              "body": "```suggestion\r\n * the key `_sd` is already used for the purpose other than to contain the array of hash digests, or\r\n```",
              "createdAt": "2022-11-22T08:15:12Z",
              "updatedAt": "2022-11-22T19:08:26Z"
            },
            {
              "originalPosition": 442,
              "body": "why is this not ok..?",
              "createdAt": "2022-11-22T08:15:40Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 443,
              "body": "when would this be the case? same claim value? same salt? I though we are recommending against this? ",
              "createdAt": "2022-11-22T08:16:23Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 448,
              "body": "`objects that themselves contain other data` -> something like `key value pairs where the value is an object` or `where the claim value is expressed as an object` might be clearer, no?",
              "createdAt": "2022-11-22T08:20:25Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 446,
              "body": "why not \"structured data\" for consistency with the rest of the examples, etc?",
              "createdAt": "2022-11-22T08:21:44Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 790,
              "body": "I think we should explicitly call out Disclosures are individually sent, separated by tildas? this feels missing and I think it should come much earlier in the spec.",
              "createdAt": "2022-11-22T08:23:26Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 965,
              "body": "```suggestion\r\n    Holder MUST reject the SD-JWT.\r\n 4. Decode Disclosures and obtain plaintext of the claim values.\r\n```\r\nI think this should be made explicit?",
              "createdAt": "2022-11-22T08:26:08Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 976,
              "body": "maybe add a note that it is up to the holder how to maintain the mapping between the plaintext claim values and disclosures",
              "createdAt": "2022-11-22T08:26:51Z",
              "updatedAt": "2022-11-22T08:37:00Z"
            },
            {
              "originalPosition": 1054,
              "body": "why?",
              "createdAt": "2022-11-22T08:28:10Z",
              "updatedAt": "2022-11-22T08:37:01Z"
            },
            {
              "originalPosition": 1008,
              "body": "if these claims are selectively disclosed, would not be in this step, but don't know how relevant that is..",
              "createdAt": "2022-11-22T08:29:01Z",
              "updatedAt": "2022-11-22T08:37:01Z"
            },
            {
              "originalPosition": 1057,
              "body": "```suggestion\r\n    2. Find `_sd` key in the SD-JWT payload that contains a hash calculated in the previous step. Note that there might be more than one `_sd` arrays in on SD-JWT.\r\n```",
              "createdAt": "2022-11-22T08:30:53Z",
              "updatedAt": "2022-11-22T08:37:01Z"
            },
            {
              "originalPosition": 1063,
              "body": "what does this mean? I think we used to say the same claim name can be used in multiple places in one SD-JWT? like address?",
              "createdAt": "2022-11-22T08:32:00Z",
              "updatedAt": "2022-11-22T08:37:01Z"
            },
            {
              "originalPosition": 1064,
              "body": "I am confused..",
              "createdAt": "2022-11-22T08:32:21Z",
              "updatedAt": "2022-11-22T08:37:01Z"
            },
            {
              "originalPosition": 1065,
              "body": "```suggestion\r\n    5. Remove all `_sd` claims from the SD-JWT payload.\r\n```",
              "createdAt": "2022-11-22T08:32:39Z",
              "updatedAt": "2022-11-22T19:27:41Z"
            },
            {
              "originalPosition": 1066,
              "body": "why?",
              "createdAt": "2022-11-22T08:32:50Z",
              "updatedAt": "2022-11-22T08:37:01Z"
            },
            {
              "originalPosition": 1070,
              "body": "```suggestion\r\n       1. If Holder Binding JWT is not provided, the Verifier MUST reject the Presentation.\r\n```",
              "createdAt": "2022-11-22T08:33:17Z",
              "updatedAt": "2022-11-22T08:37:01Z"
            },
            {
              "originalPosition": 1071,
              "body": "A step that the public key signing the Holder Binding JWT must be included in the SD-JWT signed by the Issuer needs ot be added.",
              "createdAt": "2022-11-22T08:34:26Z",
              "updatedAt": "2022-11-22T08:37:01Z"
            },
            {
              "originalPosition": 1096,
              "body": "```suggestion\r\nis vulnerable to this attack. However, in a structured SD-JWT, without comparing the digests of the\r\n```",
              "createdAt": "2022-11-22T08:35:11Z",
              "updatedAt": "2022-11-22T08:37:01Z"
            },
            {
              "originalPosition": 1219,
              "body": "```suggestion\r\nalways blinded. This prevents an attacker from learning the names of the\r\n```",
              "createdAt": "2022-11-22T08:35:40Z",
              "updatedAt": "2022-11-22T08:37:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G6vUT",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:40:27Z",
          "updatedAt": "2022-11-22T10:40:27Z",
          "comments": [
            {
              "originalPosition": 121,
              "body": "Let's do that in a separate PR.",
              "createdAt": "2022-11-22T10:40:27Z",
              "updatedAt": "2022-11-22T10:40:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G6v2p",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:41:58Z",
          "updatedAt": "2022-11-22T10:42:13Z",
          "comments": [
            {
              "originalPosition": 145,
              "body": "Correct!\r\n```suggestion\r\nCOMBINED-ISSUANCE = SD-JWT | DISCLOSURES\r\n```",
              "createdAt": "2022-11-22T10:41:58Z",
              "updatedAt": "2022-11-22T10:42:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G6w5s",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:44:15Z",
          "updatedAt": "2022-11-22T10:44:16Z",
          "comments": [
            {
              "originalPosition": 233,
              "body": "What is calculated is still a hash digest, so\r\n```suggestion\r\n * calculates the hash digests over the Holder-Selected Disclosures and verifies that each digest is contained in the SD-JWT.\r\n```",
              "createdAt": "2022-11-22T10:44:15Z",
              "updatedAt": "2022-11-22T10:44:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G6xA7",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:44:34Z",
          "updatedAt": "2022-11-22T10:44:34Z",
          "comments": [
            {
              "originalPosition": 246,
              "body": "Agree!",
              "createdAt": "2022-11-22T10:44:34Z",
              "updatedAt": "2022-11-22T10:44:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G6xM-",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:45:06Z",
          "updatedAt": "2022-11-22T10:45:06Z",
          "comments": [
            {
              "originalPosition": 267,
              "body": "I think it is. It was also used at IETF. But I'm open for other suggestions.",
              "createdAt": "2022-11-22T10:45:06Z",
              "updatedAt": "2022-11-22T10:45:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G6xsh",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:46:29Z",
          "updatedAt": "2022-11-22T10:46:29Z",
          "comments": [
            {
              "originalPosition": 331,
              "body": "Verifier (in a stricter sense than defined above): The component implementing SD-JWT. Application: Whatever component works with the data checked by the verifier.",
              "createdAt": "2022-11-22T10:46:29Z",
              "updatedAt": "2022-11-22T10:46:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G6x9j",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:47:12Z",
          "updatedAt": "2022-11-22T10:47:12Z",
          "comments": [
            {
              "originalPosition": 357,
              "body": "Agree, but we still need to introduce the Disclosure term here.",
              "createdAt": "2022-11-22T10:47:12Z",
              "updatedAt": "2022-11-22T10:47:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G6zKB",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:50:25Z",
          "updatedAt": "2022-11-22T10:50:25Z",
          "comments": [
            {
              "originalPosition": 368,
              "body": "At which other places? \r\n\r\nI don't have a strong opinion on the order, but my logic is that the value should come last, as it can be a large object. So having the salt (constant length) and claim name (roughly same length all the time) first makes it easier to read the disclosures, should that be necessary.",
              "createdAt": "2022-11-22T10:50:25Z",
              "updatedAt": "2022-11-22T10:50:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G6zjk",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:51:30Z",
          "updatedAt": "2022-11-22T10:51:31Z",
          "comments": [
            {
              "originalPosition": 370,
              "body": "I just want to say that it is used just as in a Non-SD JWT (no transformation or the likes).",
              "createdAt": "2022-11-22T10:51:30Z",
              "updatedAt": "2022-11-22T10:51:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G60Aw",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:52:47Z",
          "updatedAt": "2022-11-22T10:52:47Z",
          "comments": [
            {
              "originalPosition": 395,
              "body": "We can replace it with \"letter with crazy german-looking dots on top\"? ;-) ",
              "createdAt": "2022-11-22T10:52:47Z",
              "updatedAt": "2022-11-22T10:52:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G60Vi",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:53:35Z",
          "updatedAt": "2022-11-22T10:53:35Z",
          "comments": [
            {
              "originalPosition": 414,
              "body": "It's a bit of a military term, but I hope it captures the spirit just fine.",
              "createdAt": "2022-11-22T10:53:35Z",
              "updatedAt": "2022-11-22T10:53:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G61Rk",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:55:07Z",
          "updatedAt": "2022-11-22T10:55:07Z",
          "comments": [
            {
              "originalPosition": 428,
              "body": "```suggestion\r\nIt is the Issuer who decides which claims are selectively disclosable and which are not. However, claims controlling the validity of the SD-JWT, such as `iss`, `exp`, or `nbf` are usually included in plaintext. End-User claims MAY be included as plaintext as well, e.g., if hiding the particular claims from the Verifier does not make sense in the intended use case.\r\n```",
              "createdAt": "2022-11-22T10:55:07Z",
              "updatedAt": "2022-11-22T10:55:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G61yS",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:56:19Z",
          "updatedAt": "2022-11-22T10:56:19Z",
          "comments": [
            {
              "originalPosition": 430,
              "body": "```suggestion\r\nClaims that are not selectively disclosable are included in the SD-JWT in plaintext just as they would be in any other JWT.\r\n```",
              "createdAt": "2022-11-22T10:56:19Z",
              "updatedAt": "2022-11-22T10:56:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G62bF",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:58:03Z",
          "updatedAt": "2022-11-22T10:58:03Z",
          "comments": [
            {
              "originalPosition": 435,
              "body": "Depending on the implementation of the Issuer, it might be convenient to just add `_sd` everywhere and leave it empty when it turns out that there's nothing to selectively disclose.",
              "createdAt": "2022-11-22T10:58:03Z",
              "updatedAt": "2022-11-22T10:58:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G62k-",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:58:29Z",
          "updatedAt": "2022-11-22T10:58:29Z",
          "comments": [
            {
              "originalPosition": 437,
              "body": "Good point!",
              "createdAt": "2022-11-22T10:58:29Z",
              "updatedAt": "2022-11-22T10:58:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G628J",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T10:59:27Z",
          "updatedAt": "2022-11-22T10:59:27Z",
          "comments": [
            {
              "originalPosition": 441,
              "body": "What is the intention here?",
              "createdAt": "2022-11-22T10:59:27Z",
              "updatedAt": "2022-11-22T10:59:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G63ar",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T11:00:40Z",
          "updatedAt": "2022-11-22T11:00:40Z",
          "comments": [
            {
              "originalPosition": 442,
              "body": "It's a bit of an undefined area currently how to treat this situation. Should the Verifier handle nested _sd claims like normal ones or ignore them?",
              "createdAt": "2022-11-22T11:00:40Z",
              "updatedAt": "2022-11-22T11:00:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G6378",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T11:02:06Z",
          "updatedAt": "2022-11-22T11:02:06Z",
          "comments": [
            {
              "originalPosition": 443,
              "body": "Since the same salt should not happen, it might be an error of the Issuer or intentional misbehavior. It is ruled out here and enforced by the Verifier.",
              "createdAt": "2022-11-22T11:02:06Z",
              "updatedAt": "2022-11-22T11:02:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G64Gb",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T11:02:33Z",
          "updatedAt": "2022-11-22T11:02:34Z",
          "comments": [
            {
              "originalPosition": 446,
              "body": "I'm actually not sure if 'structured' is the best term. Nested is potentially more clear.",
              "createdAt": "2022-11-22T11:02:33Z",
              "updatedAt": "2022-11-22T11:02:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G64Or",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T11:02:55Z",
          "updatedAt": "2022-11-22T11:02:56Z",
          "comments": [
            {
              "originalPosition": 448,
              "body": "Agree.",
              "createdAt": "2022-11-22T11:02:55Z",
              "updatedAt": "2022-11-22T11:02:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G64pk",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T11:04:01Z",
          "updatedAt": "2022-11-22T11:04:01Z",
          "comments": [
            {
              "originalPosition": 790,
              "body": "This is first described in the Combined Format for Issuance.",
              "createdAt": "2022-11-22T11:04:01Z",
              "updatedAt": "2022-11-22T11:04:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G65i8",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T11:06:31Z",
          "updatedAt": "2022-11-22T11:06:32Z",
          "comments": [
            {
              "originalPosition": 1054,
              "body": "I wasn't sure if we need to make this explicit, but the next steps are most easily described by saying how the JWT needs to be \"modified\". If we don't say that you can do this on a copy, people might complain when they have the JWT in a data structure that cannot be modified.",
              "createdAt": "2022-11-22T11:06:31Z",
              "updatedAt": "2022-11-22T11:06:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G66D1",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T11:07:54Z",
          "updatedAt": "2022-11-22T11:07:55Z",
          "comments": [
            {
              "originalPosition": 1063,
              "body": "It can, but it must not already exist at the same level. Note that in this version of the draft there's no merging defined (as it is not strictly needed).",
              "createdAt": "2022-11-22T11:07:54Z",
              "updatedAt": "2022-11-22T11:07:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G66QU",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T11:08:27Z",
          "updatedAt": "2022-11-22T11:08:28Z",
          "comments": [
            {
              "originalPosition": 1064,
              "body": "As above - prevents an undefined situation. Note that this refers to the disclosed claim value.",
              "createdAt": "2022-11-22T11:08:27Z",
              "updatedAt": "2022-11-22T11:08:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G66Yl",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T11:08:46Z",
          "updatedAt": "2022-11-22T11:08:47Z",
          "comments": [
            {
              "originalPosition": 1065,
              "body": "No, the above process does not remove any claims.",
              "createdAt": "2022-11-22T11:08:46Z",
              "updatedAt": "2022-11-22T11:08:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G66hN",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T11:09:05Z",
          "updatedAt": "2022-11-22T11:09:05Z",
          "comments": [
            {
              "originalPosition": 1066,
              "body": "Should not be a concern of the consuming application.",
              "createdAt": "2022-11-22T11:09:05Z",
              "updatedAt": "2022-11-22T11:09:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G66wj",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T11:09:45Z",
          "updatedAt": "2022-11-22T11:09:45Z",
          "comments": [
            {
              "originalPosition": 1071,
              "body": "```suggestion\r\n       2. Determine the public key for the Holder from the SD-JWT.\r\n```",
              "createdAt": "2022-11-22T11:09:45Z",
              "updatedAt": "2022-11-22T11:09:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G9P0I",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T16:56:06Z",
          "updatedAt": "2022-11-22T16:56:06Z",
          "comments": [
            {
              "originalPosition": 441,
              "body": "just to clarify",
              "createdAt": "2022-11-22T16:56:06Z",
              "updatedAt": "2022-11-22T16:56:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G9T0l",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T17:06:37Z",
          "updatedAt": "2022-11-22T17:06:37Z",
          "comments": [
            {
              "originalPosition": 790,
              "body": "add a text somewhere above saying that how to send will be described later in the text (ie in this section)",
              "createdAt": "2022-11-22T17:06:37Z",
              "updatedAt": "2022-11-22T17:06:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G9Utv",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T17:09:01Z",
          "updatedAt": "2022-11-22T17:09:02Z",
          "comments": [
            {
              "originalPosition": 976,
              "body": "line in 652",
              "createdAt": "2022-11-22T17:09:01Z",
              "updatedAt": "2022-11-22T17:09:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G93iU",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T18:52:30Z",
          "updatedAt": "2022-11-22T18:52:30Z",
          "comments": [
            {
              "originalPosition": 246,
              "body": "Issuer #175 ",
              "createdAt": "2022-11-22T18:52:30Z",
              "updatedAt": "2022-11-22T18:52:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G930g",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T18:53:31Z",
          "updatedAt": "2022-11-22T18:53:32Z",
          "comments": [
            {
              "originalPosition": 267,
              "body": "Issue #176",
              "createdAt": "2022-11-22T18:53:31Z",
              "updatedAt": "2022-11-22T18:53:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G94ai",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T18:55:34Z",
          "updatedAt": "2022-11-22T18:55:34Z",
          "comments": [
            {
              "originalPosition": 334,
              "body": "```suggestion\r\nan application that needs to access the disclosed claim values after the verification by the Verifier. The\r\n```",
              "createdAt": "2022-11-22T18:55:34Z",
              "updatedAt": "2022-11-22T18:55:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G94kK",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T18:56:04Z",
          "updatedAt": "2022-11-22T18:56:05Z",
          "comments": [
            {
              "originalPosition": 331,
              "body": "makes sense - clarified.",
              "createdAt": "2022-11-22T18:56:05Z",
              "updatedAt": "2022-11-22T18:56:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G947F",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T18:57:18Z",
          "updatedAt": "2022-11-22T18:57:18Z",
          "comments": [
            {
              "originalPosition": 357,
              "body": "changed disclosure object to disclosure, should be clear enough.",
              "createdAt": "2022-11-22T18:57:18Z",
              "updatedAt": "2022-11-22T18:57:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G96Zz",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:02:30Z",
          "updatedAt": "2022-11-22T19:02:30Z",
          "comments": [
            {
              "originalPosition": 377,
              "body": "```suggestion\r\n\r\nThe order is decided based on the readability considerations: salts would have a constant length within the SD-JWT, claim names would be around the same length all the time, and claim values would vary in size, potentially being large objects.\r\n\r\n```",
              "createdAt": "2022-11-22T19:02:30Z",
              "updatedAt": "2022-11-22T19:02:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G964s",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:04:12Z",
          "updatedAt": "2022-11-22T19:04:12Z",
          "comments": [
            {
              "originalPosition": 395,
              "body": "```suggestion\r\n * A different way to encode the umlaut (two dots `\u00a8` placed over the letter): `WyI2cU1RdlJMNWhhaiIsICJmYW1pbHlfbmFtZSIsICJNXHUwMGY2Yml1cyJd`\r\n```",
              "createdAt": "2022-11-22T19:04:12Z",
              "updatedAt": "2022-11-22T19:04:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G978C",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:07:56Z",
          "updatedAt": "2022-11-22T19:07:57Z",
          "comments": [
            {
              "originalPosition": 435,
              "body": "```suggestion\r\nThe array MAY be empty in case the Issuer decided not to selectively disclose any of the claims at that level. However, it is RECOMMENDED to omit `_sd` claim in this case to save space.\r\n```",
              "createdAt": "2022-11-22T19:07:57Z",
              "updatedAt": "2022-11-22T19:07:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G98ns",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:10:30Z",
          "updatedAt": "2022-11-22T19:10:31Z",
          "comments": [
            {
              "originalPosition": 442,
              "body": "```suggestion\r\n * plaintext claim value is an object that contains the `_sd` claim array, or\r\n```",
              "createdAt": "2022-11-22T19:10:31Z",
              "updatedAt": "2022-11-22T19:10:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G98y4",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:11:08Z",
          "updatedAt": "2022-11-22T19:11:09Z",
          "comments": [
            {
              "originalPosition": 443,
              "body": "```suggestion\r\n * the same Disclosure value appears more than once (in the same array or in different arrays).\r\n```",
              "createdAt": "2022-11-22T19:11:08Z",
              "updatedAt": "2022-11-22T19:11:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G99Jz",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:12:28Z",
          "updatedAt": "2022-11-22T19:12:28Z",
          "comments": [
            {
              "originalPosition": 446,
              "body": "`+ 1 to nested. #177",
              "createdAt": "2022-11-22T19:12:28Z",
              "updatedAt": "2022-11-22T19:12:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G99bm",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:13:28Z",
          "updatedAt": "2022-11-22T19:13:29Z",
          "comments": [
            {
              "originalPosition": 448,
              "body": "```suggestion\r\nJust like any JWT, an SD-JWT MAY contain key value pairs where the value is an object. For any object in an SD-JWT, the Issuer MAY decide to either make the entire object selectively disclosable or to make its properties selectively disclosable individually. In the latter case, the Issuer MAY even choose to make some some of the object's properties selectively disclosable and others not.\r\n```",
              "createdAt": "2022-11-22T19:13:28Z",
              "updatedAt": "2022-11-22T19:13:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G999j",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:15:24Z",
          "updatedAt": "2022-11-22T19:15:25Z",
          "comments": [
            {
              "originalPosition": 790,
              "body": "#178",
              "createdAt": "2022-11-22T19:15:24Z",
              "updatedAt": "2022-11-22T19:15:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G9-aS",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:17:02Z",
          "updatedAt": "2022-11-22T19:17:03Z",
          "comments": [
            {
              "originalPosition": 970,
              "body": "```suggestion\r\n\r\nIt is up to the Holder how to maintain the mapping between the Disclosures and the plaintext claim values to be able to display them to the End-User when needed.\r\n\r\n```",
              "createdAt": "2022-11-22T19:17:02Z",
              "updatedAt": "2022-11-22T19:17:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G9-kE",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:17:36Z",
          "updatedAt": "2022-11-22T19:17:37Z",
          "comments": [
            {
              "originalPosition": 1008,
              "body": "```suggestion\r\n    4. Check that the SD-JWT is valid using `nbf`, `iat`, and `exp` claims, if provided in the SD-JWT, and not selectively disclosed.\r\n```",
              "createdAt": "2022-11-22T19:17:36Z",
              "updatedAt": "2022-11-22T19:17:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G9-8t",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:19:06Z",
          "updatedAt": "2022-11-22T19:19:07Z",
          "comments": [
            {
              "originalPosition": 1054,
              "body": "```suggestion\r\n 4. Create a copy of the SD-JWT payload, if required for further processing.\r\n```",
              "createdAt": "2022-11-22T19:19:06Z",
              "updatedAt": "2022-11-22T19:19:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G9_SR",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:20:21Z",
          "updatedAt": "2022-11-22T19:20:21Z",
          "comments": [
            {
              "originalPosition": 1063,
              "body": "```suggestion\r\n          2. If the claim name already exists at the same level, the Verifier MUST reject the Presentation. Note that this also means that if a Holder sends the same Disclosure multiple times, the Verifier MUST reject the Presentation.\r\n```",
              "createdAt": "2022-11-22T19:20:21Z",
              "updatedAt": "2022-11-22T19:20:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G-A6A",
          "commit": {
            "abbreviatedOid": "e50f520"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:26:20Z",
          "updatedAt": "2022-11-22T19:26:20Z",
          "comments": [
            {
              "originalPosition": 1064,
              "body": "```suggestion\r\n          3. If the claim value is an object and contains an `_sd` key with an array, the Verifier MUST reject the Presentation.\r\n```",
              "createdAt": "2022-11-22T19:26:20Z",
              "updatedAt": "2022-11-22T19:26:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G-CAc",
          "commit": {
            "abbreviatedOid": "56ba38a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:30:19Z",
          "updatedAt": "2022-11-22T19:30:20Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\n  \"email\": \"\\\"unusual email address\\\"@nihon.com\",\r\n```",
              "createdAt": "2022-11-22T19:30:20Z",
              "updatedAt": "2022-11-22T19:30:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G-CFu",
          "commit": {
            "abbreviatedOid": "56ba38a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:30:38Z",
          "updatedAt": "2022-11-22T19:30:39Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n  \"email\": \"\\\"unusual email address\\\"@nihon.com\",\r\n```",
              "createdAt": "2022-11-22T19:30:38Z",
              "updatedAt": "2022-11-22T19:30:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G-CKa",
          "commit": {
            "abbreviatedOid": "56ba38a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:30:56Z",
          "updatedAt": "2022-11-22T19:30:56Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n  \"phone_number\": \"08012345678\",\r\n```",
              "createdAt": "2022-11-22T19:30:56Z",
              "updatedAt": "2022-11-22T19:30:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G-COG",
          "commit": {
            "abbreviatedOid": "56ba38a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:31:09Z",
          "updatedAt": "2022-11-22T19:31:10Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\n  \"email\": \"\\\"unusual email address\\\"@nihon.com\",\r\n```",
              "createdAt": "2022-11-22T19:31:10Z",
              "updatedAt": "2022-11-22T19:31:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G-CUQ",
          "commit": {
            "abbreviatedOid": "56ba38a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:31:30Z",
          "updatedAt": "2022-11-22T19:31:30Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\n    \"email\": \"\\\"unusual email address\\\"@nihon.com\",\r\n```",
              "createdAt": "2022-11-22T19:31:30Z",
              "updatedAt": "2022-11-22T19:31:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G-CYc",
          "commit": {
            "abbreviatedOid": "56ba38a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:31:45Z",
          "updatedAt": "2022-11-22T19:31:45Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n    \"email\": \"\\\"unusual email address\\\"@nihon.com\",\r\n```",
              "createdAt": "2022-11-22T19:31:45Z",
              "updatedAt": "2022-11-22T19:31:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G-CcZ",
          "commit": {
            "abbreviatedOid": "56ba38a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-22T19:31:58Z",
          "updatedAt": "2022-11-22T19:31:59Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n  \"email\": \"\\\"unusual email address\\\"@nihon.com\",\r\n```",
              "createdAt": "2022-11-22T19:31:58Z",
              "updatedAt": "2022-11-22T19:31:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G_7jt",
          "commit": {
            "abbreviatedOid": "566f795"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-23T07:42:01Z",
          "updatedAt": "2022-11-23T07:42:01Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Can we replace it with another domain with multibyte characters? \u65e5\u672c.example.com?",
              "createdAt": "2022-11-23T07:42:01Z",
              "updatedAt": "2022-11-23T07:42:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5G_8EU",
          "commit": {
            "abbreviatedOid": "36189a0"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-23T07:44:17Z",
          "updatedAt": "2022-11-23T07:44:18Z",
          "comments": [
            {
              "originalPosition": 225,
              "body": "Good point, it should be mentioned.",
              "createdAt": "2022-11-23T07:44:17Z",
              "updatedAt": "2022-11-23T07:44:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HARvh",
          "commit": {
            "abbreviatedOid": "3654c92"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-23T08:59:06Z",
          "updatedAt": "2022-11-23T08:59:07Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\n    \"phone_number\": \"08012345678\",\r\n```",
              "createdAt": "2022-11-23T08:59:06Z",
              "updatedAt": "2022-11-23T08:59:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HASEe",
          "commit": {
            "abbreviatedOid": "800f48e"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thank you, Daniel!!",
          "createdAt": "2022-11-23T09:00:02Z",
          "updatedAt": "2022-11-23T09:00:02Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5HASRf",
          "commit": {
            "abbreviatedOid": "56ba38a"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-23T09:00:36Z",
          "updatedAt": "2022-11-23T09:00:37Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "no one uses such domains in Japan though..?",
              "createdAt": "2022-11-23T09:00:37Z",
              "updatedAt": "2022-11-23T09:00:37Z"
            }
          ]
        }
      ]
    },
    {
      "number": 179,
      "id": "PR_kwDOHTmVzM5Dj2hY",
      "title": "Add Brian as coauthor",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/179",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-11-23T12:59:23Z",
      "updatedAt": "2022-11-23T17:38:34Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "15710f2b14410dcabdc126b7f6f59e9b02eaf398",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/add-brian",
      "headRefOid": "a3d8b11e039bf482216781289e76a7054987e544",
      "closedAt": "2022-11-23T17:38:34Z",
      "mergedAt": "2022-11-23T17:38:33Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "6d363285371ae98a8023e0a99a552ffc6e159ec1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5HDXJ3",
          "commit": {
            "abbreviatedOid": "a3d8b11"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-11-23T17:38:28Z",
          "updatedAt": "2022-11-23T17:38:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 181,
      "id": "PR_kwDOHTmVzM5DnfZX",
      "title": "revert to hash alg from digest derivation alg",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/181",
      "state": "MERGED",
      "author": "Sakurann",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "per IETF115 WG agreement.",
      "createdAt": "2022-11-24T05:33:00Z",
      "updatedAt": "2022-12-06T20:06:17Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "b95186a440d78ad04bf862b0af94d8cc7df217fb",
      "headRepository": "Sakurann/draft-selective-disclosure-jwt",
      "headRefName": "revert-to-hash",
      "headRefOid": "c5071cd1a67da2f8b46cf71c7dfb08acc89e949a",
      "closedAt": "2022-12-06T20:06:17Z",
      "mergedAt": "2022-12-06T20:06:17Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "f044eae6bb714e1423056e91940c3a71a548cdb9"
      },
      "comments": [
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "Can you please recompute the examples?",
          "createdAt": "2022-11-24T09:26:15Z",
          "updatedAt": "2022-11-24T09:26:15Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5HGGjM",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-11-24T09:18:41Z",
          "updatedAt": "2022-11-24T09:25:57Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\n * calculates the digests over the Holder-Selected Disclosures and verifies that each digest is contained in the SD-JWT.\r\n```",
              "createdAt": "2022-11-24T09:18:41Z",
              "updatedAt": "2022-11-24T09:25:57Z"
            },
            {
              "originalPosition": 34,
              "body": "```suggestion\r\nsignature verification as was used for creating the signature. In the hash digest approach outlined above, the same problem exists: for the Issuer and the\r\n```",
              "createdAt": "2022-11-24T09:19:01Z",
              "updatedAt": "2022-11-24T09:25:57Z"
            },
            {
              "originalPosition": 47,
              "body": "```suggestion\r\n   calculcation there. This means that the Verifier can easily compute and check the\r\n```",
              "createdAt": "2022-11-24T09:19:18Z",
              "updatedAt": "2022-11-24T09:25:57Z"
            },
            {
              "originalPosition": 75,
              "body": "```suggestion\r\n * The bytes of the output of the hash function are base64url-encoded, not the bytes making up the (often used) hex representation of the bytes of the digest.\r\n```",
              "createdAt": "2022-11-24T09:19:59Z",
              "updatedAt": "2022-11-24T09:25:57Z"
            },
            {
              "originalPosition": 85,
              "body": "Please fix `digest s` \u2192 `digests` everywhere.",
              "createdAt": "2022-11-24T09:20:43Z",
              "updatedAt": "2022-11-24T09:25:57Z"
            },
            {
              "originalPosition": 85,
              "body": "Why replace `hash digests` with `digests` everywhere? ",
              "createdAt": "2022-11-24T09:21:25Z",
              "updatedAt": "2022-11-24T09:25:57Z"
            },
            {
              "originalPosition": 149,
              "body": "```suggestion\r\n    1. Calculate the digest over the base64url string as described in (#hashing_disclosures).\r\n```",
              "createdAt": "2022-11-24T09:22:19Z",
              "updatedAt": "2022-11-24T09:25:57Z"
            },
            {
              "originalPosition": 150,
              "body": "```suggestion\r\n    2. Find all `_sd` keys in the SD-JWT payload that contain a digest calculated in the previous step. Note that there might be more than one `_sd` arrays in on SD-JWT.\r\n```",
              "createdAt": "2022-11-24T09:22:33Z",
              "updatedAt": "2022-11-24T09:25:57Z"
            },
            {
              "originalPosition": 177,
              "body": "I don't think this sentence adds information, the RECOMMENDATION is already there.\r\n```suggestion\r\n```",
              "createdAt": "2022-11-24T09:23:39Z",
              "updatedAt": "2022-11-24T09:25:57Z"
            },
            {
              "originalPosition": 197,
              "body": "Technically speaking, that would not be a profile, as it would need to change normative things within this spec. We cannot really give this recommendation here. All we can say is: HMAC or similar is at your own risk, non-standard, etc.; I'm not sure if we want to say that here.",
              "createdAt": "2022-11-24T09:25:19Z",
              "updatedAt": "2022-11-24T09:25:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HRGtj",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-28T11:46:56Z",
          "updatedAt": "2022-11-28T11:46:56Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "lots of `digest s` that need to be fixed to `digests`",
              "createdAt": "2022-11-28T11:46:56Z",
              "updatedAt": "2022-11-28T11:46:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HRSDK",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-28T12:21:49Z",
          "updatedAt": "2022-11-28T12:21:50Z",
          "comments": [
            {
              "originalPosition": 194,
              "body": "Do we need to say anything about truncated hashes here? I think probably so. The [registry](https://www.iana.org/assignments/named-information/named-information.xhtml ) has several including `sha-256-128`, which is probably okay security-wise and even useful as a space saving device. But it also has `sha-256-32`, which is probably never okay in this context. And a few in between those two that I'm not sure about. ",
              "createdAt": "2022-11-28T12:21:50Z",
              "updatedAt": "2022-11-28T12:21:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HRi5Z",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-28T13:10:23Z",
          "updatedAt": "2022-11-28T13:10:23Z",
          "comments": [
            {
              "originalPosition": 197,
              "body": "I think what we are trying to say here is that a smaller salt could potentially be used in conjunction with a more computationally expensive hash function. Where a hash function is a single input -> single digest output. And the  Hash Function Claim section says sd_hash_alg can be \"a value defined in another specification and/or profile of this specification\". Such a spec/profile would need to define that hash function for use at the SD-JWT layer as a single input to single digest output thing. But it could map/profile something like PBKDF2 to do that or define a 30 billion iteration sha2 thing. \r\n\r\nI'm not sure how much of that we want to say here. But it would be an \"at your own risk\" kind of thing. \r\n\r\nI think that the specific talk of HMAC and cryptographic secrets here is confusing things though. It certainly confused me :) \r\n\r\n\r\n\r\n",
              "createdAt": "2022-11-28T13:10:23Z",
              "updatedAt": "2022-11-28T13:10:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HRkVF",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-28T13:14:23Z",
          "updatedAt": "2022-11-28T13:14:23Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "I'd like to be consistent with the sd names.  So either \r\n\r\n`_sd` and `_sd_hash_alg` \r\n\r\nor\r\n\r\n`sd` and `sd_hash_alg`\r\n\r\nBut not mixed. \r\n\r\n",
              "createdAt": "2022-11-28T13:14:23Z",
              "updatedAt": "2022-11-28T13:14:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HRk9v",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-28T13:15:47Z",
          "updatedAt": "2022-11-28T13:15:48Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "and maybe shorten `[_]sd_hash_alg` to something like `[_]sdha`",
              "createdAt": "2022-11-28T13:15:47Z",
              "updatedAt": "2022-11-28T13:15:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HRlV3",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-28T13:16:31Z",
          "updatedAt": "2022-11-28T13:16:32Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "+1 for `_sd_hash_alg`. \r\n\r\nBTW, I added the underscore in front of `_sd` because it sorts nicely to the top (in case the claims are sorted alphabetically by key). With just `sd` the hashes sit somewhere in between the other non-sd claims.",
              "createdAt": "2022-11-28T13:16:31Z",
              "updatedAt": "2022-11-28T13:16:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HRqTu",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-28T13:29:51Z",
          "updatedAt": "2022-11-28T13:29:52Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "`_sd_alg` may work as well.",
              "createdAt": "2022-11-28T13:29:51Z",
              "updatedAt": "2022-11-28T13:29:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HS5MQ",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-28T16:30:33Z",
          "updatedAt": "2022-11-28T16:30:33Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "`_sd_alg` would work for me  ",
              "createdAt": "2022-11-28T16:30:33Z",
              "updatedAt": "2022-11-28T16:30:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Hs5Wi",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-02T19:09:45Z",
          "updatedAt": "2022-12-02T19:16:24Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "fixed",
              "createdAt": "2022-12-02T19:09:45Z",
              "updatedAt": "2022-12-02T19:16:24Z"
            },
            {
              "originalPosition": 57,
              "body": "I think `_sd_hash_alg` is explicit and nice?",
              "createdAt": "2022-12-02T19:13:26Z",
              "updatedAt": "2022-12-02T19:16:24Z"
            },
            {
              "originalPosition": 85,
              "body": "> Why replace hash digests with digests everywhere?\r\n\r\nbecause digest implies it is a hash digest?",
              "createdAt": "2022-12-02T19:14:23Z",
              "updatedAt": "2022-12-02T19:16:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Hs9EV",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-02T19:20:09Z",
          "updatedAt": "2022-12-02T19:20:10Z",
          "comments": [
            {
              "originalPosition": 197,
              "body": "> the Hash Function Claim section says sd_hash_alg can be \"a value defined in another specification and/or profile of this specification\"\r\npersonally, I am ok removing this section, with this PR, don't think it's relevant anymore.",
              "createdAt": "2022-12-02T19:20:09Z",
              "updatedAt": "2022-12-02T19:20:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HtDQW",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-02T19:45:12Z",
          "updatedAt": "2022-12-02T19:45:12Z",
          "comments": [
            {
              "originalPosition": 197,
              "body": "also removed this clause to prevent confusion.",
              "createdAt": "2022-12-02T19:45:12Z",
              "updatedAt": "2022-12-02T19:45:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HtDmT",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-02T19:46:43Z",
          "updatedAt": "2022-12-02T19:46:44Z",
          "comments": [
            {
              "originalPosition": 197,
              "body": "cc @christianpaquin for transparency that during IETF115 OAuth WG, there was a decision to revert to hashing alg because including HMAC includes a lot of additional definitions to be made, not just saying _sd_hash_alg can be HMAC, and we should keep SD-JWT spec simple.",
              "createdAt": "2022-12-02T19:46:44Z",
              "updatedAt": "2022-12-02T19:46:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HtD-C",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-02T19:48:23Z",
          "updatedAt": "2022-12-02T19:48:23Z",
          "comments": [
            {
              "originalPosition": 194,
              "body": "externalized to Issue #183 so that we can merge this PR now, publish and come back to this later",
              "createdAt": "2022-12-02T19:48:23Z",
              "updatedAt": "2022-12-02T19:48:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HtMU2",
          "commit": {
            "abbreviatedOid": "17b2a54"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-02T20:11:42Z",
          "updatedAt": "2022-12-02T20:11:42Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "I'd prefer `_sd_alg`. Size isn't everything but keeping JWTs as small as reasonable is worth keeping in mind. And JWT claim names are typically rather short/concise. `_sd_alg` is shorter but still conveys enough about what it is.  ",
              "createdAt": "2022-12-02T20:11:42Z",
              "updatedAt": "2022-12-02T20:11:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5H4fmI",
          "commit": {
            "abbreviatedOid": "4d336d3"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-06T06:57:21Z",
          "updatedAt": "2022-12-06T06:57:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5H8taH",
          "commit": {
            "abbreviatedOid": "4e19309"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-06T18:22:29Z",
          "updatedAt": "2022-12-06T18:22:30Z",
          "comments": [
            {
              "originalPosition": 118,
              "body": "```suggestion\r\n### Hash Function Claim {#hash_function_claim}\r\n```",
              "createdAt": "2022-12-06T18:22:29Z",
              "updatedAt": "2022-12-06T18:22:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5H8t2j",
          "commit": {
            "abbreviatedOid": "c5071cd"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-06T18:23:50Z",
          "updatedAt": "2022-12-06T18:23:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 182,
      "id": "PR_kwDOHTmVzM5EKyUB",
      "title": "little edits on review of the new sd jwt encoding ",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/182",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Some hopefully uncontroversial changes to the new approach from IETF 115 and a few other minor things I noticed. ",
      "createdAt": "2022-12-02T19:45:05Z",
      "updatedAt": "2022-12-05T19:10:59Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "6d363285371ae98a8023e0a99a552ffc6e159ec1",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc/new-sd-jwt-encoding-review",
      "headRefOid": "964455fb599acf854d81d0d13bc653d395bce487",
      "closedAt": "2022-12-05T19:10:51Z",
      "mergedAt": "2022-12-05T19:10:51Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "b95186a440d78ad04bf862b0af94d8cc7df217fb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5HuWs3",
          "commit": {
            "abbreviatedOid": "0d81086"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-03T04:18:52Z",
          "updatedAt": "2022-12-03T04:21:11Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "```suggestion\n`SD-CLAIMS` is an array of digest values that ensures the integrity of and maps to the respective Disclosures.  Digest values are calculated over the Disclosures, each of which contains the claim name (`CLAIM-NAME`), the claim value (`CLAIM-VALUE`), and a random salt (`SALT`). Digests are calculated using a digest derivation function such as a hash function, HMAC, or other (`DIGEST-DERIVATION()`):\n```\n",
              "createdAt": "2022-12-03T04:18:52Z",
              "updatedAt": "2022-12-03T04:21:11Z"
            },
            {
              "originalPosition": 31,
              "body": "Was this perceived redundant?",
              "createdAt": "2022-12-03T04:19:39Z",
              "updatedAt": "2022-12-03T04:21:11Z"
            },
            {
              "originalPosition": 92,
              "body": "```suggestion\nThe security model that conceals the plaintext claims relies on the fact that the salt cannot be learned or guessed by\n```\n",
              "createdAt": "2022-12-03T04:21:00Z",
              "updatedAt": "2022-12-03T04:21:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5HxGMC",
          "commit": {
            "abbreviatedOid": "0d81086"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Thank you, a number of good points here! Generally approved, left a few comments.",
          "createdAt": "2022-12-05T08:00:44Z",
          "updatedAt": "2022-12-05T08:06:18Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Best of both?\r\n```suggestion\r\n`SD-CLAIMS` is an array of digest values that ensure the integrity of and map to the respective Disclosures.  Digest values are calculated over the Disclosures, each of which contains the claim name (`CLAIM-NAME`), the claim value (`CLAIM-VALUE`), and a random salt (`SALT`). Digests are calculated using a digest derivation function such as a hash function, HMAC, or other (`DIGEST-DERIVATION()`):\r\n```",
              "createdAt": "2022-12-05T08:00:44Z",
              "updatedAt": "2022-12-05T08:06:18Z"
            },
            {
              "originalPosition": 65,
              "body": "I did not put a colon here as the introduction to the list is not a complete sentence.\r\n\r\n```suggestion\r\nIssuers MUST NOT issue SD-JWTs where\r\n```",
              "createdAt": "2022-12-05T08:04:43Z",
              "updatedAt": "2022-12-05T08:06:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Hy34x",
          "commit": {
            "abbreviatedOid": "0d81086"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-05T13:06:08Z",
          "updatedAt": "2022-12-05T13:06:08Z",
          "comments": [
            {
              "originalPosition": 92,
              "body": "The draft currently uses plaintext, cleartext and plain text. Maybe a full reconciliation is needed at some point. In the meantime, I'll take this suggestion. ",
              "createdAt": "2022-12-05T13:06:08Z",
              "updatedAt": "2022-12-05T13:06:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Hy7FK",
          "commit": {
            "abbreviatedOid": "964455f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-05T13:14:25Z",
          "updatedAt": "2022-12-05T13:14:26Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Yeah, it felt redundant and somewhat out of order with the content just below.",
              "createdAt": "2022-12-05T13:14:25Z",
              "updatedAt": "2022-12-05T13:14:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5Hy9cU",
          "commit": {
            "abbreviatedOid": "0d81086"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-05T13:21:02Z",
          "updatedAt": "2022-12-05T13:21:02Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "You will come to find, if you haven't already, that this native English speaker isn't very good at English :) ",
              "createdAt": "2022-12-05T13:21:02Z",
              "updatedAt": "2022-12-05T13:21:02Z"
            }
          ]
        }
      ]
    },
    {
      "number": 184,
      "id": "PR_kwDOHTmVzM5Ec_G7",
      "title": "First draft for enveloping considerations",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/184",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-12-06T08:43:12Z",
      "updatedAt": "2022-12-07T13:29:37Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "b95186a440d78ad04bf862b0af94d8cc7df217fb",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/address-enveloping-concerns",
      "headRefOid": "7fd611b7336904ba15f7faaf6fb9fc5c21a88aad",
      "closedAt": "2022-12-07T13:29:37Z",
      "mergedAt": "2022-12-07T13:29:37Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "de9277994a7427bd874b57e73ab6ee1ea653fc4e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5H62qe",
          "commit": {
            "abbreviatedOid": "7487434"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-06T13:39:22Z",
          "updatedAt": "2022-12-06T13:39:23Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "```suggestion\r\nif the privacy of End-User data or correlation attacks are a concern. Implementers MAY define a\r\n```",
              "createdAt": "2022-12-06T13:39:22Z",
              "updatedAt": "2022-12-06T13:39:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5H64jq",
          "commit": {
            "abbreviatedOid": "7487434"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-06T13:43:54Z",
          "updatedAt": "2022-12-06T13:43:54Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "```suggestion\r\nintercept and read the End-User's personal data or correlate the information with previous uses of the same SD-JWT.\r\n```",
              "createdAt": "2022-12-06T13:43:54Z",
              "updatedAt": "2022-12-06T13:43:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5H64zm",
          "commit": {
            "abbreviatedOid": "7487434"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-06T13:44:32Z",
          "updatedAt": "2022-12-06T13:44:33Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "Damn. We're even now ;-) ",
              "createdAt": "2022-12-06T13:44:32Z",
              "updatedAt": "2022-12-06T13:44:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5H69pT",
          "commit": {
            "abbreviatedOid": "7487434"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-06T13:53:59Z",
          "updatedAt": "2022-12-06T13:53:59Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "It's not a competition :) ",
              "createdAt": "2022-12-06T13:53:59Z",
              "updatedAt": "2022-12-06T13:53:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5H7dhN",
          "commit": {
            "abbreviatedOid": "17e1baf"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-06T15:05:24Z",
          "updatedAt": "2022-12-06T15:05:24Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "```suggestion\r\nImplementers MUST ensure that the transport protocol provides confidentiality,\r\nif the privacy of End-User data or correlation attacks are a concern. Implementers MAY define an\r\nenvelope format (such as described in (#enveloping) or nesting the SD-JWT Combined Format as\r\nthe plaintext payload of a JWE) to encrypt the SD-JWT\r\nand associated Disclosures when transmitted over an insecure channel.\r\n```",
              "createdAt": "2022-12-06T15:05:24Z",
              "updatedAt": "2022-12-06T15:10:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5H7eSn",
          "commit": {
            "abbreviatedOid": "17e1baf"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-06T15:07:07Z",
          "updatedAt": "2022-12-06T15:07:08Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "Should 'plaintext' be 'payload'? Other than that, looks good!",
              "createdAt": "2022-12-06T15:07:07Z",
              "updatedAt": "2022-12-06T15:07:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5H7fF2",
          "commit": {
            "abbreviatedOid": "17e1baf"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-06T15:08:53Z",
          "updatedAt": "2022-12-06T15:08:53Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "as mentioned on one of the messaging platforms - I think nesting the SD-JWT and Disclosures directly in a JWE is an appropriate approach in some/many cases. This suggestion just tries to leave room for that. ",
              "createdAt": "2022-12-06T15:08:53Z",
              "updatedAt": "2022-12-06T15:08:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5H7gjM",
          "commit": {
            "abbreviatedOid": "17e1baf"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-06T15:12:11Z",
          "updatedAt": "2022-12-06T15:12:12Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "> Should 'plaintext' be 'payload'? Other than that, looks good!\r\n\r\nAFAIK JWE/T uses 'plaintext' and 'payload' somewhat interchangeably and sometimes together.  I updated the suggestion to have both \"plaintext payload\". ",
              "createdAt": "2022-12-06T15:12:12Z",
              "updatedAt": "2022-12-06T15:12:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5H7gq8",
          "commit": {
            "abbreviatedOid": "17e1baf"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-06T15:12:27Z",
          "updatedAt": "2022-12-06T15:12:27Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "I see it says 'plaintext payload' now. Thanks, I'll merge this!",
              "createdAt": "2022-12-06T15:12:27Z",
              "updatedAt": "2022-12-06T15:12:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5H7hI2",
          "commit": {
            "abbreviatedOid": "463ab5d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-06T15:13:31Z",
          "updatedAt": "2022-12-06T15:13:31Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5IBMHP",
          "commit": {
            "abbreviatedOid": "463ab5d"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-07T11:44:48Z",
          "updatedAt": "2022-12-07T12:46:32Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\nIn some applications or transport protocols, it is desirable to put an SD-JWT and associated Disclosures into a JWT container. For example, an implementation may envelope all credentials and presentations, independent of their format, in a JWT to enable application-layer encryption during transport.\r\n```\r\n\r\n(feel free not to accept if this is not what you meant..)",
              "createdAt": "2022-12-07T11:44:48Z",
              "updatedAt": "2022-12-07T12:46:32Z"
            },
            {
              "originalPosition": 61,
              "body": "```suggestion\r\nintercept and read the End-User's personal data.\r\n```\r\nHow does the insecure channel related to correlating the multiple usage of the same SD-JWT..? isn't it more of an identifier/signing key not being pairwise issue..?",
              "createdAt": "2022-12-07T12:42:41Z",
              "updatedAt": "2022-12-07T12:46:32Z"
            },
            {
              "originalPosition": 75,
              "body": "```suggestion\r\nIf the privacy of End-User data or correlation attacks are a concern, \r\nImplementers MUST ensure that the transport protocol provides confidentiality. \r\nWhen transmitted over an insecure channel, implementers MAY also define an\r\nenvelope format (such as described in (#enveloping) or nesting the SD-JWT Combined Format as\r\nthe plaintext payload of a JWE) to encrypt the SD-JWT\r\nand associated Disclosures.\r\n```",
              "createdAt": "2022-12-07T12:45:08Z",
              "updatedAt": "2022-12-07T12:46:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5IBhlV",
          "commit": {
            "abbreviatedOid": "463ab5d"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-07T12:50:09Z",
          "updatedAt": "2022-12-07T12:50:09Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "The solution to both problems is the same, but \r\n\r\n1. colluding verifiers identifying a person using the same signing keys, and\r\n2. attackers observing the wire and seeing the same credential\r\n\r\nare two different problems. ",
              "createdAt": "2022-12-07T12:50:09Z",
              "updatedAt": "2022-12-07T12:50:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5IBip7",
          "commit": {
            "abbreviatedOid": "463ab5d"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-07T12:53:16Z",
          "updatedAt": "2022-12-07T12:53:16Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "This changes the meaning (in an unintended way). Implementers may define an envelope format even for secure channels. \r\n\r\n(Also, the second sentence may imply that Implementers are sometimes transmitted over insecure channels... )",
              "createdAt": "2022-12-07T12:53:16Z",
              "updatedAt": "2022-12-07T12:53:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5IBmn5",
          "commit": {
            "abbreviatedOid": "7fd611b"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "made comments/suggestions, but overall sounds good.",
          "createdAt": "2022-12-07T13:04:18Z",
          "updatedAt": "2022-12-07T13:04:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 186,
      "id": "PR_kwDOHTmVzM5Eik-l",
      "title": "Fix (I hope?) the includes in the Complex Structured SD-JWT section",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/186",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "was getting \r\n```\r\n2022/12/06 13:37:49 Failure to read: \"open /Users/briancampbell/dev/sd-jwt/oauth-selective-disclosure-jwt/examples/complex-ekyc/user_claims.json: no such file or directory\" (from \"*\")\r\n2022/12/06 13:37:49 Failure to read: \"open /Users/briancampbell/dev/sd-jwt/oauth-selective-disclosure-jwt/examples/complex-ekyc/sd_jwt_payload.json: no such file or directory\" (from \"*\")\r\n2022/12/06 13:37:49 Failure to read: \"open /Users/briancampbell/dev/sd-jwt/oauth-selective-disclosure-jwt/examples/complex-ekyc/disclosures.md: no such file or directory\" (from \"*\")\r\n2022/12/06 13:37:49 Failure to read: \"open /Users/briancampbell/dev/sd-jwt/oauth-selective-disclosure-jwt/examples/complex-ekyc/combined_presentation.txt: no such file or directory\" (from \"*\")\r\n2022/12/06 13:37:49 Failure to read: \"open /Users/briancampbell/dev/sd-jwt/oauth-selective-disclosure-jwt/examples/complex-ekyc/verified_contents.json: no such file or directory\" (from \"*\")\r\n```\r\nand all those examples are/were missing from https://drafts.oauth.net/oauth-selective-disclosure-jwt/draft-ietf-oauth-selective-disclosure-jwt.html#name-example-3-complex-structure \r\n\r\n",
      "createdAt": "2022-12-06T20:44:14Z",
      "updatedAt": "2022-12-07T07:48:10Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f044eae6bb714e1423056e91940c3a71a548cdb9",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc/fix-_",
      "headRefOid": "c9f86c456d0bf78ce57150a4fa9c20e9d0b29f69",
      "closedAt": "2022-12-07T07:48:09Z",
      "mergedAt": "2022-12-07T07:48:09Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "7184af03f74597b18ff60c2dfc45ba6e1531f45e"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "and that looks better https://drafts.oauth.net/oauth-selective-disclosure-jwt/bc/fix-_/draft-ietf-oauth-selective-disclosure-jwt.html#name-example-3-complex-structure ",
          "createdAt": "2022-12-06T21:05:02Z",
          "updatedAt": "2022-12-06T21:05:02Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5H_ZtV",
          "commit": {
            "abbreviatedOid": "c9f86c4"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-07T05:51:10Z",
          "updatedAt": "2022-12-07T05:51:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5H_3W7",
          "commit": {
            "abbreviatedOid": "c9f86c4"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-07T07:48:04Z",
          "updatedAt": "2022-12-07T07:48:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 187,
      "id": "PR_kwDOHTmVzM5EjgrP",
      "title": "Attempt to finish the change to _sd_alg for the hash algortim claim name",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/187",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-12-06T22:58:57Z",
      "updatedAt": "2022-12-07T07:41:07Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "f044eae6bb714e1423056e91940c3a71a548cdb9",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc/_sd_alg",
      "headRefOid": "656587513bc101cd9189059731855c573cf03a57",
      "closedAt": "2022-12-07T07:41:07Z",
      "mergedAt": "2022-12-07T07:41:07Z",
      "mergedBy": "danielfett",
      "mergeCommit": {
        "oid": "e9cea2ccf1dd164759f9d135797321fc16686768"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5H-w1T",
          "commit": {
            "abbreviatedOid": "6565875"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-07T01:55:05Z",
          "updatedAt": "2022-12-07T01:55:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5H_0ZY",
          "commit": {
            "abbreviatedOid": "6565875"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-07T07:36:47Z",
          "updatedAt": "2022-12-07T07:36:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 190,
      "id": "PR_kwDOHTmVzM5EqE5h",
      "title": "Longer salt",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/190",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Longer salt, which meets the recommendations, in examples in Creating\u2026 Disclosures",
      "createdAt": "2022-12-07T15:59:00Z",
      "updatedAt": "2022-12-08T15:16:46Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "de9277994a7427bd874b57e73ab6ee1ea653fc4e",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc/big-salt",
      "headRefOid": "19eec7ca9425c9f44eb0895d87afdb8298dd45c8",
      "closedAt": "2022-12-07T18:12:10Z",
      "mergedAt": "2022-12-07T18:12:10Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "88cd058e2bb5813e2d4a2979601656bde08e7900"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "While working on this PR, I was going to a base64 decoding site to do a bit of a sanity check on the values but got distracted and decided to see how ChatGPT would handle it. So I gave it this prompt in the openai playground:\r\n\r\n```decode WyJfMjZiYzRMVC1hYzZxMktJNmNCVzVlcyIsICJmYW1pbHlfbmFtZSIsICJNw7ZiaXVzIl0``` \r\n\r\nand it added one `=` pad character to the end of the prompt and answered with:\r\n\r\n```[\"f26bc4L-ac6q2KI6cBW5es\", \"family_name\", \"M\u00fcller\"]```\r\n\r\nNote that it actually decodes to:\r\n\r\n```[\"_26bc4LT-ac6q2KI6cBW5es\", \"family_name\", \"M\u00f6bius\"]```\r\n\r\nif you need me, I'll just be over here staring into the void while tears run down my face as I contemplate the arrival of the quiet end of days. ",
          "createdAt": "2022-12-07T16:44:05Z",
          "updatedAt": "2022-12-07T16:46:54Z"
        },
        {
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "body": "![Screenshot_20221208_142124](https://user-images.githubusercontent.com/89476/206457005-cd675635-664b-463b-879c-2139d6d11dc0.png)\r\n\r\nLooks like it must be a very tedious process to decode character by character and at some point ChatGPT is going \"ah, good enough, this must be a German name with some umlaut, let's say... \"M\u00fcbiz\". \r\n\r\nThe salt decoded differently, but also wrong.\r\n\r\nM\u00fcbiz is btw not a real family name as far as I can tell.",
          "createdAt": "2022-12-08T13:24:31Z",
          "updatedAt": "2022-12-08T13:24:31Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "It's amazing and terrifying at the same time.  ",
          "createdAt": "2022-12-08T15:16:46Z",
          "updatedAt": "2022-12-08T15:16:46Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 191,
      "id": "PR_kwDOHTmVzM5Ermvs",
      "title": "acknowledgements",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/191",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Add Justin to Acknowledgements (he suggested the array for _sd in sid\u2026e meeting) \r\n\r\nand fix the commas + and in that list of names ",
      "createdAt": "2022-12-07T19:37:58Z",
      "updatedAt": "2022-12-15T17:09:59Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "88cd058e2bb5813e2d4a2979601656bde08e7900",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "bc/ack-jr",
      "headRefOid": "e15b2372e5b73552abfc1a3ea76ce3a0624cda7f",
      "closedAt": "2022-12-15T17:09:59Z",
      "mergedAt": "2022-12-15T17:09:59Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "83e948bfa366e0c760c0b2b6a085c167ec08fe6d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5IG7vz",
          "commit": {
            "abbreviatedOid": "e15b237"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-08T09:55:13Z",
          "updatedAt": "2022-12-08T09:55:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5IsjgU",
          "commit": {
            "abbreviatedOid": "e15b237"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-15T17:09:48Z",
          "updatedAt": "2022-12-15T17:09:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 192,
      "id": "PR_kwDOHTmVzM5ExZJC",
      "title": "Use ES256 instead of RS256 to generate shorter examples",
      "url": "https://github.com/oauth-wg/oauth-selective-disclosure-jwt/pull/192",
      "state": "MERGED",
      "author": "danielfett",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-12-08T10:35:47Z",
      "updatedAt": "2022-12-15T17:12:45Z",
      "baseRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "baseRefName": "master",
      "baseRefOid": "88cd058e2bb5813e2d4a2979601656bde08e7900",
      "headRepository": "oauth-wg/oauth-selective-disclosure-jwt",
      "headRefName": "danielfett/ec-crypto",
      "headRefOid": "0e160af29c22e8817e1c4299108b73806159c5b1",
      "closedAt": "2022-12-15T17:12:45Z",
      "mergedAt": "2022-12-15T17:12:45Z",
      "mergedBy": "Sakurann",
      "mergeCommit": {
        "oid": "c34d4795eeb7d4df5dc4278e5357452d780be761"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Approved!",
          "createdAt": "2022-12-09T13:27:52Z",
          "updatedAt": "2022-12-09T13:27:52Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOHTmVzM5IHOtT",
          "commit": {
            "abbreviatedOid": "0ec403f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-08T10:37:31Z",
          "updatedAt": "2022-12-08T10:37:32Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "@bc-pi I removed the \"kid\" header parameter from the examples. It used to contain the key thumbprint. AFAIK there is no requirement for a \"kid\" header parameter and just always putting the thumbprint there is not the right solution anyway - any objections?",
              "createdAt": "2022-12-08T10:37:31Z",
              "updatedAt": "2022-12-08T10:37:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5IIUMd",
          "commit": {
            "abbreviatedOid": "0ec403f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-08T14:07:34Z",
          "updatedAt": "2022-12-08T14:07:34Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "(I'm not sure why `kid` was in there in the first place.)",
              "createdAt": "2022-12-08T14:07:34Z",
              "updatedAt": "2022-12-08T14:07:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5IIj-A",
          "commit": {
            "abbreviatedOid": "0ec403f"
          },
          "author": "peppelinux",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-08T14:46:05Z",
          "updatedAt": "2022-12-08T14:46:06Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "It was me @danielfett, it's not relevant for the draft and its examples, please go ahead :-)",
              "createdAt": "2022-12-08T14:46:05Z",
              "updatedAt": "2022-12-08T14:46:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5IJCIZ",
          "commit": {
            "abbreviatedOid": "0ec403f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-08T15:53:41Z",
          "updatedAt": "2022-12-08T15:53:41Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "no objections",
              "createdAt": "2022-12-08T15:53:41Z",
              "updatedAt": "2022-12-08T15:53:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5IKqKN",
          "commit": {
            "abbreviatedOid": "0ec403f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-08T20:43:43Z",
          "updatedAt": "2022-12-08T20:43:43Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I don't think `use`, `alg` and `kid` should be included here.",
              "createdAt": "2022-12-08T20:43:43Z",
              "updatedAt": "2022-12-08T20:43:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5IKqpd",
          "commit": {
            "abbreviatedOid": "0ec403f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-08T20:45:42Z",
          "updatedAt": "2022-12-08T20:45:42Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "`use`, `alg` and `kid` are not really meaningful or useful in this context (I don't think?) but take up space and potentially distract or confuse ",
              "createdAt": "2022-12-08T20:45:42Z",
              "updatedAt": "2022-12-08T21:37:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5IKreZ",
          "commit": {
            "abbreviatedOid": "0ec403f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-08T20:48:41Z",
          "updatedAt": "2022-12-08T20:48:41Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "I'm guessing this is where they (`use`, `alg` and `kid`) come from but, as per my previous comments, I don't think use/kid/alg should be in the holder confirmation key. ",
              "createdAt": "2022-12-08T20:48:41Z",
              "updatedAt": "2022-12-08T21:37:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5IK2SS",
          "commit": {
            "abbreviatedOid": "0ec403f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Looks pretty good overall! I even double checked some of the signatures with my JOSE/JWT library. \r\n\r\nI do, however, think that before merging a few parameters should be removed from the holder jwk.",
          "createdAt": "2022-12-08T21:27:09Z",
          "updatedAt": "2022-12-08T21:27:09Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5IMt2u",
          "commit": {
            "abbreviatedOid": "0ec403f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-09T08:29:04Z",
          "updatedAt": "2022-12-09T08:29:05Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "You're right! I removed them.",
              "createdAt": "2022-12-09T08:29:04Z",
              "updatedAt": "2022-12-09T08:29:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5IMt_z",
          "commit": {
            "abbreviatedOid": "0ec403f"
          },
          "author": "danielfett",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-09T08:29:35Z",
          "updatedAt": "2022-12-09T08:29:35Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "As above - removed the three superfluous elements.",
              "createdAt": "2022-12-09T08:29:35Z",
              "updatedAt": "2022-12-09T08:29:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOHTmVzM5IOINr",
          "commit": {
            "abbreviatedOid": "0e160af"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-09T13:25:51Z",
          "updatedAt": "2022-12-09T13:25:51Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOHTmVzM5Iskbn",
          "commit": {
            "abbreviatedOid": "0e160af"
          },
          "author": "Sakurann",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-15T17:12:27Z",
          "updatedAt": "2022-12-15T17:12:27Z",
          "comments": []
        }
      ]
    }
  ]
}